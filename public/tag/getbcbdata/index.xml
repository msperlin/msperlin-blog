<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GetBCBData | msperlin</title>
    <link>https://www.msperlin.com/tag/getbcbdata/</link>
      <atom:link href="https://www.msperlin.com/tag/getbcbdata/index.xml" rel="self" type="application/rss+xml" />
    <description>GetBCBData</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Marcelo S. Perlin © 2024</copyright><lastBuildDate>Wed, 01 May 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.msperlin.com/img/portrait.jpg</url>
      <title>GetBCBData</title>
      <link>https://www.msperlin.com/tag/getbcbdata/</link>
    </image>
    
    <item>
      <title>Risk and return for B3</title>
      <link>https://www.msperlin.com/post/2019-05-01-meanvariance/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://www.msperlin.com/post/2019-05-01-meanvariance/</guid>
      <description>
&lt;script src=&#34;https://www.msperlin.com/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;One of the subjects that I teach in my undergraduate finance class is the relationship between risk and expected returns. In short, the riskier the investment, more returns should be &lt;strong&gt;expected&lt;/strong&gt; by the investor. It is not a difficult argument to make. All that you need to understand is to remember that people are not naive in financial markets. Whenever they make a big gamble, the rewards should also be large. Rational investors, on theory, would not invest in risky stocks that are likelly to yield low returns.&lt;/p&gt;
&lt;p&gt;Going further, one the arguments I make to support this idea is looking at historical data. By assuming that expected returns is the average yearly return rate on a stock and the risk is the standard deviation of the same returns, we can check for a positive relationship by plotting the data in a scatter plot.&lt;/p&gt;
&lt;p&gt;In this post I’ll show how you can do it easily in R using &lt;code&gt;BatchGetSymbols&lt;/code&gt;, &lt;code&gt;GetBCBData&lt;/code&gt; and &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we will gather and organize all data sets. Here I’m using the stock components of Ibovespa, the Brazilian market index, and also CDI, a common risk free rate in Brazil. The next code will:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Import the data&lt;/li&gt;
&lt;li&gt;organize it in the same structure (same columns)&lt;/li&gt;
&lt;li&gt;bind it all together&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get stock data
library(tidyverse)
library(BatchGetSymbols)
library(GetBCBData)

first.date &amp;lt;- &amp;#39;2008-01-01&amp;#39; # last date is Sys.Date by default

# get stock data
df.ibov &amp;lt;- GetIbovStocks()
mkt.idx &amp;lt;- c(&amp;#39;^BVSP&amp;#39;)
my.tickers &amp;lt;- c(mkt.idx, paste0(df.ibov$tickers, &amp;#39;.SA&amp;#39;) )

df.prices &amp;lt;- BatchGetSymbols(tickers = my.tickers, first.date = first.date,
                             freq.data = &amp;#39;yearly&amp;#39;, 
                             be.quiet = TRUE)[[2]]

tab.stocks &amp;lt;- df.prices %&amp;gt;%
  na.omit() %&amp;gt;%
  group_by(ticker) %&amp;gt;%
  summarise(mean.ret = mean(ret.adjusted.prices),
            sd.ret = sd(ret.adjusted.prices)) %&amp;gt;%
  mutate(ticker = str_replace_all(ticker, fixed(&amp;#39;.SA&amp;#39;), &amp;#39;&amp;#39;) )

tab.mkt.idx &amp;lt;- tab.stocks %&amp;gt;%
               filter(ticker %in% mkt.idx)

tab.stocks &amp;lt;- tab.stocks %&amp;gt;%
               filter(!(ticker %in% mkt.idx))

# get CDI (risk free rate) 
my.id &amp;lt;- c(CDI = 4389)

tab.CDI &amp;lt;- gbcbd_get_series(my.id, first.date = first.date) %&amp;gt;%
  rename(ticker = series.name ) %&amp;gt;%
  mutate(ref.date = format(ref.date, &amp;#39;%Y&amp;#39;),
         value = value/100) %&amp;gt;%
  group_by(ref.date, ticker) %&amp;gt;%
  summarise(ret = mean(value)) %&amp;gt;%
  group_by(ticker) %&amp;gt;%
  summarise(mean.ret = mean(ret),
            sd.ret = sd(ret))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the data, lets use &lt;code&gt;ggplot&lt;/code&gt; to build our graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

p &amp;lt;- ggplot(tab.stocks, aes(x = sd.ret, y = mean.ret, group = ticker)) + 
  geom_point() + 
  geom_text(data = tab.stocks, aes(x = sd.ret, y = mean.ret, label = ticker), nudge_y = 0.03,
            check_overlap = TRUE, nudge_x = 0.05 ) + 
  geom_point(data = tab.CDI, aes(x = sd.ret, y = mean.ret, color = ticker), size =5) +
  geom_point(data = tab.mkt.idx, 
             aes(x = sd.ret, y = mean.ret, color = ticker), size =5) +
  labs(x = &amp;#39;Risk (standard deviation)&amp;#39;, y =&amp;#39;Expected Returns (average)&amp;#39;, 
       title = &amp;#39;Mean X Variance map for B3&amp;#39;,
       subtitle = paste0(nrow(tab.stocks), &amp;#39; stocks, &amp;#39;, lubridate::year(min(df.prices$ref.date)), 
                         &amp;#39; - &amp;#39;, lubridate::year(max(df.prices$ref.date)))) + 
  scale_x_continuous(labels = scales::percent) + 
  scale_y_continuous(labels = scales::percent)  

print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.msperlin.com/post/2019-05-01-MeanVariance_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Looks pretty! What do we learn?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Overall, most of the stocks did better than the risk free rate (CDI);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a positive relationship between risk and return. The higher the standard deviation (x-axis), the higher the mean of returns (y-axis). However, notice that it is not a perfect relationship. If we followed the mean-variance gospel, there are lots of opportunities of arbitrage. We would mostly invest in those stocks in the upper-left part of the plot;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Surprisingly, the market index, Ibovespa (^BVSP), is not well positioned in the graph. Since it is a diversified portfolio, I expected it to be closer to the frontier, around stock EQTL3.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>New package: GetBCBData</title>
      <link>https://www.msperlin.com/post/2019-04-15-getbcbdata/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://www.msperlin.com/post/2019-04-15-getbcbdata/</guid>
      <description>
&lt;script src=&#34;https://www.msperlin.com/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The Central Bank of Brazil (BCB) offers access to the SGS system (sistema gerenciador de series temporais) with a official API available &lt;a href=&#34;http://www.bcb.gov.br/?sgs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Over time, I find myself using more and more of the available datasets in my regular research and studies. Last weekend I decided to write my own API package that would make my life (and others) a lot easier.&lt;/p&gt;
&lt;p&gt;Package GetBCBData can fetch data efficiently and rapidly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use of a caching system with package &lt;code&gt;memoise&lt;/code&gt; to speed up repeated requests of data;&lt;/li&gt;
&lt;li&gt;Users can utilize all cores of the machine (parallel computing) when fetching a large batch of time series;&lt;/li&gt;
&lt;li&gt;Allows the choice for format output: long (row oriented, tidy data) or wide (column oriented)&lt;/li&gt;
&lt;li&gt;Error handling internally. Even if requested series does not exist, the function will still return all results.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# CRAN (official release) - IN CHECK
install.packages(&amp;#39;GetBCBData&amp;#39;)

# Github (dev version)
devtools::install_github(&amp;#39;msperlin/GetBCBData&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;a-simple-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A simple example&lt;/h2&gt;
&lt;p&gt;Let’s have a look at unemployment rates around the world. After searching for the ids in the &lt;a href=&#34;http://www.bcb.gov.br/?sgs&#34;&gt;SGS system&lt;/a&gt;, we find the ids for 6 countries and set it as input &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, let’s download the data with &lt;code&gt;GetBCBData&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#devtools::install_github(&amp;#39;msperlin/GetBCBData&amp;#39;)

library(GetBCBData)
library(tidyverse)

my.countries &amp;lt;- c(&amp;#39;Germany&amp;#39;, &amp;#39;Canada&amp;#39;, &amp;#39;USA&amp;#39;, 
                  &amp;#39;France&amp;#39;, &amp;#39;Italy&amp;#39;, &amp;#39;Japan&amp;#39;)

my.ids &amp;lt;- c(3785:3790)

names(my.ids) &amp;lt;- paste0(&amp;#39;Unemp. rate - &amp;#39;, my.countries)

df.bcb &amp;lt;- gbcbd_get_series(id = my.ids ,
                           first.date = &amp;#39;2000-01-01&amp;#39;,
                           last.date = Sys.Date())

glimpse(df.bcb)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 1,196
## Columns: 4
## $ ref.date    &amp;lt;date&amp;gt; 2000-01-01, 2000-02-01, 2000-03-01, 2000-04-01, 2000-05-…
## $ value       &amp;lt;dbl&amp;gt; 8.2, 8.1, 8.1, 8.0, 8.0, 8.0, 7.9, 7.9, 7.9, 7.8, 7.8, 7.…
## $ id.num      &amp;lt;int&amp;gt; 3785, 3785, 3785, 3785, 3785, 3785, 3785, 3785, 3785, 378…
## $ series.name &amp;lt;chr&amp;gt; &amp;quot;Unemp. rate - Germany&amp;quot;, &amp;quot;Unemp. rate - Germany&amp;quot;, &amp;quot;Unemp.…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(df.bcb, aes(x = ref.date, y = value) ) +
  geom_line() + 
  labs(title = &amp;#39;Unemploymnent Rates Around the World&amp;#39;, 
       subtitle = paste0(min(df.bcb$ref.date), &amp;#39; to &amp;#39;, max(df.bcb$ref.date)),
       x = &amp;#39;&amp;#39;, y = &amp;#39;Percentage*100&amp;#39;) + facet_wrap(~series.name)


print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.msperlin.com/post/2019-04-15-GetBCBData_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
