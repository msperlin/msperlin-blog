<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GetQuandlData | msperlin</title>
    <link>https://www.msperlin.com/tag/getquandldata/</link>
      <atom:link href="https://www.msperlin.com/tag/getquandldata/index.xml" rel="self" type="application/rss+xml" />
    <description>GetQuandlData</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Marcelo S. Perlin © 2022</copyright><lastBuildDate>Tue, 01 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.msperlin.com/img/portrait.jpg</url>
      <title>GetQuandlData</title>
      <link>https://www.msperlin.com/tag/getquandldata/</link>
    </image>
    
    <item>
      <title>New package: GetQuandlData</title>
      <link>https://www.msperlin.com/post/2019-10-01-new-package-getquandldata/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://www.msperlin.com/post/2019-10-01-new-package-getquandldata/</guid>
      <description>
&lt;script src=&#34;https://www.msperlin.com/blog/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quandl.com/search&#34;&gt;Quandl&lt;/a&gt; is one of the best platforms for finding and downloading financial and economic time series. The collection of free databases is solid and I use it intensively in my research and class material.&lt;/p&gt;
&lt;p&gt;But, a couple of things from the native package &lt;code&gt;Quandl&lt;/code&gt; always bothered me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple data is always returned in the wide (column oriented) format (why??);&lt;/li&gt;
&lt;li&gt;No local caching of data;&lt;/li&gt;
&lt;li&gt;No control for importing error and status;&lt;/li&gt;
&lt;li&gt;Not easy to work within the &lt;code&gt;tidyverse&lt;/code&gt; collection of packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you suspect, I decided to tackle the problem over the weekend. The result is package &lt;code&gt;GetQuandlData&lt;/code&gt;. This is what it does differently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It uses the json api (and not the Quandl native function), so that some metadata is also returned;&lt;/li&gt;
&lt;li&gt;The resulting dataframe is always returned in the long format, even for multiple series;&lt;/li&gt;
&lt;li&gt;Users can set custom names for input series. This is very useful when using along &lt;code&gt;ggplot&lt;/code&gt; or making tables;&lt;/li&gt;
&lt;li&gt;Uses package &lt;code&gt;memoise&lt;/code&gt; to set a local caching system. This means that the second time you ask for a particular time series, it will grab it from your hard drive (and not the internet);&lt;/li&gt;
&lt;li&gt;Always compares the requested dates against dates available in the platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# not in CRAN yet (need to test it further)
#install.packages(&amp;#39;GetQuandlData&amp;#39;)

# from github
devtools::install_github(&amp;#39;msperlin/GetQuandlData&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;example-01---inflation-in-the-us&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example 01 - Inflation in the US&lt;/h3&gt;
&lt;p&gt;Let’s download and plot information about inflation in the US:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GetQuandlData)
library(tidyverse)

my_id &amp;lt;- c(&amp;#39;Inflation USA&amp;#39; = &amp;#39;YALE/SP_CPI&amp;#39;)
my_api &amp;lt;- readLines(&amp;#39;~/Dropbox/98-pass_and_bash/.quandl_api.txt&amp;#39;) # you need your own API (get it at https://www.quandl.com/sign-up-modal?defaultModal=showSignUp&amp;gt;)
first_date &amp;lt;- &amp;#39;2005-01-01&amp;#39;
last_date &amp;lt;- Sys.Date()

df &amp;lt;- get_Quandl_series(id_in = my_id, 
                        api_key = my_api, 
                        first_date = first_date,
                        last_date = last_date, 
                        cache_folder = tempdir())

glimpse(df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the data is in the long format. Let’s plot it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

p &amp;lt;- ggplot(df, aes(x = ref_date, y = value/100)) + 
  geom_col() + 
  labs(y = &amp;#39;Inflation (%)&amp;#39;, 
       x = &amp;#39;&amp;#39;,
       title = &amp;#39;Inflation in the US&amp;#39;) + 
  scale_y_continuous(labels = scales::percent)

p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beautiful!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-02---inflation-for-many-countries&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example 02 - Inflation for many countries&lt;/h3&gt;
&lt;p&gt;Next, lets have a look into a more realistic case, where we need inflation data for several countries:&lt;/p&gt;
&lt;p&gt;First, we need to see what are the available datasets from database &lt;code&gt;RATEINF&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GetQuandlData)
library(tidyverse)

db_id &amp;lt;- &amp;#39;RATEINF&amp;#39;
my_api &amp;lt;- readLines(&amp;#39;~/Dropbox/98-pass_and_bash/.quandl_api.txt&amp;#39;) # you need your own API

df &amp;lt;- get_database_info(db_id, my_api)

knitr::kable(df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice. Now we only need to filter the series with YOY inflation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;idx &amp;lt;- stringr::str_detect(df$name, &amp;#39;Inflation YOY&amp;#39;)
df_series &amp;lt;- df[idx, ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and grab the data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_id &amp;lt;- df_series$quandl_code
names(my_id) &amp;lt;- df_series$name
first_date &amp;lt;- &amp;#39;2010-01-01&amp;#39;
last_date &amp;lt;- Sys.Date()

df_inflation &amp;lt;- get_Quandl_series(id_in = my_id, 
                                  api_key = my_api,
                                  first_date = first_date,
                                  last_date = last_date)

glimpse(df_inflation)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, finally, an elegant plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(df_inflation, aes(x = ref_date, y = value/100)) + 
  geom_col() + 
  labs(y = &amp;#39;Inflation (%)&amp;#39;, 
       x = &amp;#39;&amp;#39;,
       title = &amp;#39;Inflation in the World&amp;#39;,
       subtitle = paste0(first_date, &amp;#39; to &amp;#39;, last_date)) + 
  scale_y_continuous(labels = scales::percent) + 
  facet_wrap(~series_name)

p&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
