<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beta | msperlin</title>
    <link>https://www.msperlin.com/tag/beta/</link>
      <atom:link href="https://www.msperlin.com/tag/beta/index.xml" rel="self" type="application/rss+xml" />
    <description>Beta</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Marcelo S. Perlin © 2025</copyright><lastBuildDate>Sun, 15 Jan 2017 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.msperlin.com/img/portrait.jpg</url>
      <title>Beta</title>
      <link>https://www.msperlin.com/tag/beta/</link>
    </image>
    
    <item>
      <title>How to calculate betas (systematic risk) for a large number of stocks</title>
      <link>https://www.msperlin.com/post/2017-01-15-calculatingbetas/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://www.msperlin.com/post/2017-01-15-calculatingbetas/</guid>
      <description>


&lt;p&gt;One of the first examples about using linear regression models in finance is the calculation of betas, the so called market model. Coefficient beta is a measure of systematic risk and it is calculated by estimating a linear model where the dependent variable is the return vector of a stock and the explanatory variable is the return vector of a diversified local market index, such as SP500 (US), FTSE (UK), Ibovespa (Brazil), or any other.&lt;/p&gt;
&lt;p&gt;From the academic side, the calculation of beta is part of a famous asset pricing model, CAPM - Capital Asset Pricing Model, that relates expected return and systematic risk. One can reach the market model equation by assuming several conditions such as Normal distributed returns, rational investors and frictionless market. Summing up, the CAPM model predicts that betas have a linear relationship to expected returns, that is, stocks with higher betas should present, collectively, higher average of historical returns.&lt;/p&gt;
&lt;p&gt;In the quantitative side, we can formulate the market model as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(R_t = \alpha + \beta R_{M,t} + \epsilon _t\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(R_{t}\)&lt;/span&gt; is the return of the stock at time &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(R_{M,t}\)&lt;/span&gt; is the return of the market index, &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; is the constant (also called Jensen’s alphas) and, finally, &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; is the measure of systematic risk for the stock. The values of &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; are found by minimizing the sum of squared errors of the model. So, if you have a vector of prices for a stock and another vector of prices for the local market index, you can easily find the stock’s beta by calculating the daily returns and estimating the market model by OLS.&lt;/p&gt;
&lt;p&gt;The problem here is that, usually, you don’t want the beta of a single stock. You want to calculate the systematic risk for a large number of stocks. This is where students usually have problems, as they only learned in class how to estimate one model. In order to do the same procedure for more than one stock, some programming is needed. This is where R really shines in comparison to simpler programs such as Excel.&lt;/p&gt;
&lt;p&gt;In this post I will download some data from the US market, make some adjustments to the resulting dataframe and discuss three ways to calculate the betas of several stocks. These are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using a &lt;code&gt;loop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using function &lt;code&gt;by&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using package &lt;code&gt;dplyr&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But first, lets load the data.&lt;/p&gt;
&lt;div id=&#34;loading-the-data-and-preparing-it&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Loading the data and preparing it&lt;/h1&gt;
&lt;p&gt;I’m a bit biased, but I really like using package &lt;code&gt;BatchGetSymbols&lt;/code&gt; to download financial data from yahoo finance. In this example we will download data for 10 stocks selected randomly from the SP500 index. I will also add the ticker &lt;code&gt;^GSPC&lt;/code&gt;, which belongs to the SP500 index. We will need it to calculate the betas. In order for the code to be reproducible, I will set &lt;code&gt;random.seed(100)&lt;/code&gt;. This means that anyone that runs the code available here will get the exact same results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(BatchGetSymbols)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: rvest&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: xml2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: dplyr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(100)

ticker.MktIdx &amp;lt;- &amp;#39;^GSPC&amp;#39;
first.date &amp;lt;- as.Date(&amp;#39;2015-01-01&amp;#39;)
last.date &amp;lt;- as.Date(&amp;#39;2019-01-01&amp;#39;)

n.chosen.stocks &amp;lt;- 10 # can&amp;#39;t be higher than 505

# get random stocks
my.tickers &amp;lt;- c(sample(GetSP500Stocks()$Tickers,n.chosen.stocks),
                ticker.MktIdx)

l.out &amp;lt;- BatchGetSymbols(tickers = my.tickers, 
                             first.date = first.date,
                             last.date = last.date)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Running BatchGetSymbols for:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##    tickers =FTV, ZBH, OXY, C, XLNX, VZ, BEN, WY, ROL, VTR, ^GSPC
##    Downloading data for benchmark ticker
## ^GSPC | yahoo (1|1) | Found cache file
## FTV | yahoo (1|11) | Found cache file - Got 62% of valid prices | OUT: not enough data (thresh.bad.data = 75%)
## ZBH | yahoo (2|11) | Found cache file - Got 100% of valid prices | Youre doing good!
## OXY | yahoo (3|11) | Found cache file - Got 100% of valid prices | Good stuff!
## C | yahoo (4|11) | Found cache file - Got 100% of valid prices | Looking good!
## XLNX | yahoo (5|11) | Found cache file - Got 100% of valid prices | Youre doing good!
## VZ | yahoo (6|11) | Found cache file - Got 100% of valid prices | Feels good!
## BEN | yahoo (7|11) | Found cache file - Got 100% of valid prices | Well done!
## WY | yahoo (8|11) | Found cache file - Got 100% of valid prices | Well done!
## ROL | yahoo (9|11) | Found cache file - Got 100% of valid prices | Looking good!
## VTR | yahoo (10|11) | Found cache file - Got 100% of valid prices | Nice!
## ^GSPC | yahoo (11|11) | Found cache file - Got 100% of valid prices | Got it!&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.stocks &amp;lt;- l.out$df.tickers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, lets check if everything went well with the import process.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(l.out$df.control)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 6
##    ticker src   download.status total.obs perc.benchmark.dates threshold.decisi…
##    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;               &amp;lt;int&amp;gt;                &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            
##  1 FTV    yahoo OK                    628                0.624 OUT              
##  2 ZBH    yahoo OK                   1006                1     KEEP             
##  3 OXY    yahoo OK                   1006                1     KEEP             
##  4 C      yahoo OK                   1006                1     KEEP             
##  5 XLNX   yahoo OK                   1006                1     KEEP             
##  6 VZ     yahoo OK                   1006                1     KEEP             
##  7 BEN    yahoo OK                   1006                1     KEEP             
##  8 WY     yahoo OK                   1006                1     KEEP             
##  9 ROL    yahoo OK                   1006                1     KEEP             
## 10 VTR    yahoo OK                   1006                1     KEEP             
## 11 ^GSPC  yahoo OK                   1006                1     KEEP&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that everything is Ok. All stocks have column &lt;code&gt;perc.benchmark.dates&lt;/code&gt; equal to one (100%), meaning that they have the exact same dates as the benchmark ticker.&lt;/p&gt;
&lt;p&gt;Now, lets plot the time series of prices and look for any problem:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

p &amp;lt;- ggplot(df.stocks, aes(x=ref.date, y=price.adjusted)) + 
  geom_line() + facet_wrap(~ticker, scales = &amp;#39;free&amp;#39;)

print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.msperlin.com/post/2017-01-15-CalculatingBetas_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Again, we see that all prices seems to be Ok. This is one of the advantages of working with adjusted (and not closing) prices from yahoo finance. Artificial effects in the dataset such as ex-dividend prices, splits and inplits are already taken into account and the result is a smooth series without any breaks.&lt;/p&gt;
&lt;p&gt;The final step in preparing the data is to add a column with the returns of the market index. This is not strictly necessary but I really like to keep things organized in a tabular way. Since we will match each vector of returns of the stocks to a vector of returns of the market index, it makes sense to &lt;em&gt;synchronize&lt;/em&gt; the rows in the data.frame. First, we isolate the data for the market index in object &lt;code&gt;df.MktIdx&lt;/code&gt; and use function &lt;code&gt;match&lt;/code&gt; to make an index that matches the dates between the assets and the market index. We later use this index to build a new column in &lt;code&gt;df.stocks&lt;/code&gt;. See the next code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.MktIdx &amp;lt;- df.stocks[df.stocks$ticker==ticker.MktIdx, ]

idx &amp;lt;- match(df.stocks$ref.date, df.MktIdx$ref.date)

df.stocks$ret.MktIdx &amp;lt;- df.MktIdx$ret.adjusted.prices[idx]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the data in the correct format and structure, let’s start to calculate some betas. Here is where the different approaches will differ in syntax. Let’s start with the first case, using loops.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;estimating-betas&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Estimating betas&lt;/h1&gt;
&lt;div id=&#34;using-loops&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using loops&lt;/h2&gt;
&lt;p&gt;Loops are great and (almost) everyone loves then. While they can be a bit more verbose than fancy on-liners, the structure of a loop is very flexible and this can help solve complex problems. Let use it in our problem.&lt;/p&gt;
&lt;p&gt;The first step in using loops is the understand the vector that will be used as iterator in the loop. In our problem we are processing each stock, so the number of iterations in the loop is simply the number of stocks in the sample. We can find the unique stocks with the command &lt;code&gt;unique&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Check unique tickers
unique.tickers &amp;lt;- unique(df.stocks$ticker)

# create a empty vector to store betas
beta.vec &amp;lt;- c()

for (i.ticker in unique.tickers){
  
  # message to prompt
  cat(&amp;#39;\nRunning ols for&amp;#39;,i.ticker)
  
  # filter the data.frame for stock i.ticker
  df.temp &amp;lt;- df.stocks[df.stocks$ticker==i.ticker, ]
  
  # calculate beta with lm
  my.ols &amp;lt;- lm(data = df.temp, formula = ret.adjusted.prices ~ ret.MktIdx)
  
  # save beta
  my.beta &amp;lt;- coef(my.ols)[2]
  
  # store beta em beta.vec
  beta.vec &amp;lt;- c(beta.vec, my.beta)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Running ols for ZBH
## Running ols for OXY
## Running ols for C
## Running ols for XLNX
## Running ols for VZ
## Running ols for BEN
## Running ols for WY
## Running ols for ROL
## Running ols for VTR
## Running ols for ^GSPC&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# print result
print(data.frame(unique.tickers,beta.vec))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    unique.tickers  beta.vec
## 1             ZBH 0.9130036
## 2             OXY 1.0046153
## 3               C 1.3468402
## 4            XLNX 1.2272195
## 5              VZ 0.5864176
## 6             BEN 1.2555433
## 7              WY 0.9400250
## 8             ROL 0.8057286
## 9             VTR 0.4923402
## 10          ^GSPC 1.0000000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the result is a lengthy code, but it works quite well. The final result is a dataframe with the tickers and their betas. Notice that, as expected, the betas are all positive and &lt;code&gt;^GSPC&lt;/code&gt; has a beta equal to 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-function-by&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using function &lt;code&gt;by&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Another way of solving the problem is to calculate the betas using one of the functions from the &lt;code&gt;apply&lt;/code&gt; family. In this case, we will use function &lt;code&gt;by&lt;/code&gt;. Be aware that you can also solve the problem using &lt;code&gt;tapply&lt;/code&gt; and &lt;code&gt;lapply&lt;/code&gt;. The code, however, will increase in complexity.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;by&lt;/code&gt; works similarly to &lt;code&gt;tapply&lt;/code&gt;. The difference is that it is oriented to dataframes. That is, given a grouping variable, the original dataframe is broken into smaller dataframes and each piece is passed to a function. This helps a lot our problem since we need to work with two columns, the vector of returns of the asset and the vector of returns of the market index.&lt;/p&gt;
&lt;p&gt;Given the functional form of &lt;code&gt;by&lt;/code&gt;, will need to encapsulate a procedure that takes a dataframe as input and returns a coefficient beta, calculated from columns &lt;code&gt;ret&lt;/code&gt; and &lt;code&gt;ret.MktIdx&lt;/code&gt;. The next code does that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get.beta &amp;lt;- function(df.temp){
  
  # estimate model
  my.ols &amp;lt;- lm(data=df.temp, formula = ret.adjusted.prices ~ ret.MktIdx)
  
  # isolate beta
  my.beta &amp;lt;- coef(my.ols)[2]
  
  # return beta
  return(my.beta)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The previous function accepts a single dataframe called &lt;code&gt;df.temp&lt;/code&gt;, uses it to calculate a linear model with function &lt;code&gt;lm&lt;/code&gt; and then returns the resulting beta, which is the second coefficient in &lt;code&gt;coef(my.ols)&lt;/code&gt;. Now, lets use it with function &lt;code&gt;by&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get betas with by
my.l &amp;lt;- by(data = df.stocks, 
           INDICES = df.stocks$ticker, 
           FUN = get.beta)

# my.l is an objetct of class by. To get only its elements, we can unclass it
betas &amp;lt;- unclass(my.l)

# print result
print(data.frame(betas))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           betas
## ^GSPC 1.0000000
## BEN   1.2555433
## C     1.3468402
## OXY   1.0046153
## ROL   0.8057286
## VTR   0.4923402
## VZ    0.5864176
## WY    0.9400250
## XLNX  1.2272195
## ZBH   0.9130036&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, it worked well. Needless to say that the results are identical to the previous case.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using &lt;code&gt;dplyr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now, let’s solve our problem using package &lt;code&gt;dplyr&lt;/code&gt;. If you are not familiar with the &lt;em&gt;tidyverse&lt;/em&gt; and the work of Hadley Wickham, you will be a happier person after reading the rest of this post, trust me.&lt;/p&gt;
&lt;p&gt;Package &lt;code&gt;dplyr&lt;/code&gt; is one of my favorites and most used packages. It allows for the representation of data processing procedures in a simpler and more intuitive way. It really helps to tackle computational problems if you can fit it within a flexible structure. This is what, in my opinion, &lt;code&gt;dplyr&lt;/code&gt; does best. It combines clever functions with dataframes in the long (tidy) format.&lt;/p&gt;
&lt;p&gt;Have a look in the next set of code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

beta.tab &amp;lt;- df.stocks %&amp;gt;% 
  group_by(ticker) %&amp;gt;% # group by column ticker
  do(ols.model = lm(data = ., formula = ret.adjusted.prices ~ret.MktIdx)) %&amp;gt;%   # estimate model
  mutate(beta = coef(ols.model)[2]) # get coefficients

print(beta.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [10 x 3]
## Groups: &amp;lt;by row&amp;gt;
## 
## # A tibble: 10 x 3
##    ticker ols.model  beta
##    &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 ^GSPC  &amp;lt;lm&amp;gt;      1    
##  2 BEN    &amp;lt;lm&amp;gt;      1.26 
##  3 C      &amp;lt;lm&amp;gt;      1.35 
##  4 OXY    &amp;lt;lm&amp;gt;      1.00 
##  5 ROL    &amp;lt;lm&amp;gt;      0.806
##  6 VTR    &amp;lt;lm&amp;gt;      0.492
##  7 VZ     &amp;lt;lm&amp;gt;      0.586
##  8 WY     &amp;lt;lm&amp;gt;      0.940
##  9 XLNX   &amp;lt;lm&amp;gt;      1.23 
## 10 ZBH    &amp;lt;lm&amp;gt;      0.913&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After loading &lt;code&gt;dplyr&lt;/code&gt;, we use the pipeline operator %&amp;gt;% to streamline all calculations. This means that we don’t need to keep a copy of intermediate calculations. Also, It looks pretty, don’t you agree?&lt;/p&gt;
&lt;p&gt;The line &lt;code&gt;beta.tab &amp;lt;- df.stocks %&amp;gt;%&lt;/code&gt; passes the dataframe &lt;code&gt;df.stocks&lt;/code&gt; for the next line, &lt;code&gt;group_by(ticker) %&amp;gt;%&lt;/code&gt;, which will group the dataframe according the the values of column &lt;code&gt;ticker&lt;/code&gt; and pass the result for the next step. The line &lt;code&gt;do(ols.model = lm(data = ., formula = ret ~ret.MktIdx))&lt;/code&gt; estimates the model by passing a temporary dataframe and saves it in a column called &lt;code&gt;ols.model&lt;/code&gt;. Notice that the model is a &lt;code&gt;S3&lt;/code&gt; object and not a single value. The dataframe alternative &lt;code&gt;tibble&lt;/code&gt; is flexible with its content. The final line, &lt;code&gt;mutate(beta = coef(ols.model)[2])&lt;/code&gt; retrieves the beta from each element of the column &lt;code&gt;ols.model&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What I really like about &lt;code&gt;dplyr&lt;/code&gt; is that it makes it easy to extend the original code. As an example, if I wanted to use a second grouping variable, I can just add it in the second line as &lt;code&gt;group_by(ticker, newgroupingvariable)&lt;/code&gt;. This becomes handy if you need, lets say, to estimated the model in different time periods.&lt;/p&gt;
&lt;p&gt;As an example, let’s assume that I want to split the sample for each stock in half and see if the betas change significantly from time period to the other. This robustness check is a very common procedure in scientific research. First, let’s build a new column in &lt;code&gt;df.stocks&lt;/code&gt; that sets the time periods as &lt;code&gt;Sample 1&lt;/code&gt; and &lt;code&gt;Sample 2&lt;/code&gt;. We can use &lt;code&gt;tapply&lt;/code&gt; for that;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.sample &amp;lt;- function(ref.dates){
  my.n &amp;lt;- length(ref.dates) # get number of dates
  my.n.half &amp;lt;- floor(my.n/2) # get aproximate half of observations
  
  # create grouping variable
  samples.vec &amp;lt;- c(rep(&amp;#39;Sample 1&amp;#39;, my.n.half ), rep(&amp;#39;Sample 2&amp;#39;, my.n-my.n.half))
  
  # return
  return(samples.vec)
}

# build group
my.l &amp;lt;- tapply(X = df.stocks$ref.date, 
               INDEX = df.stocks$ticker,
               FUN = set.sample )

# unsort it
my.l &amp;lt;- my.l[my.tickers]

# save it in dataframe
df.stocks$my.sample &amp;lt;- unlist(my.l)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We proceed by calling the same functions as before, but using an additional grouping variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta.tab &amp;lt;- df.stocks %&amp;gt;% 
  group_by(ticker,my.sample) %&amp;gt;% # group by column ticker
  do(ols.model = lm(data = ., formula = ret.adjusted.prices ~ret.MktIdx)) %&amp;gt;%   # estimate model
  mutate(beta = coef(ols.model)[2]) # get coefficients

print(beta.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [20 x 4]
## Groups: &amp;lt;by row&amp;gt;
## 
## # A tibble: 20 x 4
##    ticker my.sample ols.model  beta
##    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     &amp;lt;list&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 ^GSPC  Sample 1  &amp;lt;lm&amp;gt;      1.00 
##  2 ^GSPC  Sample 2  &amp;lt;lm&amp;gt;      1.   
##  3 BEN    Sample 1  &amp;lt;lm&amp;gt;      1.40 
##  4 BEN    Sample 2  &amp;lt;lm&amp;gt;      1.08 
##  5 C      Sample 1  &amp;lt;lm&amp;gt;      1.54 
##  6 C      Sample 2  &amp;lt;lm&amp;gt;      1.11 
##  7 OXY    Sample 1  &amp;lt;lm&amp;gt;      1.10 
##  8 OXY    Sample 2  &amp;lt;lm&amp;gt;      0.882
##  9 ROL    Sample 1  &amp;lt;lm&amp;gt;      0.781
## 10 ROL    Sample 2  &amp;lt;lm&amp;gt;      0.836
## 11 VTR    Sample 1  &amp;lt;lm&amp;gt;      0.653
## 12 VTR    Sample 2  &amp;lt;lm&amp;gt;      0.295
## 13 VZ     Sample 1  &amp;lt;lm&amp;gt;      0.669
## 14 VZ     Sample 2  &amp;lt;lm&amp;gt;      0.485
## 15 WY     Sample 1  &amp;lt;lm&amp;gt;      1.08 
## 16 WY     Sample 2  &amp;lt;lm&amp;gt;      0.772
## 17 XLNX   Sample 1  &amp;lt;lm&amp;gt;      1.07 
## 18 XLNX   Sample 2  &amp;lt;lm&amp;gt;      1.42 
## 19 ZBH    Sample 1  &amp;lt;lm&amp;gt;      0.888
## 20 ZBH    Sample 2  &amp;lt;lm&amp;gt;      0.944&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, the output now shows the beta for all combinations between &lt;code&gt;ticker&lt;/code&gt; and &lt;code&gt;my.sample&lt;/code&gt;. It seems that the betas tend to be higher for &lt;em&gt;Sample 2&lt;/em&gt;, meaning that the overall systematic risk in the market has increased over time, at least for the majority of the ten chosen stocks. Given the small sample of stocks, It might be interesting to test for this property in a larger dataset.&lt;/p&gt;
&lt;p&gt;Back to the model, if you want more information about it, you can just write new lines in the last call to %&amp;gt;%. Let’s say, for example, that you want to get the value of alpha and the corresponding t-statistic of both coefficients. We can use the following code for that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

beta.tab &amp;lt;- df.stocks %&amp;gt;% 
  group_by(ticker) %&amp;gt;% # group by column ticker
  do(ols.model = lm(data = ., formula = ret.adjusted.prices ~ret.MktIdx)) %&amp;gt;%   # estimate model
  mutate(beta = coef(ols.model)[2],
         beta.tstat = summary(ols.model)[[4]][2,3],
         alpha = coef(ols.model)[1],
         alpha.tstat = summary(ols.model)[[4]][1,3]) # get coefficients&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in summary.lm(ols.model): essentially perfect fit: summary may be
## unreliable

## Warning in summary.lm(ols.model): essentially perfect fit: summary may be
## unreliable&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(beta.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [10 x 6]
## Groups: &amp;lt;by row&amp;gt;
## 
## # A tibble: 10 x 6
##    ticker ols.model  beta beta.tstat     alpha alpha.tstat
##    &amp;lt;chr&amp;gt;  &amp;lt;list&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 ^GSPC  &amp;lt;lm&amp;gt;      1        3.49e17  0              0    
##  2 BEN    &amp;lt;lm&amp;gt;      1.26     2.99e 1 -0.000708      -1.96 
##  3 C      &amp;lt;lm&amp;gt;      1.35     3.46e 1 -0.000184      -0.548
##  4 OXY    &amp;lt;lm&amp;gt;      1.00     2.19e 1 -0.000217      -0.551
##  5 ROL    &amp;lt;lm&amp;gt;      0.806    2.11e 1  0.000879       2.67 
##  6 VTR    &amp;lt;lm&amp;gt;      0.492    8.94e 0 -0.000144      -0.304
##  7 VZ     &amp;lt;lm&amp;gt;      0.586    1.65e 1  0.000287       0.935
##  8 WY     &amp;lt;lm&amp;gt;      0.940    2.24e 1 -0.000463      -1.28 
##  9 XLNX   &amp;lt;lm&amp;gt;      1.23     2.46e 1  0.000623       1.45 
## 10 ZBH    &amp;lt;lm&amp;gt;      0.913    2.17e 1 -0.000164      -0.451&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the previous code, I added line &lt;code&gt;beta.tstat = summary(ols.model)[[4]][2,3]&lt;/code&gt; that returns the t-statistic of the beta coefficient. The location of this parameter is found by investigating the elements of an object of type &lt;code&gt;lm&lt;/code&gt;. After calling &lt;code&gt;summary&lt;/code&gt;, the t-statistic is available in the fourth element of the &lt;code&gt;lm&lt;/code&gt; object, which is a matrix with several information from the estimation. The t-statistic for the alpha parameter is found in a similar way.&lt;/p&gt;
&lt;p&gt;As you can see, the syntax of &lt;code&gt;dplyr&lt;/code&gt; make it easy to extend the model and quickly try new things. It is possible to do the same using other R functions and a loop, but using &lt;code&gt;dplyr&lt;/code&gt; is really handy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;As you can probably suspect from the text, I’m a big fan of &lt;code&gt;dplyr&lt;/code&gt; and I’m always teaching its use to my students. While loops are ok and I personally use then a lot in more complex problems, the functions in &lt;code&gt;dplyr&lt;/code&gt; allow for an intuitive syntax in data processing, making it easy to understand and extend code.&lt;/p&gt;
&lt;p&gt;Do notice that the code in this example is self contained and reproducible. If you want to try it for more stocks, just change input &lt;code&gt;n.chosen.stocks&lt;/code&gt; to a higher value.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
