<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GetEdgarData | msperlin</title>
    <link>https://www.msperlin.com/blog/category/getedgardata/</link>
      <atom:link href="https://www.msperlin.com/blog/category/getedgardata/index.xml" rel="self" type="application/rss+xml" />
    <description>GetEdgarData</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Marcelo S. Perlin © 2022</copyright><lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.msperlin.com/blog/img/portrait.jpg</url>
      <title>GetEdgarData</title>
      <link>https://www.msperlin.com/blog/category/getedgardata/</link>
    </image>
    
    <item>
      <title>New package: GetEdgarData</title>
      <link>https://www.msperlin.com/blog/post/2019-10-16-new-package-getedgardata/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://www.msperlin.com/blog/post/2019-10-16-new-package-getedgardata/</guid>
      <description>
&lt;script src=&#34;https://www.msperlin.com/blog/blog/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;As of 2019-10-31, this package is discontinued and will not longer be updated. See &lt;a href=&#34;https://www.msperlin.com/blog/post/2019-11-01-new-package-simfinr/&#34;&gt;this post&lt;/a&gt; for more details about the alternative, package simfinR.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every company traded in the US stock market must report its quarterly and yearly documents to the SEC and the public in general. This includes its accounting statements (10-K, 10-K) and any other corporate event that is relevant to investors.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sec.gov/edgar/searchedgar/companysearch.html&#34;&gt;Edgar&lt;/a&gt; is the interface where we can search for a company’s filling information. By looking up a company’s CIK code, one can find all previous filling information. A complete list of available forms can be found in this &lt;a href=&#34;https://www.sec.gov/forms&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Package &lt;code&gt;GetEdgarData&lt;/code&gt; allows the user import the financial documents from such fillings directly into R. Unlike other packages, the information is not taken from the filling’s xml files, but the &lt;a href=&#34;https://www.sec.gov/dera/data&#34;&gt;structured datasets&lt;/a&gt; at the DERA (Division of Economic and Risk Analysis) section . This means we can import a large amount of structured financial data very quickly. The downside is that the available data starts at 2009.&lt;/p&gt;
&lt;p&gt;Like many other packages I’ve wrote for data grabbing, the queries are saved locally using package &lt;code&gt;memoise&lt;/code&gt;. This means that the second time you ask for a particular year of data, the function will load a local copy, and will not download the data again.&lt;/p&gt;
&lt;p&gt;Both new packages, &lt;code&gt;GetEdgarData&lt;/code&gt; and &lt;code&gt;GetQuandlData&lt;/code&gt; (&lt;a href=&#34;https://www.msperlin.com/blog/post/2019-10-01-new-package-getquandldata/&#34;&gt;blog post&lt;/a&gt;) are going to be part of the second edition of my book “Analyzing Financial Data with R” (see first edition &lt;a href=&#34;https://www.msperlin.com/pafdR/&#34;&gt;here&lt;/a&gt;). My expectation is to publish the new book in early 2020.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# not in CRAN yet (need to test it further)
#install.packages(&amp;#39;GetEdgarData&amp;#39;)

# from github
devtools::install_github(&amp;#39;msperlin/GetEdgarData&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;example-01---apples-quarterly-net-profit&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example 01 - Apples Quarterly Net Profit&lt;/h3&gt;
&lt;p&gt;The first step in using &lt;code&gt;GetEdgarData&lt;/code&gt; is finding information about available companies:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GetEdgarData)
library(tidyverse)

my_year &amp;lt;- 2018
type_form &amp;lt;- &amp;#39;10-K&amp;#39;

df_info &amp;lt;- get_info_companies(years = my_year, 
                              type_data = &amp;#39;yearly&amp;#39;, 
                              type_form = type_form)

glimpse(df_info)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We find information about &lt;code&gt;nrow(df_info)&lt;/code&gt; companies for the &lt;code&gt;type_form&lt;/code&gt; documents in the year of &lt;code&gt;my_year&lt;/code&gt;. Digging deeper we find that the official name of Apple is ‘APPLE INC’. Let’s use it to download the financial information since 2009.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_company &amp;lt;- &amp;#39;APPLE INC&amp;#39;
my_years &amp;lt;- 2009:2018
type_data &amp;lt;- &amp;#39;quarterly&amp;#39;

df_fin_reports &amp;lt;- get_edgar_fin_data(companies = my_company,
                                     years = my_years,
                                     type_data = type_data)

glimpse(df_fin_reports)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we filter for the net income (id tag = ‘NetIncomeLoss’) and plot the resulting dataframe:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;net_income &amp;lt;- df_fin_reports %&amp;gt;%
  filter(tag == &amp;#39;NetIncomeLoss&amp;#39;)

p &amp;lt;- ggplot(net_income, 
            aes(x = ref_date, y = value_ref)) +
  geom_col() + 
  labs(title = &amp;#39;APPLE Quarterly Net Income (10-Q)&amp;#39;,
       subtitle = paste0(min(my_years), &amp;#39; - &amp;#39;, max(my_years)),
       x = &amp;#39;&amp;#39;,
       y = &amp;#39;Net Income ($)&amp;#39;,
       caption = paste0(&amp;#39;Data from EDGAR &amp;lt;https://www.sec.gov/edgar/searchedgar/companysearch.html&amp;gt;&amp;#39;, &amp;#39;\n&amp;#39;,
                        &amp;#39;Downloaded with package GetEdgarData&amp;#39;) )

print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;example-02---quarterly-net-profit-of-many-companies&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example 02 - Quarterly Net Profit of Many Companies&lt;/h3&gt;
&lt;p&gt;The package is really handy for fetching information for many companies. This is due to the fact that the SEC/DERA stores data of all companies by year and the package creates a local cache of the resulting data. This means that, by fetching data for one company, we indirectly have information for all companies.&lt;/p&gt;
&lt;p&gt;Let’s see an example by selecting four random companies and creating the same previous graph:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(5)
my_companies &amp;lt;- sample(df_info$current_name, 4)
my_years &amp;lt;- 2009:2018
type_data &amp;lt;- &amp;#39;quarterly&amp;#39;

net_income &amp;lt;- get_edgar_fin_data(companies = my_companies,
                                 years = my_years,
                                 type_data = type_data) %&amp;gt;%
  filter(tag == &amp;#39;NetIncomeLoss&amp;#39;)

p &amp;lt;- ggplot(net_income, 
            aes(x = ref_date, y = value_ref)) +
  geom_col() + facet_wrap(~current_name, scales = &amp;#39;free&amp;#39;) + 
  labs(title = &amp;#39;Quarterly Net Income for Four Random companies&amp;#39;,
       subtitle = paste0(min(my_years), &amp;#39; - &amp;#39;, max(my_years)),
       x = &amp;#39;&amp;#39;,
       y = &amp;#39;Net Income ($)&amp;#39;,
       caption = paste0(&amp;#39;Data from EDGAR &amp;lt;https://www.sec.gov/edgar/searchedgar/companysearch.html&amp;gt;&amp;#39;, &amp;#39;\n&amp;#39;,
                        &amp;#39;Downloaded in R with package GetEdgarData&amp;#39;) )

print(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Give it a try and, if you’ve found any problem or bug, let me know at &lt;a href=&#34;mailto:marceloperlin@gmail.com&#34; class=&#34;email&#34;&gt;marceloperlin@gmail.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
