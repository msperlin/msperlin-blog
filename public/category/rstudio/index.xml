<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rstudio | msperlin</title>
    <link>https://www.msperlin.com/blog/category/rstudio/</link>
      <atom:link href="https://www.msperlin.com/blog/category/rstudio/index.xml" rel="self" type="application/rss+xml" />
    <description>rstudio</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Marcelo S. Perlin © 2022</copyright><lastBuildDate>Sat, 03 Nov 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.msperlin.com/blog/img/portrait.jpg</url>
      <title>rstudio</title>
      <link>https://www.msperlin.com/blog/category/rstudio/</link>
    </image>
    
    <item>
      <title>Some Useful Tricks in RStudio</title>
      <link>https://www.msperlin.com/blog/post/2018-11-03-rstudiotricks/</link>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://www.msperlin.com/blog/post/2018-11-03-rstudiotricks/</guid>
      <description>
&lt;script src=&#34;https://www.msperlin.com/blog/blog/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’ve been using Rstudio for a long time and I got some tricks to share. These are simple and useful commands and shortcuts that really help the productivity of my students. If you got a suggestion of trick, use the comment section and I’ll add it in this post.&lt;/p&gt;
&lt;div id=&#34;package-rstudioapi&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Package &lt;code&gt;rstudioapi&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;When using Rstudio, package &lt;code&gt;rstudioapi&lt;/code&gt; gives you lots of information about your session. The most useful one is the script location. You can use it to automatically change the working folder to where you have the file locally saved.&lt;/p&gt;
&lt;p&gt;Function &lt;code&gt;rstudioapi::getActiveDocumentContext&lt;/code&gt; gives you details about the file being currently edited in RStudio. Have a look:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my.d &amp;lt;- rstudioapi::getActiveDocumentContext()
print(my.d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Document Context: 
## - id:        &amp;#39;FA202F79&amp;#39;
## - path:      &amp;#39;~/Dropbox/11-My Website/www.msperlin.com-blog/content/post/2018-11-03-RstudioTricks.Rmd&amp;#39;
## - contents:  &amp;lt;69 rows&amp;gt;
## Document Selection:
## - [24, 6] -- [24, 6]: &amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that the file location is available in &lt;code&gt;path&lt;/code&gt;. Let’s grab it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my.file.location &amp;lt;- rstudioapi::getActiveDocumentContext()$path&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if we want the name of the directory, just call &lt;code&gt;dirname(my.file.location)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my.dir &amp;lt;- dirname(my.file.location)
print(my.dir)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/home/msperlin/Dropbox/11-My Website/www.msperlin.com-blog/content/post&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, if you want to change the working directory automatically to where the script is locally saved, just write:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my.dir &amp;lt;- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(my.dir)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is very practical and I use it in all of my R scripts. If you copy the script to another folder, it will run without any directory problem. If you send the script to someone else within a zipped folder, he/she can run it without modifications as the working directory will change automatically.&lt;/p&gt;
&lt;p&gt;Be aware, however, this &lt;strong&gt;only works in RStudio&lt;/strong&gt;. If you run the code without the IDE, in a bash script for example, package &lt;code&gt;rstudioapi&lt;/code&gt; will not be available. In this case, you’ll need to set the directory explicitly.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dark-theme-for-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dark theme for Rstudio&lt;/h2&gt;
&lt;p&gt;A dark theme is a productivity life-changer if you spend a lot of time in front of a computer. Before I used it, my eyes were always strained after a long period of work. By the end of the day, using tablets or even my phone was disconforting. You can change the theme in Rstudio by going into “tools” -&amp;gt; “global options” -&amp;gt; “appearance”. There are many dark themes available. Pick one that pleases you the most. See the difference between a white and dark theme next:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.msperlin.com/blog/blog/img/rstudio-whitetheme.png&#34; /&gt; &lt;img src=&#34;https://www.msperlin.com/blog/blog/img/rstudio-darktheme.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Going further, I also advise to change the theme of you operating system. I can assure you that, in the long run, it is worth it!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;autocomplete-tab-is-your-friend&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Autocomplete (tab) is your friend!&lt;/h2&gt;
&lt;p&gt;A commom misconception about programming is that you must memorize lot of names. This is far from the truth. You never need to memorize anything when using Rstudio! From function arguments to variable names and names of files, everything can be searched by pressing the &lt;em&gt;tab&lt;/em&gt; key on your keyboard. When using naming conventions for functions and objects, this becomes even more useful. For example, every dataframe in my code starts with “df”, like in “df.prices”, “df.tickers” and so on. When I’m looking for the name of a dataframe, I just write “df.” and press &lt;em&gt;tab&lt;/em&gt;. The result is a list of object names.&lt;/p&gt;
&lt;p&gt;The autocomplete function also works for function arguments, directory and file locations and packages. In my book I have a whole section about it. &lt;a href=&#34;https://www.msperlin.com/pafdR/basicoperations.html#using-code-completion-with-tab&#34;&gt;Check it out&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.msperlin.com/blog/blog/img/autocomplete_arquivos.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Autocomplete for files&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.msperlin.com/blog/blog/img/autocomplete_pacotes.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Autocomplete for packages&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section-naming-with-----&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Section naming with &lt;code&gt;----&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You can name a section in any R script in Rstudio using the textual clue &lt;code&gt;----&lt;/code&gt;. This section will show up in the bottom left of the RStudio editor screen. When you want to jump to that section, just press the key. So, you can organized your code with sections like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get data ----

## code here

# clean data ----

## code here

# report results ----

## code here&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
