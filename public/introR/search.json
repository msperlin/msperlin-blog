[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introdução ao R",
    "section": "",
    "text": "Prefácio\nEste livro surge como um spin off de minha outra obra “Análise de Dados Financeiros com o R”. O conteúdo foi adaptado … TODO Este livro introduz o leitor ao uso do R como ferramenta de computação e análise de dados. Ao final deste livro você irá aprender como utilizar o R para importar e manipular dados e, por fim, reportar tabelas e figuras de uma pesquisa em um relatório técnico.\nSou professor da Universidade Federal do Rio Grande do Sul, onde leciono, na graduação e pós-graduação, disciplinas relacionadas ao uso do R em análise de dados. Aprendi na prático onde alunos mais erram em termos de aprendizado, e compilei um conteúdo abrangente que irá sanar a maioria das dúvidas. Seja voce um pesquisador acadêmico, ou analistas de dados, este livro é um projeto pessoal para disseminar conhecimento sobre a ferramenta para um público maior e mais diversificado.\nOutra motivação que tive para escrever o livro foi minha experiência na utilização de códigos disponibilizados por outros pesquisadores em pesquisas específicas. Na maioria das vezes, esses códigos são desorganizados, pouco claros e, possivelmente, funcionam apenas no computador do pesquisador que os escreveu! Surpreendentemente, devido a desorganização, o trabalho de desvendar o código de outros professores tende a levar mais tempo do que desenvolver eu mesmo o procedimento, por mais complexo que ele fosse. Esses casos, aliás, ferem a ciência, pois um dos princípios básicos da pesquisa é a replicabilidade - isto é, uma rotina de pesquisa mal escrita irá reduzir a possibilidade de outras pessoas a utilizarem.\nAssim como se espera que um artigo científico esteja bem escrito, também se deve esperar que o código por trás da respectiva pesquisa seja de qualidade. Porém, esse não é o caso na grande maioria das vezes. Com este livro, irei atacar esse problema, formalizando uma estrutura de código voltada à reprodutibilidade científica, focando em organização e usabilidade. Nesse sentido, espero que as futuras gerações de pesquisadores estejam mais bem preparadas para compartilhar o seu trabalho.\nAntes de prosseguir, um aviso. Não iremos trabalhar usos avançados do R. O conteúdo será limitado a exemplos simples e práticos de utilização do software para a construção de pesquisa baseada em dados financeiros e econômicos. De fato, um dos desafios na escrita deste livro foi definir o limite entre o material introdutório e o avançado. Procurei, sempre que possível, dosar gradualmente o nível de complexidade. Para leitores interessados em conhecer funções avançadas do programa e o seu funcionamento interno, sugiro a leitura do manual oficial do R (teetor2011r?) e de (wickham2019advanced?).\nCom este livro irás aprender os seguinte tópicos:\nEste livro não seria possível sem a devida autonomia do meu cargo de professor universitário. A liberdade de meu cargo acadêmico foi um dos facilitadores de todos meus projetos literários, os quais me dedico com muita paixão. Assim, deixo aqui o meu agradecimento a UFRGS (Universidade Federal do Rio Grande do Sul), por possibilitar e incentivar este empreendimento no mercado literário. Meus dias mais produtivos de trabalhos foram aqueles onde pude escrever meus livros.\nAdicionalmente, não posso também deixar de agradecer a toda a comunidade do R. Em especial, agradeço os autores do pacote {quarto} (Allaire 2023), sem o qual não seria possível compilar este livro de uma forma tão fácil. Adicionalmente, abaixo destaco os respectivos pacotes disponíveis no CRAN utilizados na produção do livro e suas devidas referências. A lista foi gerada automaticamente e está em ordem alfabética.\n{base} (R Core Team 2023a), {dplyr} (Wickham, François, et al. 2023), {forcats} (Wickham 2023a), {fs} (Hester, Wickham, and Csárdi 2023), {ggplot2} (Wickham, Chang, et al. 2023), {glue} (Hester and Bryan 2022), {gt} (Iannone et al. 2023), {knitr} (Xie 2023), {purrr} (Wickham and Henry 2023), {quarto} (Allaire 2023), {readr} (Wickham, Hester, and Bryan 2023), {renv} (Ushey and Wickham 2023), {reticulate} (Ushey, Allaire, and Tang 2023), {rmarkdown} (Allaire et al. 2023), {stats} (R Core Team 2023b), {tibble} (Müller and Wickham 2023), {tidyr} (Wickham, Vaughan, and Girlich 2023), {tidyverse} (Wickham 2023b)"
  },
  {
    "objectID": "index.html#material-suplementar",
    "href": "index.html#material-suplementar",
    "title": "Introdução ao R",
    "section": "Material Suplementar",
    "text": "Material Suplementar\nTodo o material usado no livro, incluindo exemplos de código separados por capítulos, está publicamente disponível na Internet e distribuído com um pacote R denominado adfeR. Este inclui arquivos de dados, código em si, e várias funções que irão facilitar a execução dos exemplos do livro. Se você planeja, como sugerido, escrever código enquanto lê o livro, este pacote ajudará muito em sua jornada.\nPara instalar este pacote no seu computador, basta executar algumas linhas de comando no R. Veja o código destacado a seguir e copie e cole o mesmo no prompt do RStudio (canto inferior esquerdo da tela, com um sinal “&gt;”) e pressione Enter para cada comando. Esteja ciente de que você precisará do R e RStudio instalados em seu computador (consulte a seção @ref(instalacao)).\n\n# install devtools dependency\ninstall.packages('devtools')\n\n# install book package\ndevtools::install_github('msperlin/adfeR')\n\nO que este código fará é instalar o pacote devtools, uma dependência necessária para instalar código do Github – um repositório de pacotes onde o livro está hospedado. Depois disso, uma chamada para install_github('msperlin/adfeR') irá instalar o pacote em seu computador.\nDepois da instalação, todos os arquivos do livro estarão disponíveis localmente, salvos em uma pasta do seu computador. Iremos usar todos estes arquivos futuramente. Opcionalmente, caso quiser olhar os arquivos, podes copiar todo conteúdo para outra pasta com o código a seguir:\n\nadfeR::copy_book_files(path_to_copy = '~')\n\nVeja que o tilda (~) é um atalho para o diretório “Documentos” no Windows (ou “home” no Linux/Mac). Assim, o código anterior descompactará o arquivo do livro na pasta “Documentos/adfeR-files”. O pacote também inclui várias outras funções que serão usadas ao longo do livro. Se você preferir a maneira antiga e consagrada de baixar o arquivo e descompactar manualmente, podes encontrar uma cópia no site do livro1."
  },
  {
    "objectID": "index.html#conteúdo-para-instrutores",
    "href": "index.html#conteúdo-para-instrutores",
    "title": "Introdução ao R",
    "section": "Conteúdo para Instrutores",
    "text": "Conteúdo para Instrutores\nSe você for um instrutor de R, aqui encontrarás muito material para usar em suas aulas:\n\nExercícios estáticos na internet\n\nCada capítulo deste livro inclui exercícios que seus alunos podem praticar. Todas as soluções estão disponíveis na versão online do livro, disponível em https://www.msperlin.com/adfeR/.\n\nExercícios exportáveis para pdf ou plataformas de e-learning\n\nTodos exercícios do livro estão no formato exams (Zeileis et al. 2022) e são exportáveis para arquivos em pdf ou então para plataformas de e-learning tal como o Moodle ou Blackboard. Veja este post no blog2 para maiores detalhes.\n\nAcesso ao livro na internet\n\nNa versão web do livro, o conteúdo integral está liberado até o capítulo 7, o qual é mais que suficiente para um curso introdutório sobre a plataforma.\n\n\nEspero que goste deste livro. O conteúdo tem sido compilado por um longo período de tempo, a base de muito suor e, literalmente, litros de café por parte do autor.\nBoa leitura!\nMarcelo S. Perlin"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Introdução ao R",
    "section": "",
    "text": "https://www.msperlin.com/files/adfer-files/adfeR-code-and-data.zip↩︎\nhttps://www.msperlin.com/post/2021-02-18-dynamic-exercises-adfer/↩︎"
  },
  {
    "objectID": "03-rstudio.html#executando-códigos-em-um-script",
    "href": "03-rstudio.html#executando-códigos-em-um-script",
    "title": "1  Introdução ao RStudio",
    "section": "1.1 Executando Códigos em um Script",
    "text": "1.1 Executando Códigos em um Script\nAgora, vamos juntar todos os códigos digitados anteriormente e colar na tela do editor (lado esquerdo superior), assim como mostrado a seguir:\n\n# set objects\nx &lt;- 1\ny &lt;- 'my text'\n\n# print it\nprint(x)\nprint(1:50)\n\nApós colar todos os comandos no editor, salve o arquivo .R em alguma pasta pessoal. Esse arquivo, o qual no momento não faz nada de especial, registrou os passos de um algoritmo simples que cria dois objetos e mostra os seus valores. Futuramente esse irá ter mais forma, com a importação de dados, manipulação e modelagem dos mesmos e saída de tabelas e figuras.\nNo RStudio existem alguns atalhos predefinidos para executar códigos que economizam bastante tempo. Para executar um script inteiro, basta apertar control + shift + s. Esse é o comando source. Com o RStudio aberto, sugiro testar essa combinação de teclas e verificar como o código digitado anteriormente é executado, mostrando os valores no prompt do R. Visualmente, o resultado deve ser próximo ao apresentado na figura Figure 1.3.\n\n\n\n\n\nFigure 1.3: Exemplo de Rotina no R\n\n\n\n\nOutro comando muito útil é a execução por linha. Nesse caso não é executado todo o arquivo, mas somente a linha em que o cursor do mouse se encontra. Para isto, basta apertar control+enter. Esse atalho é bastante útil no desenvolvimento de rotinas pois permite que cada linha seja testada antes de executar o programa inteiro. Como um exemplo de uso, aponte o cursor para a linha print(x) e pressione control + enter. Verás que o valor de x é mostrado na tela do prompt. A seguir destaco esses e outros atalhos do RStudio, os quais também são muito úteis.\n\ncontrol+shift+s executa o arquivo atual do RStudio, sem mostrar comandos no prompt (sem eco – somente saída);\ncontrol+shift+enter: executa o arquivo atual, mostrando comandos na tela (com eco – código e saída);\ncontrol+enter: executa a linha selecionada, mostrando comandos na tela;\ncontrol+shift+b: executa os códigos do início do arquivo até a linha atual onde o cursor se encontra;\ncontrol+shift+e: executa os códigos da linha onde o cursor se encontra até o final do arquivo.\n\nSugere-se que esses atalhos sejam memorizados e utilizados. Isso facilita bastante o uso do programa. Para aqueles que gostam de utilizar o mouse, uma maneira alternativa para rodar o código do script é apertar o botão source, localizado no canto direito superior do editor de rotinas. Isto é equivalente ao atalho control+shift+s.\nPorém, no mundo real de programação, poucos são os casos em que uma análise de dados é realizada por um script apenas. Como uma forma de organizar o código, pode-se dividir o trabalho em N scripts diferentes, onde um deles é o “mestre”, responsável por rodar os demais.\nNeste caso, para executar os scripts em sequência, basta chamá-los no script mestre com o comando source() , como no código a seguir:\n\n# Import all data\nsource('01-import-data.R')\n\n# Clean up\nsource('02-clean-data.R')\n\n# Build tables\nsource('03-build-table.R')\n\nNesse caso, o código anterior é equivalente a abrirmos e executarmos (control + shift + s) cada um dos scripts sequencialmente.\nComo podemos ver, existem diversas maneiras de executar uma rotina de pesquisa. Na prática, porém, iras centralizar o uso em dois comandos apenas: control+shift+s para rodar o script inteiro e control+enter para rodar por linha."
  },
  {
    "objectID": "03-rstudio.html#tipos-de-arquivos",
    "href": "03-rstudio.html#tipos-de-arquivos",
    "title": "1  Introdução ao RStudio",
    "section": "1.2 Tipos de Arquivos",
    "text": "1.2 Tipos de Arquivos\nAssim como outros programas, o R e o RStudio possuem um ecossistema de arquivos e cada extensão tem uma finalidade diferente. A seguir apresenta-se uma descrição de diversas extensões de arquivos exclusivos ao R e RStudio. Os itens da lista estão ordenados por ordem de importância e uso.\nArquivos com extensão .R: Representam arquivos do tipo texto contendo diversas instruções para o R. Esses são os arquivos que conterão o código da pesquisa e onde passaremos a maior parte do tempo. Também pode ser chamado de um script ou rotina de pesquisa. Como sugestão, pode-se dividir toda uma pesquisa em etapas e arquivos numerados. Exemplos: 01-Get-Data.R, 02-Clean-data.R, 03-Estimate-Models.R.\nArquivos com extensão .RData e .rds: armazenam dados nativos do R. Esses arquivos servem para salvar (ou congelar) objetos do R em um arquivo no disco rígido do computador para, em sessão futura, serem novamente carregados. Por exemplo, podes guardar o resultado de uma pesquisa em uma tabela, a qual é salva em um arquivo com extensão .RData ou .rds. Exemplos: Raw-Data.RData, Table-Results.rds.\nArquivos com extensão .Rmd, .Rnw e .qmd: São arquivos relacionados a tecnologia Rmarkdown e Quarto. O uso desses arquivos permite a criação de documentos onde texto e código são integrados.\nArquivos com extensão .Rproj: Contém informações para a edição de projetos no RStudio. O sistema de projetos do RStudio permite a configuração customizada do projeto e também facilita a utilização de ferramentas de controle de código, tal como controle de versões. O seu uso, porém, não é essencial. Para aqueles com interesse em conhecer esta funcionalidade, sugiro a leitura do manual do RStudio. Uma maneira simples de entender os tipos de projetos disponíveis é, no RStudio, clicar em “File”, “New project”, “New Folder” e assim deve aparecer uma tela com todos os tipos possíveis de projetos no RStudio. Exemplo: My-Dissertation-Project.Rproj."
  },
  {
    "objectID": "03-rstudio.html#testando-código",
    "href": "03-rstudio.html#testando-código",
    "title": "1  Introdução ao RStudio",
    "section": "1.3 Testando Código",
    "text": "1.3 Testando Código\nO desenvolvimento de códigos em R segue um conjunto de etapas. Primeiro você escreverá uma nova linha de comando em uma rotina. Essa linha será testada com o atalho control + enter, verificando-se a ocorrência de erros e as saídas na tela. Caso não houver erro e o resultado for igual ao esperado, parte-se para a próxima linha de código.\nUm ciclo de trabalho fica claro, a escrita do código da linha atual é seguida pela execução, seguido da verificação de resultados, modificação caso necessário e assim por diante. Esse é um processo normal e esperado. Dado que uma rotina é lida e executada de cima para baixo, você precisa ter certeza de que cada linha de código está corretamente especificada antes de passar para a próxima.\nQuando você está tentando encontrar um erro em um script preexistente, o R oferece algumas ferramentas para controlar e avaliar sua execução. Isso é especialmente útil quando você possui um código longo e complicado. A ferramenta de teste mais simples e fácil de utilizar que o RStudio oferece é o ponto de interrupção do código. No RStudio, você pode clicar no lado esquerdo do editor e aparecerá um círculo vermelho, como na Figura Figure 1.4.\n\n\n\n\n\nFigure 1.4: Exemplo de debug\n\n\n\n\nO círculo vermelho indica um ponto de interrupção do código que forçará o R a pausar a execução nessa linha. Quando a execução atinge o ponto de interrupção, o prompt mudará para browser[1]&gt; e você poderá verificar o conteúdo dos objetos. No console, você tem a opção de continuar a execução para o próximo ponto de interrupção ou interrompê-la. O mesmo resultado pode ser alcançado usando a função browser() . Dê uma olhada:\n\n# set x\nx &lt;- 1\n\n# set y\nbrowser()\ny &lt;- 'My humble text'\n\n# print contents of x\nprint(x)\n\nO resultado prático do código anterior é o mesmo que utilizar o círculo vermelho do RStudio, figura Figure 1.4. Porém, o uso do browser() permite mais controle sobre onde a execução deve ser pausada. Como um teste, copie e cole o código anterior no RStudio, salve em um novo script e execute com Control + Shift + S. Para sair do ambiente de depuramento (debug), aperte enter no prompt do RStudio."
  },
  {
    "objectID": "03-rstudio.html#cancelando-a-execução-de-um-código",
    "href": "03-rstudio.html#cancelando-a-execução-de-um-código",
    "title": "1  Introdução ao RStudio",
    "section": "1.4 Cancelando a Execução de um Código",
    "text": "1.4 Cancelando a Execução de um Código\nToda vez que o R estiver executando algum código, uma sinalização visual no formato de um pequeno círculo vermelho no canto direito do prompt irá aparecer. Caso conseguir ler (o símbolo é pequeno em monitores modernos), o texto indica o termo stop. Esse símbolo não somente indica que o programa ainda está rodando mas também pode ser utilizado para cancelar a execução de um código. Para isso, basta clicar no referido botão. Outra maneira de cancelar uma execução é apontar o mouse no prompt e pressionar a tecla Esc no teclado.\nPara testar o cancelamento de código, copie e cole o código a seguir em um script do RStudio. Após salvar, rode o mesmo com control+shift+s.\n\nfor (i in 1:100) {\n  message('\\nRunning code (please make it stop by hitting esc!)')\n  Sys.sleep(1)\n}\n\nO código anterior usa um comando especial do tipo for para mostrar a mensagem a cada segundo. Neste caso, o código demorará 100 segundos para rodar. Caso não desejes esperar, aperte esc para cancelar a execução. Por enquanto, não se preocupe com as funções utilizadas no exemplo. Iremos discutir o uso do comando for no capítulo ?sec-programacao."
  },
  {
    "objectID": "03-rstudio.html#procurando-ajuda",
    "href": "03-rstudio.html#procurando-ajuda",
    "title": "1  Introdução ao RStudio",
    "section": "1.5 Procurando Ajuda",
    "text": "1.5 Procurando Ajuda\nUma tarefa muito comum no uso do R é procurar ajuda. A quantidade de funções disponíveis para o R é gigantesca e memorizar todas peculariedades é quase impossível. Assim, até mesmo usuários avançados comumente procuram ajuda sobre tarefas específicas no programa, seja para entender detalhes sobre algumas funções ou estudar um novo procedimento.\nÉ possível buscar ajuda utilizando tanto o painel de help do RStudio como diretamente do prompt. Para isso, basta digitar o ponto de interrogação junto ao objeto sobre o qual se deseja ajuda, tal como em ?mean. Nesse caso, o objeto mean é uma função e o uso do comando irá abrir o painel de ajuda sobre ela.\nNo R, toda tela de ajuda de uma função é igual, conforme se vê na ?fig-help apresentada a seguir. Esta mostra uma descrição da função mean, seus argumentos de entrada explicados e também o seu objeto de saída. A tela de ajuda segue com referências e sugestões para outras funções relacionadas. Mais importante, os exemplos de uso da função aparecem por último e podem ser copiados e colados para acelerar o aprendizado no uso da função.\n\n\n\n\n\nUsando o sistema de ajuda do RStudio\n\n\n\n\nCaso quiséssemos procurar um termo nos arquivos de ajuda, bastaria utilizar o comando ??\"standard deviation\". Essa operação irá procurar a ocorrência do termo em todos os pacotes do R e é muito útil para aprender como realizar alguma operação, nesse caso o cálculo de desvio padrão.\nComo sugestão, o ponto inicial e mais direto para aprender uma nova função é observando o seu exemplo de uso, localizada no final da página de ajuda. Com isto, podes verificar quais tipos de objetos de entrada a mesma aceita e qual o formato e o tipo de objeto na sua saída. Após isso, leia atentamente a tela de ajuda para entender se a mesma faz exatamente o que esperas e quais são as suas opções de uso nas respectivas entradas. Caso a função realizar o procedimento desejado, podes copiar e colar o exemplo de uso para o teu próprio script, ajustando onde for necessário.\nOutra fonte muito importante de ajuda é a própria internet. Sites como stackoverflow.com e mailing lists específicos do R, cujo conteúdo também está na internet, são fontes preciosas de informação. Havendo alguma dúvida que não foi possível solucionar via leitura dos arquivos de ajuda do R, vale o esforço de procurar uma solução via mecanismo de busca na internet. Em muitas situações, o seu problema, por mais específico que seja, já ocorreu e já foi solucionado por outros usuários.\nCaso estiver recebendo uma mensagem de erro enigmática, outra dica é copiar e colar a mesma para uma pesquisa no Google. Aqui apresenta-se outro benefício do uso da língua inglesa. É mais provável que encontres a solução se o erro for escrito em inglês, dado o maior número de usuários na comunidade global. Caso não encontrar uma solução desta forma, podes inserir uma pergunta no stackoverflow ou no grupo Brasileiro do R no Facebook.\n\n\n\n\n\n\nCuidado\n\n\n\nToda vez que for pedir ajuda na internet, procure sempre 1) descrever claramente o seu problema e 2) adicionar um código reproduzível do seu problema. Assim, o leitor pode facilmente verificar o que está acontecendo ao rodar o exemplo no seu computador. Não tenho dúvida que, se respeitar ambas regras, logo uma pessoa caridosa lhe ajudará com o seu problema."
  },
  {
    "objectID": "03-rstudio.html#utilizando-code-completion-com-a-tecla-tab",
    "href": "03-rstudio.html#utilizando-code-completion-com-a-tecla-tab",
    "title": "1  Introdução ao RStudio",
    "section": "1.6 Utilizando Code Completion com a Tecla tab",
    "text": "1.6 Utilizando Code Completion com a Tecla tab\nUm dos recursos mais úteis do RStudio é o preenchimento automático de código (code completion). Essa é uma ferramenta de edição que facilita o encontro de nomes de objetos, nome de pacotes, nome de arquivos e nomes de entradas em funções. O seu uso é muito simples. Após digitar um texto qualquer, basta apertar a tecla tab e uma série de opções aparecerá. Veja a Figura @ref(fig:autocomplete) apresentada a seguir, em que, após digitar a letra f e apertar tab, aparece uma janela com uma lista de objetos que iniciam com a respectiva letra. Figura ?fig-autocomplete-objetos\n\n\n\n\n\nUsando o sistema de ajuda do RStudio\n\n\n\n\nEssa ferramenta também funciona para pacotes. Para verificar, digite library(r) no prompt ou no editor, coloque o cursor entre os parênteses e aperte tab. O resultado deve ser algo parecido com a ?fig-autocomplete-pacotes.\n\n\n\n\n\nUsando o autocomplete para procurar pacotes\n\n\n\n\nObserve que uma descrição do pacote ou objeto também é oferecida. Isso facilita bastante o dia a dia, pois a memorização das funcionalidades e dos nomes dos pacotes e os objetos do R não é uma tarefa fácil. O uso do tab diminui o tempo de investigação dos nomes e evita possíveis erros de digitação na definição destes.\nO uso dessa ferramenta torna-se ainda mais benéfico quando os objetos são nomeados com algum tipo de padrão. No restante do livro observarás que os objetos tendem a ser nomeados com o prefixo my, como em my_x, my_num, my_char. O uso desse padrão facilita o encontro futuro do nome dos objetos, pois basta digitar my, apertar tab e uma lista de todos os objetos criados pelo usuário aparecerá.\nOutro uso do tab é no encontro de arquivos e pastas no computador. Basta criar uma variável como my_file &lt;- \" \", apontar o cursor para o meio das aspas e apertar a tecla tab. Uma tela com os arquivos e pastas do diretório atual de trabalho aparecerá, conforme mostrado na ?fig-autocomplete-dir. Nesse caso específico, o R estava direcionado para a minha pasta de códigos, em que é possível enxergar diversos trabalhos realizados no passado.\n\n\n\n\n\nUsando o autocomplete para navegar diretórios\n\n\n\n\nUma dica aqui é utilizar o tab com a raiz do computador. Assumindo que o disco do seu computador está alocado para C:/, digite my_file &lt;- \"C:/\" e pressione tab após o símbolo /. Uma tela com os arquivos da raiz do computador aparecerá no RStudio. Podes facilmente navegar o sistema de arquivos utilizando as setas e enter.\nO autocomplete também funciona para encontrar e definir as entradas de uma função. Veja um exemplo na ?fig-autocomplete-args.\n\n\n\n\n\nUsando o autocomplete para navegar argumentos de funções\n\n\n\n\n\n\n\n\n\n\nImportante\n\n\n\nO autocomplete é uma das ferramentas mais importantes do RStudio, funcionando para encontro de objetos, locais no disco rígido, pacotes e funções. Acostume-se a utilizar a tecla tab o quanto antes e logo verá como fica mais fácil escrever código rapidamente, e sem erros de digitação."
  },
  {
    "objectID": "99-references.html",
    "href": "99-references.html",
    "title": "Referências Bibliográficas",
    "section": "",
    "text": "Allaire, JJ. 2023. Quarto: R Interface to Quarto Markdown Publishing\nSystem. https://github.com/quarto-dev/quarto-r.\n\n\nAllaire, JJ, Yihui Xie, Christophe Dervieux, Jonathan McPherson, Javier\nLuraschi, Kevin Ushey, Aron Atkins, et al. 2023. Rmarkdown: Dynamic\nDocuments for r. https://github.com/rstudio/rmarkdown.\n\n\nHester, Jim, and Jennifer Bryan. 2022. Glue: Interpreted String\nLiterals. https://github.com/tidyverse/glue.\n\n\nHester, Jim, Hadley Wickham, and Gábor Csárdi. 2023. Fs:\nCross-Platform File System Operations Based on Libuv. https://fs.r-lib.org.\n\n\nIannone, Richard, Joe Cheng, Barret Schloerke, Ellis Hughes, Alexandra\nLauer, and JooYoung Seo. 2023. Gt: Easily Create Presentation-Ready\nDisplay Tables. https://gt.rstudio.com.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data\nFrames. https://tibble.tidyverse.org/.\n\n\nR Core Team. 2023b. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\n———. 2023a. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nUshey, Kevin, JJ Allaire, and Yuan Tang. 2023. Reticulate: Interface\nto Python. https://rstudio.github.io/reticulate/.\n\n\nUshey, Kevin, and Hadley Wickham. 2023. Renv: Project\nEnvironments. https://rstudio.github.io/renv/.\n\n\nWickham, Hadley. 2023a. Forcats: Tools for Working with Categorical\nVariables (Factors). https://forcats.tidyverse.org/.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse.\nhttps://tidyverse.tidyverse.org.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen,\nKohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey\nDunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using\nthe Grammar of Graphics. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis\nVaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://dplyr.tidyverse.org.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional\nProgramming Tools. https://purrr.tidyverse.org/.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read\nRectangular Text Data. https://readr.tidyverse.org.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr:\nTidy Messy Data. https://tidyr.tidyverse.org.\n\n\nXie, Yihui. 2023. Knitr: A General-Purpose Package for Dynamic\nReport Generation in r. https://yihui.org/knitr/.\n\n\nZeileis, Achim, Bettina Gruen, Friedrich Leisch, and Nikolaus Umlauf.\n2022. Exams: Automatic Generation of Exams in r. https://www.R-exams.org/."
  }
]