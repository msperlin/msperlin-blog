[{"path":"index.html","id":"welcome","chapter":"Welcome!","heading":"Welcome!","text":"\nWelcome book site Analyzing Financial Economic Data R, second edition. find full content book first seven chapters, well end--chapter exercises.\nbook available purchase Amazon ebook, paperback hardcover. can find free content, including data files exercise solutions link. online version also available download pdf ebook1 file.liked material using book, please consider purchasing leaving feedback Amazon. oppinion important promoting book help others learn R RStudio. author, certainly appreciate gesture take motivating factor future editions.","code":""},{"path":"index.html","id":"license","chapter":"Welcome!","heading":"License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. code book, including exercises, shared MIT license. means can use freely work make sure cite original source. suggested citation :Perlin, M. S. Analizing Financial Economic Data R. Second Edition, Porto Alegre: Marcelo S. Perlin (independent publication), 2021.","code":""},{"path":"index.html","id":"about-the-author","chapter":"Welcome!","heading":"About the Author","text":"’m associate professor post-graduate program Universidade Federal Rio Grande Sul (UFRGS), south Brazil. ’m also developer several popular CRAN packages BatchGetSymbols. details academic work can found personal site.","code":""},{"path":"index.html","id":"books-from-the-author","chapter":"Welcome!","heading":"Books from the Author","text":"Poupando e Investindo em Renda Fixa: Written portuguese, book investing fixed income instruments Brazil, including bank products, fixed income funds sovereign debt (Tesouro Direto).Poupando e Investindo em Renda Fixa: Written portuguese, book investing fixed income instruments Brazil, including bank products, fixed income funds sovereign debt (Tesouro Direto).Análise de Dados Financeiro e Econômico com o R: Portuguese version R book, available web.Análise de Dados Financeiro e Econômico com o R: Portuguese version R book, available web.","code":""},{"path":"about-new-edition.html","id":"about-new-edition","chapter":"About New Edition","heading":"About New Edition","text":"Since first edition book 2017, many things changed. second edition book complements extends previous material, considering new ways use Rstudio, new R packages written others, well feedback first edition.However, format book changed significantly. order chapters now aligned steps data-based research, importing tables, cleaning , testing hypotheses presenting results. Thus, reader can follow chapters according work. Another important change alignment tidyverse tools – set packages greatly facilitate use R –, especially data importation manipulation. native R functions presented necessary, tidyverse counterpart exist.Three new chapters added book, including dedicated piece process reporting research output use RMarkdown technology. final chapter now discusses code optimization presenting best code practices simple strategies improve work efficiency.R teachers world, future editions book include class material end--chapter exercises solutions. teaching material publicly available internet2 released generous MIT license3. , R tutor finance economics, feel free use modify teaching material liking. However, , please make sure cite original source.hope enjoy reading book , based content, can find ways improve data analysis. feedback always important can reach marceloperlin@gmail.com. book special lifelong project keep improving much can years.","code":""},{"path":"about-new-edition.html","id":"revision-2021","chapter":"About New Edition","heading":"Revision 2021","text":"book revised march 2021, following changes:Improved consistent css template html ebook.100 end chapter exercises. exercises within book exams (Zeileis et al. 2022) format can compiled pdf html. Check blog post details.help reader topics don’t quite fit main text, new text boxes important cautionary messages implemented formats.New hardcover format available Amazon.changes fully reflected Amazon.com. previously purchase second edition ebook new copy delivered kindle account.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Since reading book, likely data analyst looking alternative efficient ways add value organization, undergraduate graduate student first steps learning data science, experienced researcher, looking new tools use work. assured right place. book teach use R RStudio data analysis finance economics.material book started class slides work university teacher researcher south Brazil. observing students learning using R classroom, frequently see positive impact careers. can autonomously complex data tasks computers, providing better comprehensive analysis help decision-making process organizations. spend less time repetitive soul-crushing spreadsheet data chores time thinking analysis learning new tools. book attempts go beyond classroom reach international diversified audience.Another motivation writing book personal experience using code researchers. Usually, code well-organized, lacks clarity, , possibly, works computer author! constantly frustrated, realized work required figure code researchers take time writing procedure . cases hurt development science, one basic principles reproducibility experiments. case computer-intensive field, empirical finance economics, underlying research code run without effort people’s computers. researchers expected good writers, also expected code proper format readable people. book, tackle problem presenting code structure focused scientific reproducibility, organization, usability.book, work advanced uses R. content limited simple practical examples. One challenge writing book defining boundary introductory advanced material. Wherever possible, gradually dosed level complexity. readers interested learning advanced features program inner workings, suggest work Venables et al. (2004), Teetor (2011) Wickham (2019).’ll learn book:Using R RStudio\nchapter 01 discuss use R programming platform designed solve data-related problems finance economics. chapter 02 explore basic commands many functionalities R RStudio increase productivity.\nImporting financial economic data\nchapters 04 05 learn import data local files, Excel spreadsheet, internet, using specialized packages can download financial economic data stock prices, economic indices, US yield curve, corporate financial statements, many others.\nCleaning, structuring analyzing data R\nchapters 06 07 concentrate study ecosystem basic advanced classes objects within R. learn manipulate objects numeric vectors, dates whole tables. chapters 08 09 ’ll study use programming tools solve data-related problems cleaning structuring messy data. chapter 11 learn applications common econometric models used finance economics including linear regression, generalized linear model, Arima model others.\nCreating visual analysis data\nchapter 10 ’ll learn use functions package ggplot2 create clever visualizations datasets, including popular applications finance economics, time series statistical plots.\nReporting results\nchapter 12 see report data analysis using specialized packages RMarkdown technology. includes topic presenting exporting tables, figures models written report.\nWriting better faster code\nlast chapter book discuss best programming practices R. look profile code search bottlenecks improving execution time caching strategies using package memoize, C++ code Rcpp parallel computing furrr.\n","code":""},{"path":"preface.html","id":"supplement-material","chapter":"Preface","heading":"Supplement Material","text":"material used book, including code examples separated chapters, publicly available Internet distributed R package called afedR. includes data files several functions can make easier run examples book. plan write code read book, package greatly help journey.order install book package computer, need execute couple lines code R. , copy paste following commands RStudio prompt (bottom left screen, “>” sign) press enter command. aware ’ll need R RStudio installed computer (see section 1.4 details).code install package devtools, required dependency installing package Github, book bundle hosted. , call devtools::install_github('msperlin/afedR') install package computer. can safely ignore warning messages instalation.installing book package afedR, can, necessary, copy book files local folder simply executing following command R:previous code unzip book file “Documents/afedR-files” folder, tilda (~) shortcut “Documents” directory. package also includes several functions used throughout book. prefer old-fashioned way using internet page, can find download zip file book site4.suggestion, read rest book: go book website search related links page bottom. find internet addresses highlighted text, including links installation R RStudio.","code":"\n# install devtools dependency\ninstall.packages('devtools')\n\n# install book package\ndevtools::install_github('msperlin/afedR')\nafedR::copy_book_files(path_to_copy = '~')"},{"path":"preface.html","id":"content-for-instructors","chapter":"Preface","heading":"Content for Instructors","text":"R instructor, ’ll find plenty material can use classes. made sure get everything need:100 exercises\nEvery chapter book includes exercises students can practice, solutions available web version book. Also, exercises available exams format (see webpage details), meaning can compile exercises pdf html. Moreover, can export exercises e-learning platforms Moodle Blackboard. See blog post5 instructions use students.\nWeb version\nfirst seven chapters book freely available link https://www.msperlin.com/afedR, enough material introductory class R data analysis.\ncontent released MIT license, feel free use abuse , long give credits original author. can find content within book package afedR (see previous instructions installation) directly book site6.hope enjoy book find useful work.Good reading!Marcelo S. Perlin","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"digital era, information abundant accessible. ever-changing price financial contracts unstructured data social media websites, high volume information creates strong need data analysis workplace. company organization benefit immensely can create bridge raw information environment making strategic decisions. Undoubtedly, prolific time professionals skilled using right tools acquiring, storing, analyzing data.particular, datasets related Economics Finance widely available public. International local institutions, central banks, government research agencies, financial exchanges, many others, provide data publicly, either legal obligation foment research. Whether looking statistics particular country company, information just two clicks away. analyzing information efficiently effortlessly, ’ll able offer valuable insights team.surprisingly, fields abundant access data practical applications, economics finance, expected graduate student data analyst learned least one programming language allows /work efficiently. Learning program becoming requisite job market. setup, role contribution R shine. sections, explain R use .","code":""},{"path":"introduction.html","id":"what-is-r","chapter":"1 Introduction","heading":"1.1 What is R","text":"R programming language specially designed resolve statistical problems display graphical representations data. R modern version S, programming language originally created Bell Laboratories (formerly &T, now Lucent Technologies). base code R developed two academics, Ross Ihaka Robert Gentleman, resulting programming platform today. anyone curious name, letter R chosen due common first letter name creators. Today, R almost synonymous data analysis, large user base consolidated modules. likely researchers various fields, economics biology, find R significant preexisting code facilitates analysis.business side, large established companies, Google Microsoft, already adopted R internal language data analysis. R maintained R Foundation7 R Consortium8, collective effort fund projects extending programming language. ","code":""},{"path":"introduction.html","id":"why-choose-r","chapter":"1 Introduction","heading":"1.2 Why Choose R","text":"Learning new programming language requires lot time effort. Perhaps ’re wondering choose R invest time learning . main arguments.First, R mature stable platform, continuously supported intensively used industry. choosing R, computational background academic career scientific research also work data analyst private organizations. Due open license, can use R anywhere. Also, strong support community means unlikely R platform ever fade away substituted. Depending career choices, R might programming language ever need learn.Learning R easy. experience teaching R allows confidently state students, even programming experience, problem learning language using create code. language intuitive certain rules functions can extended different cases. example, function print used show contents object screen. can use kind object. , learning main concept, ’ll able apply different scenarios. understand software expects think, easy discover new features starting previous logic. generic notation facilitates learning process.engine R interface RStudio creates highly productive environment. graphical interface provided RStudio facilitates use R increases productivity introducing new features platform. combining , user disposal many tools facilitate development research scripts projects. CRAN Packages allow user many different things R. soon learn can import external code directly R individual modules (packages) use different purposes. packages extend basic language R enable diverse functionalities. can, example, use R write publish book, build publish blog, create exams dynamic content, write random jokes poems (seriously!), send emails, access collect data internet, many features. truly impressive can just couple lines code R.R compatible different operating systems can interface different programming languages. need execute code another programming language, C++, Python, Julia, easy integrate R. Therefore, user restricted single programming language can easily use features functions others. example, C++ code well known superior speed numerical tasks. R script, can use package Rcpp (Eddelbuettel et al. 2022) write C++ function effortlessly use within R code. R free! main software packages free. generous license motivates adoption R language business environment, obtaining individual collective licenses commercial software can costly. means can take R anywhere go.","code":""},{"path":"introduction.html","id":"what-can-you-do-with-r-and-rstudio","chapter":"1 Introduction","heading":"1.3 What Can You Do With R and RStudio?","text":"R fairly complete programming language computational problem can solved based . Given adoption R different areas knowledge, list extensive. finance economics, can highlight following possibilities:Substitute improve data-intensive tasks spreadsheet-like software;Substitute improve data-intensive tasks spreadsheet-like software;Develop routines managing investment portfolios executing financial orders;Develop routines managing investment portfolios executing financial orders;Creating tools calculating reporting economic indices inflation unemployment;Creating tools calculating reporting economic indices inflation unemployment;Performing empirical data research using statistical techniques, econometric models hypothesis testing;Performing empirical data research using statistical techniques, econometric models hypothesis testing;Create dynamic websites shiny (Chang et al. 2021) package, allowing anyone world use computational tool created ; Create dynamic websites shiny (Chang et al. 2021) package, allowing anyone world use computational tool created ; Automate process writing technical reports RMarkdown technology; Automate process writing technical reports RMarkdown technology; Moreover, public access packages developed users expands capabilities. CRAN views website9 offers Task Views panel topic Finance10 Econometrics11. can find main packages perform specific operations importing financial data internet, estimating econometric models, calculation different risk estimates, among many possibilities. Reading page knowledge packages essential intend work Finance Economics. worth noting, however, complete list packages much larger.\naware R consistent release schedule. Every four months\nnew version R released, fixing bugs implementing\nnew solutions. two main types releases, major \nminor. example, today, 2021-02-24, latest version R\n4.0.4. first digit (“4”) indicates major release\nothers minor type. Generally, \nminor changes specific , possibly, little\nimpact work.\n\nHowever, unlike minor releases, major\nreleases fully reflected R package ecosystem. Every\ntime install new major version R, \nreinstall packages. Particularly, problem \nuncommon new major release comes package incompatibility\nissues. advice : every time new major release R comes\n, wait months installing \nmachine. Thus, authors packages time update\ncodes, minimizing possibility compatibility problems.\n","code":""},{"path":"introduction.html","id":"installing","chapter":"1 Introduction","heading":"1.4 Installing R","text":"going , let’s install required software computer. direct practical way install R direct browser R website12 click Download link left side page, shown Figure 1.1.\nFigure 1.1: Initial page downloading R\nnext screen gives choice mirror download installation files. CRAN repository (R Comprehensive Archive network) mirrored various parts world. can choose one links nearest location . undecided, just select mirror 0-Cloud (see Figure 1.2), automatically take nearest location.\nFigure 1.2: Choosing CRAN mirror\nnext step involves selecting operating system, likely Windows. now , due greater popularity platform, focus installing R Windows. instructions installing R operating systems can easily found online. Regardless underlying platform, using R . exceptions, especially R interacts file system. content book, special care taken choose functions work way different operating systems. exceptions highlighted throughout book. , even using Mac flavor Linux, can take full advantage material presented .\nFigure 1.3: Choosing operating system\nclicking link Download R Windows, Figure 1.3, next screen show following download options: base, contrib, old.contrib RTools. first (base), selected. contains download link executable installation file R Windows.user interested creating distributing R packages, RTools also installed. users, however, case. don’t intend write packages, can safely ignore Rtools now. links contrib old.contrib relate files current old releases R packages can also ignored. discuss use packages next chapter.\nFigure 1.4: Installation options\nclicking link base, next screen show link download R installation file (Figure 1.5). downloading file, open follow steps installation screen. time, special configuration required. suggest keeping default choices simply hit accept displayed dialogue screens. installation R, strongly recommended install RStudio, addressed next.\nFigure 1.5: Downloading R\n","code":""},{"path":"introduction.html","id":"installing-rstudio","chapter":"1 Introduction","heading":"1.5 Installing RStudio","text":"base installation R includes GUI (graphical user interface), can write execute code. However, native interface several limitations. RStudio substitutes original GUI makes access R practical efficient. One way understand relationship analogy cars. R engine programming language, RStudio body instrument panel, significantly improves user experience. Besides presenting attractive look, RStudio also adds several features make life programmer easier, allowing creation projects packages, creation dynamic documents, among others. installation RStudio simpler R. files available RStudio website13. accessing page, click Download RStudio Download RStudio Desktop. , just select installation file relative operating system work. option probably WINDOWS Vista 7/8/10. Note , well R, RStudio also available alternative platforms.emphasize using RStudio essential develop programs R. interfaces available can used. However, experience, RStudio interface offers vast range features language widely used, justifies choice.","code":""},{"path":"introduction.html","id":"resources-in-the-web","chapter":"1 Introduction","heading":"1.6 Resources in the Web","text":"R community vivid engaging. many authors, myself14, constantly release material R blogs. includes announcement new packages, posts data analysis real life, curiosities, rants, tutorials. R-Bloggers15 website aggregates blogs, making easier anyone access participate. strongly recommend sign R-Bloggers feed RSS16, Facebook17 Twitter18. ’ll informed happening R community, also learn lot reading people’s code articles. Learning using R can social experience. Several conferences user-groups available many countries. can find complete list link19. also suggest looking social platforms local R groups region.","code":""},{"path":"introduction.html","id":"structure-and-organization","chapter":"1 Introduction","heading":"1.7 Structure and Organization","text":"book presents practical approach using R finance economics. get book, suggest first seek understand code shown, , try using computer. Whenever find piece code understand, go study . first, might seem like daunting task , time, confident learning process get lot easier code blocks start make sense.Learning program new platform like learning foreign spoken language: use day--day problems imperative create fluency. code data used book available installation package afedR (see preface instructions install ). suggest test code computer play , modifying examples checking effect changes outputs. Whenever computational problem, try using R solve . ’ll stumble make mistakes first. guarantee , soon enough, ’ll able write complex data tasks effortlessly.Throughout book, every demonstration code two parts: R code output. output nothing result commands screen. inputs outputs code marked text special format. See following example:previous chunk code, lines L <- list('abc', 1:5, 'dec') print(L) actual commands given R. output simple piece code -screen presentation contents object L. symbol R> used code output. Notice also inline comments set symbol #. Anything right side # evaluated R. comments serve written notes code.code can also spatially organized using newlines. common strategy around arguments functions. next chunk code equivalent previous run exact way. Notice used new line vertically align arguments function list. ’ll soon see , throughout book, type vertical alignment constantly used.code also follows well-defined structure. One decision writing computer code name objects structure . recommended follow clear pattern, easy maintain time used understood others. book, mixture author’s personal choices coding style suggested Google20 used. reader, however, may choose structure finds efficient aesthetically pleasing. Like many things life, choice. get back discussing code structure chapter 13.","code":"\n# create a list\nL <- list('abc', 1:5, 'dec')\n\n# print list\nprint(L)R> [[1]]\nR> [1] \"abc\"\nR> \nR> [[2]]\nR> [1] 1 2 3 4 5\nR> \nR> [[3]]\nR> [1] \"dec\"\n# create a list\nL <- list('abc', \n          1:5, \n          'dec')\n\n# print list\nprint(L)R> [[1]]\nR> [1] \"abc\"\nR> \nR> [[2]]\nR> [1] 1 2 3 4 5\nR> \nR> [[3]]\nR> [1] \"dec\""},{"path":"introduction.html","id":"exercises","chapter":"1 Introduction","heading":"1.8 Exercises","text":"","code":""},{"path":"introduction.html","id":"q.1","chapter":"1 Introduction","heading":"Q.1","text":"R language developed based programming language?\n\nSolution\n\n","code":""},{"path":"introduction.html","id":"q.2","chapter":"1 Introduction","heading":"Q.2","text":"names two authors R?\n\nSolution\n\nStraight book: “… base code R developed two academics, Ross Ihaka Robert Gentleman, resulting programming platform today.”.","code":""},{"path":"introduction.html","id":"q.3","chapter":"1 Introduction","heading":"Q.3","text":"R special comparing programming languages, Python, C++, javascript others?\n\nSolution\n\n","code":""},{"path":"introduction.html","id":"q.4","chapter":"1 Introduction","heading":"Q.4","text":"reason programming language named R?\n\nSolution\n\n","code":""},{"path":"introduction.html","id":"q.5","chapter":"1 Introduction","heading":"Q.5","text":"Consider following alternatives R RStudio:- R mature stable programming platform;II - RStudio modern interface R, increasing productivity;III - R compatible different programming languages;alternatives correct?\n\nSolution\n\n","code":""},{"path":"introduction.html","id":"q.6","chapter":"1 Introduction","heading":"Q.6","text":"R RStudio installed, head CRAN package website21 look technologies use work. example, use Google Sheets22 ostensibly work, soon discover package CRAN interacts spreadsheets cloud.\n\nSolution\n\nBrowse CRAN package websiteSearch technologies use work (Excel, Word, Google Docs, …)","code":""},{"path":"introduction.html","id":"q.7","chapter":"1 Introduction","heading":"Q.7","text":"CRAN site can also install Rtools application. ?\n\nSolution\n\nRtools extension particular R Windows. used compile packages source code requirement develop packages. average user, however, also recommended install Rtools packages require compilation.Linux/Unix MacOS users, Rtools necessary , generally, compilers already available operating system .","code":""},{"path":"introduction.html","id":"q.8","chapter":"1 Introduction","heading":"Q.8","text":"Use Google search R groups region. Check meetings frequent , don’t major impediment, go one meetings make new friends.\n\nSolution\n\nuncommon programmers tendency introversion. certainly case beginning career. , know shyness non-permanent state, defense mechanism created threats don’t really exist! way improve sport rate often practice , comunicative ’ll become simply speaking .sad () reality timid communication fundamental part adult life way maintain professional network. people know work personality, better. Perhaps person met one groups can refer job vacancy future project. , resuming, really lose going one meetings?","code":""},{"path":"introduction.html","id":"q.9","chapter":"1 Introduction","heading":"Q.9","text":"Go RBloggers website23 look topic interest , football (soccer) investments (investments). Read least three found blog posts.\n\nSolution\n\nparticularly passionate sport tennis. RBloggers website ’ve found following articles mixing R tennis:Using R study evolution TennisVisualizing Tennis Grand Slam Winners PerformancesTennis Grand Slam Tournaments Champions Basic Analysis","code":""},{"path":"introduction.html","id":"q.10","chapter":"1 Introduction","heading":"Q.10","text":"work institution data infrastructure, talk person charge department verify technologies used. Check , R, possible access tables databases. now need write code, yet. Just check possibility exists.\n\nSolution\n\nuniversity access different paid repositories financial data. Unfortunately, none offers type API communicating R. fact, one motivators writing R packages free access financial data.","code":""},{"path":"basicoperations.html","id":"basicoperations","chapter":"2 Basic Operations in R","heading":"2 Basic Operations in R","text":"Basic operation fundamental tasks repeating many times workday. , important understand work R RStudio efficiently develop data analysis. includes understanding RStudio interface, basic R commands, file extensions, available shortcuts autocomplete feature RStudio.section, go initial steps viewpoint someone never worked R possibly never contact programming languages. already familiar software may find novel information , therefore, suggest skipping next section. However, recommended, least check discussed topics can confirm knowledge features software use working smarter harder. especially true RStudio, offers several tools increase productivity.","code":""},{"path":"basicoperations.html","id":"working-with-r","chapter":"2 Basic Operations in R","heading":"2.1 Working With R","text":"greatest difficulty new user experiences developing routines R format work – -called development cycle. interaction computers simplified years currently comfortable point&click format. , want perform operation computer, just point mouse specific location screen click button. Visual cues series steps allow execution complex tasks. , need aware form interaction just one layer actually happens. Behind clicks, command executed computer. common task opening pdf file, spreadsheet document, directing browser web page underlying call code.“point&click” format visual motor interaction benefits facilitating popularizing use computers. However, flexible effective working computational procedures data analysis. knowing commands available user execute , possible create file containing several instructions sequence , future, simply request computer execute file using recorded procedures. need “scripted” point&click operation. spend time writing program , future, always execute recorded procedure way.medium long term, significant gain productivity use script (sequence commands) point&click type interface. Going , risk human error executing procedure almost nil commands required sequence execution recorded text file always executed way. one main reasons programming languages popular science. steps data-based research, including results, can replicated.using R, ideal format work merge mouse movement commands. R RStudio functionality mouse, capacity optimized perform operations using code. group commands performed smart way, R script preferably produce something important us end execution. finance economics, can current price stock, value economic index inflation, result academic research, among many possibilities.Like software, R allows us import data export files. can use code import dataset stored local file – web–, analyze paste results technical report. can use RStudio RMarkdown technology write dynamic report, code content integrated. example, book ’re reading written using bookdown package (Xie 2022). content book compiled execution R codes outputs recorded scope text. figures data tasks book can updated execution simple command. Needless say using capabilities R RStudio, work smarter faster. final product working R RStudio R script produces elements data report. good example simple polished R script can found link24. Open ’ll see content file extension .R download stock prices two companies create plot table. end book, can understand going code gets job done. Even better, ’ll able improve . Soon, ’ll learn execute code computer. impatient, simply copy text content link new RStudio R script, save , press control + shift + enter.","code":""},{"path":"basicoperations.html","id":"objects-in-r","chapter":"2 Basic Operations in R","heading":"2.2 Objects in R","text":"R, everything object, type object properties. example, daily closing prices IBM stock can represented numerical vector, element price recorded end trading day. Dates related prices can represented text (string) unique Date class. Finally, can represent price data dates together storing single object type dataframe, nothing table rows columns. objects part R ecosystem, manipulation, take full advantage software.represent data objects R, special type function. stores pre-established manipulation objects available user. R extremely large number functions, enable user perform wide range operations. example, basic commands R, available package base, adds total 1257 functions.function name programmer can write functions. example, sort function procedure sorts elements within vector. wanted sort elements 2, 1, 4, 3, 1, simply insert following command prompt (left bottom side RStudio’s screen) press enter: sort function used start end parentheses. parentheses serve highlight entries (inputs), , information sent function produce something saved object sorted_vec. Note entry separated comma, my_fct(input1, input2, input3, ...). also set option decreasing = TRUE. specific directive sort function order value highest lowest. Functions heart R dedicate large part book . can use available functions write . can also publish functions package let people use code.","code":"\nmy_vec <- c(2, 1, 4, 3, 1)\nsorted_vec <- sort(x = my_vec, decreasing = TRUE)\nprint(sorted_vec)R> [1] 4 3 2 1 1"},{"path":"basicoperations.html","id":"international-and-local-formats","chapter":"2 Basic Operations in R","heading":"2.3 International and Local Formats","text":"explaining use R RStudio, important highlight rules formatting numbers, Latin characters dates.decimal: Following international notation, decimal point R defined period symbol (.), 2.5 comma, 2,5. standard country, ’ll issues importing local data text files. Sometimes, storing data Microsoft Excel files, conversion happens automatically importing process. , however, generally exception. general rule using R, use commas separate inputs function. circumstances comma symbol used decimal point separator. Always give priority international format compatible vast majority data. Latin characters: Due international standard, R problems understanding Latin characters, cedilla accents. can, avoid , use Latin characters names variables files. content character objects (text), can use without problems long encoding script correctly specified (e.g. UTF-8, Latin1). strongly recommend use English language writing code defining object names. automatically eliminates use Latin characters facilitates usability code people outside country. date format: Dates R structured according ISO 860125 format. follows YYYY-MM-DD pattern, YYYY year four numbers, MM month DD day. example 2022-11-23. , however, may case country. importing local data sets, make sure dates format. necessary, can convert date ISO format. , can work local format dates R, best advised use international notation. conversion one format another quite easy presented chapter 7. want learn local format R, use following command typing prompt pressing enter:output Sys.localeconv() shows R interprets decimal points thousands separator, among things. can see previous output, book compiled using Brazilian notation currency uses dot point decimals.\ncareful modifying format R interprets different\nsymbols notations. rule thumb, need use specific\nformat, separately within context code. Avoid permanent\nchanges never know formats used. way,\ncan avoid unpleasant surprises future.\n","code":"\nSys.localeconv()R>     decimal_point     thousands_sep          grouping \nR>               \".\"                \"\"                \"\" \nR>   int_curr_symbol   currency_symbol mon_decimal_point \nR>            \"BRL \"              \"R$\"               \",\" \nR> mon_thousands_sep      mon_grouping     positive_sign \nR>               \".\"        \"\\003\\003\"                \"\" \nR>     negative_sign   int_frac_digits       frac_digits \nR>               \"-\"               \"2\"               \"2\" \nR>     p_cs_precedes    p_sep_by_space     n_cs_precedes \nR>               \"1\"               \"1\"               \"1\" \nR>    n_sep_by_space       p_sign_posn       n_sign_posn \nR>               \"1\"               \"1\"               \"1\""},{"path":"basicoperations.html","id":"types-of-files-in-r","chapter":"2 Basic Operations in R","heading":"2.4 Types of Files in R","text":"Like programming platform, R file ecosystem type file different purpose. vast majority cases, however, work focus mostly couple types. Next, describe various file extensions. items list ordered importance. Note omit graphic files .png, .jpg, .gif data storage/spreadsheet files (.csv, .xlsx, ..) among others, exclusive R. Files extension .R: text files containing R code. Besides, files spend time. contain sequence commands configures main script subroutines data research. Examples: Script-stock-research.R, R-fcts.R.Files extension .RData .rds: files store data native format. files used save/write objects created different sessions hard drive. example, can use .rds file save table processing cleaning raw database. freezing data local file, can later load subsequent analysis. Examples: cleaned-inflation-data.rds, model-results.RData.Files extension .Rmd .md: files used editing dynamic documents RMarkdown markdown formats. Using files allows creation documents text code output integrated document. chapter 12 dedicated section RMarkdown, explore functionality detail. Example: investment-report.Rmd. Files extension .Rproj: contain files editing projects RStudio, new R package, shiny application book. can use functionalities RStudio projects write R scripts, necessity. interested learning functionality, suggest RStudio manual26. Example: project-retirement.Rproj. ","code":""},{"path":"basicoperations.html","id":"explaining-the-rstudio-screen","chapter":"2 Basic Operations in R","heading":"2.5 Explaining the RStudio Screen","text":"installing two programs, R RStudio, open RStudio double-clicking icon. aware R also interface often causes confusion. find correct shortcut RStudio going software folders. Windows, can search RStudio using Start button typing Rstudio. opening RStudio, resulting window look like Figure 2.1.\nFigure 2.1: RStudio screen\nNote RStudio automatically detected installation R initialized screen left side.first exercise, click file, New File, R Script. text editor appear left side screen. spend time developing code. Commands executed sequentially, top bottom. side note, .R files created RStudio just text files can edited anywhere. uncommon experienced programmers use specific software write code another run .\nFigure 2.2: Explaining RStudio screen\n\nimportant suggestion change color scheme RStudio\ndark mode setting. just aesthetic\nissue, also strategy preventing health problems. Since \nspending lot time front computer, smart \nchange colors interface relieve eyes constant\nbrightness screen. way, ’ll able work longer,\nwithout straining vision. can configure color scheme \nRStudio going option Tools, Global Options\nAppearance. dark color scheme personally like\nsuggest Ambience.\nprevious steps RStudio, resulting screen look like image Figure 2.2. main items/panels RStudio screen :Script Editor: located left side screen. panel used write scripts functions, mostly files .R extension; R prompt: left side script editor. displays prompt, can also used give commands R. main purpose prompt test code display results commands entered script editor; Environment: located top-right screen. Shows objects, including variables functions currently available user. Also note History panel, shows history commands previously executed user; Panel Packages: shows packages installed loaded R. four tabs: Files, load view system files; Plots, view statistical figures created R; Help access help system Viewer display dynamic interactive results, web page. introductory exercise, let’s initialize two objects R. Inside prompt (lower left side), insert commands press enter end . <- symbol nothing result joining < (less ) - (minus sign). ' symbol represents single quotation mark , computer keyboard, found escape (esc) key.done correctly, notice two objects appeared environment panel, one called x value 1, another called y text content \"humble text\". Also noticed used specific symbols define objects x y. use double quotes (\" \") single quotes (' ') defines objects class character. Numbers defined value . discussed later, understanding R object classes important different behavior within R code. executing previous commands, history tab updated.Now, let’s show values x screen. , type following command:print function one main functions displaying values prompt R. text displayed [1] indicates index first line number. verify , enter following command, show lengthy sequence numbers screen: , use colon symbol 50:100 create sequence starting 50 ending 100. Note , left side line, values [1], [13], [25]. represent index first element presented line. example, fifteenth element 50:100 64.","code":"\n# set x\nx <- 1\n\n# set y\ny <- 'My humble text'\n# print contents of x\nprint(x)R> [1] 1\n# print a sequence\nprint(50:100)R>  [1]  50  51  52  53  54  55  56  57  58  59  60  61  62  63\nR> [15]  64  65  66  67  68  69  70  71  72  73  74  75  76  77\nR> [29]  78  79  80  81  82  83  84  85  86  87  88  89  90  91\nR> [43]  92  93  94  95  96  97  98  99 100"},{"path":"basicoperations.html","id":"r-packages","chapter":"2 Basic Operations in R","heading":"2.6 R Packages","text":"One greatest benefits using R package collection. package nothing group procedures aimed solving particular computational problem. R core collaborative philosophy. Users provide codes others use. , importantly, packages free. example, consider case user interested accessing data historical inflation USA. can install use R module specifically designed importing data central banks research agencies.Every function R belongs package. R initializes, packages stats, graphics, grDevices, utils, datasets, methods base loaded default. Almost every function used far belongs package base. R packages can accessed installed different sources. main CRAN (Comprehensive R Archive network), Github. ’s worth knowing quantity diversity R packages increase every day.CRAN official repository R built community. Anyone can send package. However, evaluation process ensure certain strict rules code format safety respected. interested creating distributing packages, clear roadmap create send packages CRAN presented site R packages27. Complete rules available CRAN website28.suitability code CRAN standards developer’s responsibility. personal experience, sending publishing package CRAN demands significant amount work, especially first submission. , becomes lot easier. Don’t angry package rejected. packages rejected several times entering CRAN. Listen maintainers tell try fixing problems resubmitting. ’re issues solve find solution Internet, look help R-packages mailing list29. ’ll surprised accessible helpful R community can .complete list packages available CRAN, along brief description, can accessed packages section R site30. practical way check package specific procedure load previous page search browser keyword interest (e.g. “SEC data”). package want, likely keyword used description field.Another important source finding packages CRAN Task Views31. can find collection noteworthy packages given area expertise. See Task Views screen Figure 2.3.\nFigure 2.3: Task View screen\npopular alternative CRAN Github32. Unlike former, Github imposes restrictions submitted code , version control system, popular choice developers. practice, common developers maintain development version Github official version CRAN. development version reaches certain stage maturity, sent CRAN.interesting part Github packages can accessed installed directly prompt using internet. find current amount packages CRAN, type execute following commands prompt:Currently, 2022-11-23 16:12:43, 18877 packages available CRAN servers, impressive mark community developers whole.can also check amount locally installed packages R installed.packages command: case, computer book written 539 packages currently installed. Notice , even experienced researcher R programmer, ’m using small fraction packages available CRAN! number installed packages probably different . Give try command installed.packages()!","code":"\n# get a matrix with available packages\ndf_cran_pkgs <- available.packages()\n\n# find the number of packages\nn_cran_packages <- nrow(df_cran_pkgs)\n\n# print it\nprint(n_cran_packages)R> [1] 18877\n# find number of packages currently installed\nn_local_packages <- nrow(installed.packages())\n\n# print it\nprint(n_local_packages)R> [1] 539"},{"path":"basicoperations.html","id":"installing-packages-from-cran","chapter":"2 Basic Operations in R","heading":"2.6.1 Installing Packages from CRAN","text":"install package, simply use command install.packages. need new package. example, install package called readr used future chapters. Note defined package name installation text use quotation marks (\" \"). ’s ! executing simple command, package readr dependencies installed functions related package ready use package loaded script. installed package dependent another package, R detects dependency automatically installs missing packages. Thus, requirements using installed package already satisfied everything work perfectly. possible, however, package external dependency. example, package RndTexExams depends existence LaTeX installation. cases usually announced description package error informs requirement missing. External dependencies R packages common, happen.","code":"\n# install package readr\ninstall.packages(\"readr\")"},{"path":"basicoperations.html","id":"installing-packages-from-github","chapter":"2 Basic Operations in R","heading":"2.6.2 Installing Packages from Github","text":"install package hosted Github, must first install devtools package, available CRAN: , use function devtools::install_github install package directly Github. following example, install development version package dplyr: Note username developer included input string. case, hadley name belongs developer dplyr, Hadley Wickham. Throughout book, notice name appears several times. Hadley prolific competent developer several popular R packages currently works RStudio.\naware github packages moderated.\nAnyone can send code content independently checked.\nNever install github packages without confidence author’s\nwork. Although unlikely - never happened example - \npossible malicious code.\n","code":"\n# install devtools\ninstall.packages('devtools')\n# install ggplot2 from github\ndevtools::install_github(\"hadley/dplyr\")"},{"path":"basicoperations.html","id":"loading-packages","chapter":"2 Basic Operations in R","heading":"2.6.3 Loading Packages","text":"Within script, use function library load package, following example. running command, functions package available current R session. Whenever close RStudio start new session, ’ll lose loaded packages. reason packages usually loaded top script: starting clean memory, required packages sequentially loaded actual R code executed.package want use available, R throw error message. See example next, try load non-existing package called unicorn.Remember error message. appear every time package found. got message running code book, need check required packages example install using install.packages, install.packages('unicorn').Alternatively, use specific package function want load functions package, can use double colons (::), following example. , use function fortune package fortunes (Zeileis R community 2016), shows screen potentially funny phrase chosen R mailing list. example, selected message number 10. One interesting use package fortune display random joke every time R starts , perhaps, lighten day. mentioned , R fully customizable. can find many tutorials achieve effect searching web “customizing R startup”.Another way loading package using require function. call require different behavior call library. Whenever try load uninstalled package library function, returns error. means script stops code evaluated. require, package found, returns object value FALSE rest code evaluated. , order avoid code executed without explicit dependencies, best advised always use library loading packages R scripts. use require left loading packages inside functions. create custom function requires procedures particular package, must load package within scope function. example, see following code, create new function called fct_example depends package quantmod:case, first time fct_example called, loads package quantmod functions. Using require inside function good programming policy function becomes self-contained, making easier use future. first time complete definition user-created function R presented. worry now. explain chapter 8.\naware loading package can cause conflict \nfunctions. example, function called\nfilter dplyr package also \nstats package. load packages call \nfilter function within scope code, one\nR use? Well, preference always last loaded\npackage. type problem can confusing.\nFortunately, note R tests conflicts loading \npackage. Try : start new R session load \ndplyr package. see message indicates \ntwo conflicts stats package – functions\nfilter lag – four \nbase package.\n\nsimple strategy avoid bugs due conflict function \ncall function using actual package name. example, ’m\ncalling lag dplyr, can write call\ndplyr::lag. can see, package name \nexplicit, avoiding possible conflict.\n","code":"\n# load package readr\nlibrary(readr)\nlibrary(unicorn)R> Error: There is no library called \"unicorn\"\n# example of using a function without loading package\nfortunes::fortune(10)R> \nR> Overall, SAS is about 11 years behind R and S-Plus in\nR> statistical capabilities (last year it was about 10 years\nR> behind) in my estimation.\nR>    -- Frank Harrell (SAS User, 1969-1991)\nR>       R-help (September 2003)\nfct_example <- function(x){\n\n  require(quantmod)\n\n    df <- getSymbols(x, auto.assign = F)\n    return(df)\n}"},{"path":"basicoperations.html","id":"upgrading-packages","chapter":"2 Basic Operations in R","heading":"2.6.4 Upgrading Packages","text":"time, natural packages available CRAN upgraded accommodate new features, correct bugs adapt changes. Thus, recommended users update installed packages new version internet. R, procedure quite easy. direct way upgrading packages click button Update located package panel, lower right corner RStudio, shown Figure 2.4.\nFigure 2.4: Updating R packages\nuser can also update packages prompt. Simply type command update.packages() hit enter, shown . command update.packages compares version installed packages versions available CRAN. finds difference, new versions downloaded installed. running command, packages synchronized versions available CRAN.\nPackage versioning extremely important topic keeping \ncode reproducible. Although uncommon happen, package update\nmight modify, data, results obtained previously. \nparticularly memorable experience scientific article returned\njournal review , due update one R packages, \nunable reproduce results presented article. end\neverything went well, trauma remains.\n\nOne solution problem freeze package versions \nproject using RStudio’s packrat tool. summary,\npackrat makes local copies packages used \nproject, preference system packages. Thus, package\nupdated system, project, R code \ncontinue use older version R code always run \nconditions.\n","code":"\n# update all installed packages\nupdate.packages()"},{"path":"basicoperations.html","id":"running-scripts-from-rstudio","chapter":"2 Basic Operations in R","heading":"2.7 Running Scripts from RStudio","text":"Now, let’s combine previously typed codes single file copying pasting commands editor’s screen (upper left side). result looks like Figure 2.5.\nFigure 2.5: Example R script\npasting commands editor, save .R file personal folder read write permissions. Windows, one possibility save Documents folder name like 'my_first_script.R'. saved file, moment nothing special, records steps simple algorithm creates several objects shows content.","code":""},{"path":"basicoperations.html","id":"rstudio-shortcuts","chapter":"2 Basic Operations in R","heading":"2.7.1 RStudio shortcuts","text":"RStudio, predefined time-saving shortcuts running code editor. execute entire script, simply press control + shift + s. source command. RStudio open, suggest testing key combination checking code saved .R file executed. output script shown prompt R. result RStudio look like Figure 2.6. \nFigure 2.6: Example R script execution\nAnother way executing code shortcut control + enter, execute line cursor located. shortcut useful developing scripts allows line code tested. example usage, point cursor print(x) line press control + enter. notice, line print(x) executed cursor moves next line. Therefore, running whole script, can test line line check possible errors.Next, highlight RStudio shortcuts, also useful.control + shift + s\nexecutes (source) current RStudio file;\ncontrol + shift + enter\nexecutes current file echo, showing commands prompt;\ncontrol + enter\nexecutes selected line, showing -screen commands;\ncontrol + shift + b\nexecutes codes beginning file cursor’s location;\ncontrol + shift + e\nexecutes codes lines cursor end file.\nsuggest using shortcuts day one, creating healthy habit. like use mouse, alternate way execute code click source button upper-right corner code editor.want run code .R file within another .R file, can use source command. example, imagine main script data analysis another two scripts performs support operation importing data R. operations dismembered way organizing code. run support scripts, just call function source main script, following code:, code 01-import-data.R 02-build-tables.R executed sequentially. equals manually opening file hitting control + shift + s.","code":"\n# execute import script\nsource('01-import-data.R')\n\n# execute analysis\nsource('02-build-tables')"},{"path":"basicoperations.html","id":"testing-and-debugging-code","chapter":"2 Basic Operations in R","heading":"2.8 Testing and Debugging Code","text":"Developing code follows cycle. first, write command line script, try using control + enter check output prompt content objects. new line code written previous line worked expected. moving cycle clear, writing code followed line execution, followed result checking, modify repeat necessary. normal expected process. need make sure every line code correctly specified moving next one.trying find error preexisting script, R offers debugging tools controlling assessing execution. especially useful long complicated script. simplest easiest tool R RStudio offer code breakpoint. RStudio, can click left side script editor red circle appear, Figure 2.7.\nFigure 2.7: Example breakpoint R script\nred circle indicates flag force code stop line. can use test existing code check objects certain part execution. Pausing code certain point might seem strange starting programmer , large scripts, many functions complex code, necessity. execution hits breakpoint, prompt change Browse[1]> ’ll able try new code verify content current objects. Console, option continue execution next breakpoint stop pressing shift+f8. result can achieved using function called browser. look:practical result using RStudio’s red circle, gives control case several commands line.","code":"\n# set x\nx <- 1\n\n# set y\ny <- 'My humble text'\n\nbrowser()\n\n# print contents of x\nprint(x)"},{"path":"basicoperations.html","id":"creating-simple-objects","chapter":"2 Basic Operations in R","heading":"2.9 Creating Simple Objects","text":"One basic used commands R creation objects. shown previous sections, can define object using <- command, verbally translated assign. example, consider following code: can read code value 123 assigned x. direction arrow defines value stored. example, using 123 -> x also works, although recommended code becomes less readable. Moreover, notice can create objects within line separating commands using semi-colon.\nUsing arrow symbol <- object definition \nspecific R. reason choice , time \nconception S language, keyboards specific key \ndirectly defined arrow symbol. means programmer \nhit one key keyboard set assign symbol.\nModern keyboards, however, different. find troublesome \ntype symbol, can use shortcut well. Windows,\nshortcut symbol <- alt plus\n-.\nprogramming languages uses equality symbol (=) define objects , often, creates confusion. using R, can also define objects =, x = 123, however, one ever recommend . equality symbol special use within R code defines function arguments, my_l <- fct(arg1 = 1, arg2 = 3). now, just remember use <- defining objects. learn functions using equality symbol future chapter.name object important R. exception specific cases, can name objects please. freedom, however, can work . desirable set short object names make sense content script simple understand. facilitates understanding code users part suggested set rules structuring code. Note objects created book nomenclature English specific format, white space nouns replaced underscore, my_x <- 1 name_of_file <- 'my_data_file.csv'. get back code structure chapter 13.R executes code looking objects available environment, including functions. also need aware R case sensitive. Likewise, object m differs M. try access object exist, R return error message halt execution rest code. look:error occurred object z exist current environment. create variable z z <- 321 repeat command print(z), error message.","code":"\n# set x\nx <- 123\n\n# set my_x, my_y and my_z in one line\nmy_x <- 1; my_y <- 2; my_z <- 3\nprint(z)R> [1] 3"},{"path":"basicoperations.html","id":"creating-vectors","chapter":"2 Basic Operations in R","heading":"2.10 Creating Vectors","text":"previous examples, created simple objects x <- 1 x <- 'ABC'. sufficient demonstrate basic commands R, practice, commands limited. real problem data analysis certainly greater volume information.gather many elements class, numeric, single object, result atomic vector. example representation series daily stock prices atomic vector class numeric. vector, can manipulate way want.Atomic vectors created R using c command, comes verb combine. example, want combine values 1, 2 3 single object, can following command: c command works way class object, character:restriction use c command elements must class. insert data different classes call c(), R try mutate elements class following logic. conversion elements single class possible, error message returned. Note following example, numeric values set first second element x character last element.values x type character. use class command confirms result:","code":"\n# create numeric atomic vector\nx <- c(1, 2, 3)\n\n# print it\nprint(x)R> [1] 1 2 3\n# create character atomic vector\ny <- c('text 1', 'text 2', 'text 3', 'text 4')\n\n# print it\nprint(y)R> [1] \"text 1\" \"text 2\" \"text 3\" \"text 4\"\n# a mixed vector\nx <- c(1, 2, '3')\n\n# print result of forced conversion\nprint(x)R> [1] \"1\" \"2\" \"3\"\n# print class of x\nclass(x)R> [1] \"character\""},{"path":"basicoperations.html","id":"knowing-your-environment-and-objects","chapter":"2 Basic Operations in R","heading":"2.11 Knowing Your Environment and Objects","text":"using various commands, development R script requires understand objects available content expected. can find information simply looking environment tab upper right corner RStudio. However, command shows information prompt. order know objects currently available R’s memory, can use command ls. Note following example: Objects x, y z created available current working environment. objects, also appear output ls.display content object, just enter names objects press enter prompt:Typing object name screen effect using print command. fact, executing sole name variable prompt script, R internally passes object print function.R, objects belong class. previously mentioned, find class object, simply use class function. following example, x object class numeric, y text (character) object fct_example function object. Another way learn object check textual representation. Every object R property can find function str: find object x vector class int (integer). Function str particularly useful trying understand details complex object, dataframe list.","code":"\n# set some objects\nx <- 1\ny <- 2\nz <- 3\n\n# print all objects in the environment\nprint(ls())R> [1] \"x\" \"y\" \"z\"\n# print objects by their name\nxR> [1] 1\nyR> [1] 2\nzR> [1] 3\n# set objects\nx <- 1\ny <- 'a'\nfct_example <- function(){}\n\n# print their classes\nprint(class(x))R> [1] \"numeric\"\nprint(class(y))R> [1] \"character\"\nprint(class(fct_example))R> [1] \"function\"\n# set vec\nx <- 1:10\n# print the textual representation of a vector\nprint(str(x))R>  int [1:10] 1 2 3 4 5 6 7 8 9 10\nR> NULL"},{"path":"basicoperations.html","id":"displaying-and-formatting-output","chapter":"2 Basic Operations in R","heading":"2.12 Displaying and Formatting Output","text":"can show value R object screen two ways. can either enter name prompt use print function. Explaining , print function focuses presentation objects can customized type. example, object class called My_Table represent specific type table, create function called print.My_Table show table screen special format rows column names. Function print, therefore, oriented towards presenting objects user can customize different classes. base package, automatically initialized R, contains several print functions various kinds objects, numeric character.However, specific functions display text prompt. main one message. function takes text input, processes specific symbols displays result screen. Function message far powerful customizable print. example, wanted show text, value x equal 2 -screen using numerical object, follows:can also customize screen output using specific commands. example, wanted break line screen output, use reserved character \\n:Note use print result effect command displays text , without processing specific symbols:Another example use specific commands text add tab space symbol \\t. See example next:’ve scratched surface possible ways manipulate text output. details found official R manual33.","code":"\n# set x\nx <- 2\n\n# print customized message\nmessage('The value of x is', x)R> The value of x is2\n# set text with break line\nmy_text <- ' First Line,\\n Second line'\n\n# print it\nmessage(my_text)R>  First Line,\nR>  Second line\nprint(my_text)R> [1] \" First Line,\\n Second line\"\n# set char with \\t\nmy_text_1 <- 'A and B'\nmy_text_2 <- '\\tA and B'\nmy_text_3 <- '\\t\\tA and B'\n\n# print with message()\nmessage(my_text_1)R> A and B\nmessage(my_text_2)R>  A and B\nmessage(my_text_3)R>      A and B"},{"path":"basicoperations.html","id":"customizing-the-output","chapter":"2 Basic Operations in R","heading":"2.12.1 Customizing the Output","text":"Another way customize text output using specific functions manipulate objects class character. , two useful functions: paste format. Function paste glues series character objects. useful function used intensively rest examples book. Consider following example:previous result far example print function. Note, however, paste function adds space text. want space, use function paste0 :\nalternative message function \ncat (concatenate print). uncommon \nfind code messages user transmitted \ncat message. rule thumb, give\npreference message provides output \neasier control. example, user wants silence function,\nomitting outputs screen, /just use command\nsuppressMessages.\nAnother useful possibility paste function insert text symbol junction texts. example, wanted add comma (,) item pasted, using input option sep follows:atomic vector elements glued single object, achieve result using collapse argument. See example next.Another key feature paste command also works vectors. example, let’s say needed create series text objects containing phrase \"value equal X\", \"X\" goes 1 10. can following:Going forward, command format used format numbers dates. especially useful want represent numbers visually appealing way. definition, R presents set number digits decimal point: wanted two digits screen, use following code:Likewise, wanted use scientific format display, following:Function format many options. need numbers come specific way, look help manual function. also generic function can used many types objects.","code":"\n# set some text objects\nmy_text_1 <- 'I am a text'\nmy_text_2 <- 'very beautiful'\nmy_text_3 <- 'and informative.'\n\n# paste all objects together and print\nmessage(paste(my_text_1, my_text_2, my_text_3))R> I am a text very beautiful and informative.\n# example of paste0\nmessage(paste0(my_text_1, my_text_2, my_text_3))R> I am a textvery beautifuland informative.\n# example using the argument sep\nmessage(paste(my_text_1, my_text_2, my_text_3, sep = ', '))R> I am a text, very beautiful, and informative.\n# set character object\nmy_text <-c('I am a text', 'very beautiful', 'and informative.')\n\n# example of using the collapse argument in paste\nmessage(paste(my_text, collapse = ', '))R> I am a text, very beautiful, and informative.\n# set size and vector\nmy_size <- 10\nmy_vec <- 1:my_size\n\n# define string vector\nmy_str <- paste0('My value is equal to ', my_vec)\n\n# print it\nprint(my_str)R>  [1] \"My value is equal to 1\"  \"My value is equal to 2\" \nR>  [3] \"My value is equal to 3\"  \"My value is equal to 4\" \nR>  [5] \"My value is equal to 5\"  \"My value is equal to 6\" \nR>  [7] \"My value is equal to 7\"  \"My value is equal to 8\" \nR>  [9] \"My value is equal to 9\"  \"My value is equal to 10\"\n# example of decimal points in R\nmessage(1/3)R> 0.333333333333333\n# example of using the format on numerical objects\nmessage(format(1/3, digits=2))R> 0.33\n# example of using a scientific format\nmessage(format(1/3, scientific=TRUE))R> 3.333333e-01"},{"path":"basicoperations.html","id":"finding-the-size-of-objects","chapter":"2 Basic Operations in R","heading":"2.13 Finding the Size of Objects","text":"R, object size can mean different things likely defined number individual elements constitute object. information serves assist programmer checking possible code errors also know length iteration procedures loops, treated later chapter book.R, size object can checked use four main functions: length, nrow, ncol dim. Function length intended objects single dimension, atomic vectors:objects one dimension, matrix, use functions nrow, ncol dim (dimension) find number rows (first dimension) number columns (second dimension). See difference usage .dim function shows dimension object, resulting numeric vector output. function used object two dimensions. practice, however, cases rare data-related problems can solved bi-dimensional representation. example given next:case objects two dimensions, can use array function create object dim find size. look next example:important note use functions length, nrow, dim ncol intended discover number letters text. common mistake aware . example, character type object use length function, result following:occurred length function returns number elements object. case, my_char one element. find number characters object, use nchar function follows: ","code":"\n# create atomic vector\nx <- c(2, 3, 3, 4, 2,1)\n\n# get length of x\nn <- length(x)\n\n# display message\nmessage('The length of x is ', n)R> The length of x is 6\n# create a matrix\nM <- matrix(1:20, nrow = 4, ncol = 5)\n\n# print matrix\nprint(M)R>      [,1] [,2] [,3] [,4] [,5]\nR> [1,]    1    5    9   13   17\nR> [2,]    2    6   10   14   18\nR> [3,]    3    7   11   15   19\nR> [4,]    4    8   12   16   20\n# calculate size in different ways\nmy_nrow <- nrow(M)\nmy_ncol <- ncol(M)\nmy_n_elements <- length(M)\n\n# display messages\nmessage('The number of lines in M is ', my_nrow)R> The number of lines in M is 4\nmessage('The number of columns in M is ', my_ncol)R> The number of columns in M is 5\nmessage('The number of elements in M is ', my_n_elements)R> The number of elements in M is 20\n# get dimension of M\nmy_dim <- dim(M)\n\n# print it\nprint(my_dim)R> [1] 4 5\n# create an array with three dimensions\nmy_array <- array(1:9, dim = c(3, 3, 3))\n\n# print it\nprint(my_array)R> , , 1\nR> \nR>      [,1] [,2] [,3]\nR> [1,]    1    4    7\nR> [2,]    2    5    8\nR> [3,]    3    6    9\nR> \nR> , , 2\nR> \nR>      [,1] [,2] [,3]\nR> [1,]    1    4    7\nR> [2,]    2    5    8\nR> [3,]    3    6    9\nR> \nR> , , 3\nR> \nR>      [,1] [,2] [,3]\nR> [1,]    1    4    7\nR> [2,]    2    5    8\nR> [3,]    3    6    9\n# display its dimensions\nprint(dim(my_array))R> [1] 3 3 3\n# set text object\nmy_char <- 'abcde'\n\n# print result of length\nprint(length(my_char))R> [1] 1\n# find the number of characters in an character object\nprint(nchar(my_char))R> [1] 5"},{"path":"basicoperations.html","id":"selecting-elements-from-an-atomic-vector","chapter":"2 Basic Operations in R","heading":"2.14 Selecting Elements from an Atomic Vector","text":"creating atomic vector class, possible user interested one elements . example, updating value investment portfolio, interest latest price stocks. values dates relevant analysis therefore safely ignored.selection pieces atomic vector called indexing accomplished use square brackets ([ ]). Consider following example:wanted third element my_x, use bracket operator follows:Indexing also works using vectors containing desired locations. interested last penultimate values my_x, use following code:cautionary note: unique property R language non-existing element object accessed, program returns value NA (available). See next example code, attempt obtain fourth value vector three components.important NA elements contagious. , anything interacts NA also become NA.lack treatment errors can lead problems difficult identify. programming languages, attempting access non-existing elements generally returns error cancels execution rest code.\nGenerally, occurrence NA (Available)\nvalues suggests code problem. Always remember NA\nindicates lack data contagious: anything interacts \nNA value turn another NA.\nbecome suspicious code every time \nNA values found unexpectedly. manual\ninspection length indexation vectors may required.\nuse indices useful looking items vector satisfy condition. example, wanted find values my_x greater 3, use following command:also possible index elements one condition using logical operators & | (). example, wanted values my_x greater 2 lower 4, use following command: Likewise, wanted items lower 3 greater 6, use:Moreover, logic indexing also works interaction different objects. , can use logical condition one object select items another:Looking closely indexing process, worth noting , use data indexing condition, fact creating variable logical type. object takes two values: TRUE FALSE. look code presented next, create logical object, print present class.Logical objects useful whenever testing particular condition data set. learn basic classes chapter 7.","code":"\n# set x\nmy_x <- c(1, 5, 4, 3, 2, 7, 3.5, 4.3)\n# get the third element of x\nelem_x <- my_x[3]\n\n# print it\nprint(elem_x)R> [1] 4\n# set vector with indices\nmy_idx <-  (length(my_x)-1):length(my_x) \n\n# get last and penultimate value of my_x\npiece_x_1 <- my_x[my_idx]\n\n# print it\nprint(piece_x_1)R> [1] 3.5 4.3\n# set object\nmy_vec <- c(1, 2, 3)\n\n# print non-existing fourth element\nprint(my_vec[4])R> [1] NA\n# find all values in my_x that is greater than 3\npiece_x_2 <- my_x[my_x>3]\n\n# print it\nprint(piece_x_2)R> [1] 5.0 4.0 7.0 3.5 4.3\n# find all values of my_x that are greater than 2 and lower then 4\npiece_x_3 <- my_x[ (my_x > 2) & (my_x < 4) ]\nprint(piece_x_3)R> [1] 3.0 3.5\n# find all values of my_x that are lower than 3 or higher than 6\npiece_x_4 <- my_x[ (my_x < 3) | (my_x > 6) ]\n\n# print it\nprint(piece_x_4)R> [1] 1 2 7\n# set my_x and my.y\nmy_x <- c(1, 4, 6, 8, 12)\nmy_y <- c(-2, -3, 4, 10, 14)\n\n# find all elements of my_x where my.y is higher than 0\nmy_piece_x <- my_x[my_y > 0 ]\n\n# print it\nprint(my_piece_x)R> [1]  6  8 12\n# create a logical object\nmy_logical <- my_y > 0\n\n# print it\nprint(my_logical)R> [1] FALSE FALSE  TRUE  TRUE  TRUE\n# find its class\nclass(my_logical)R> [1] \"logical\""},{"path":"basicoperations.html","id":"removing-objects-from-the-memory","chapter":"2 Basic Operations in R","heading":"2.15 Removing Objects from the Memory","text":"creating several variables, R environment can become full used disposable content. case, desirable clear memory erase objects longer needed. Generally, accomplished beginning script, every time script runs, memory cleared calculation. addition cleaning computer’s memory, also helps avoid possible errors code. cases, cleaning working environment performed beginning script.example, given object x, can delete memory command rm, shown next: executing command rm('x'), value x longer available R session. practical situations, however, desirable clean memory used objects created R. can achieve goal following code:term list rm(list = ls()) function argument rm defines objects deleted. ls() command shows currently available objects. Therefore, chaining together commands, erase current objects available environment. mentioned , good programming policy clear memory running script. However, wipe R’s memory already saved results interest can replicate .\nClearing memory scripts controversial topic. \nauthors argue better clear memory can\nerase important results. opinion, think important clear\nmemory top script, long results \nreproducible. start code clean state – variables \nfunctions – becomes easier understand solve possible\nbugs.\n","code":"\n# set x\nx <- 1\n\n# remove x\nrm('x')\nrm(list = ls())"},{"path":"basicoperations.html","id":"displaying-and-setting-the-working-directory","chapter":"2 Basic Operations in R","heading":"2.16 Displaying and Setting the Working Directory","text":"Like programming platforms, R always works directory. directory set, default value used R starts . based working directory R searches files load data R scripts. directory R saves output explicitly define path computer. output can graphic file, text spreadsheet. good programming policy change working directory place script located.simplest way checking current working directory looking RStudio’s prompt panel. top, small font just word “Console”, ’ll see working path. Using code, can check current working directory function getwd: result previous code shows folder book written compiled. can see, book files saved sub-folder Dropbox directory.change working directory performed setwd command. example, wanted change working directory C:/Research/, simply type prompt: changing directory, importing saving files C:/Research/ folder lot easier.simple cases , remembering directory name difficult. practical cases, however, working directory can deeper directory file system. simple efficient way setting working directory using autocomplete feature RStudio. Explained briefly, can use tab key keyboard navigate computer’s folders within RStudio. Give try following steps:Write command setwd('') script , empty content inner character;Write command setwd('') script , empty content inner character;Place cursor ' symbols;Place cursor ' symbols;Press tab key.Press tab key.Now ’ll able see folders small window use arrows enter key navigate. autocomplete feature RStudio goes much deeper . learn future section chapter.Another, modern, way setting directory use RStudio API package, contains set functions work inside RStudio provides information current file, project many . find path current R script edited RStudio set working directory , can write:way, script change directory location, matter copy . aware, however, trick works RStudio’s script editor within saved file. work prompt.working path script, using relative paths preferable. example, working folder contains subdirectory called data, can enter sub-folder code:Another possibility go previous level directory using .., :, working directory C:/Research/ execute command setwd('..'), current folder becomes C:/, one level C:/Research/.","code":"\n# get current dir\nmy_dir <- getwd()\n\n# display it\nprint(my_dir)R> C:/Dropbox/06-My Books/afedR-ed2/Book Content\n# set where to change directory\nmy_d <- 'C:/My Research/'\n\n# change it\nsetwd(my_d)\nmy_path <- dirname(rstudioapi::getActiveDocumentContext()$path)\nsetwd(my_path)\n# change to subfolder\nsetwd('data')\n# change to the previous level\nsetwd('..')"},{"path":"basicoperations.html","id":"canceling-code-execution","chapter":"2 Basic Operations in R","heading":"2.17 Canceling Code Execution","text":"Whenever R running code, visual cue shape small red circle right corner prompt appear. read , text shows stop word. button indicator running code also shortcut canceling execution. Another way cancel execution point mouse prompt press escape (esc) button keyboard.try , run next chunk code RStudio cancel execution using esc.previous code, used loop function Sys.sleep display message '\\nRunning code (please make stop hitting ESC!)' one hundred times, every second. now, worry code functions used example. discuss use loops chapter 8.\nAnother useful trick defining working directories R \nuse ~ symbol. tilda defines “Documents” folder\nWindows, unique user. Therefore, \nrunning setwd(‘~’), direct R folder \neasily accessible.\n","code":"\nfor (i in 1:100) {\n  message('\\nRunning code (please make it stop by hitting esc!)')\n  Sys.sleep(1)\n}"},{"path":"basicoperations.html","id":"code-comments","chapter":"2 Basic Operations in R","heading":"2.18 Code Comments","text":"R, comments set using hashtag symbol #. Anything symbol processed R. gives freedom write whatever want within script. example:Comments effective way communicate important information directly inferred code. general, avoid using comments obvious generic:can see, quite obvious line df <- read.csv('..') code reading .csv file. name function already states . , comment good one add new information user. better approach commenting set author, description script better explain origin last update data file. look:, reading comments, user know purpose script, wrote date last edit. also includes origin data file date latest update. user wants update data, go referred website download new file.Another productive use comments set sections code, :use long line dashes (-) section code intentional. causes RStudio identify bookmark sections, link bottom script editor. Test , copy paste code new R script, save , ’ll see sections appear button editor prompt. shortcut can save plenty time lengthy scripts.\nstart share code people, ’ll soon realize\ncomments essential expected. help transmit information\navailable code. one way discerning\nnovice experienced programmers. later always \ncommunicative comments (sometimes much!). note ,\nthroughout book ’ll see code comments , \ntime, bit obvious. intentional clear direct messages\nimportant new users, part audience \nbook.\n","code":"\n# this is a comment (R will not parse it)\n# this is another comment (R will again not parse it)\n\nx <- 'abc' # this is an inline comment\n# read CSV file\ndf <- read.csv('data/data_file.csv')\n# Script for reproducing the results of JOHN (2019)\n# Author: Mr data analyst (dontspamme@emailprovider.com)\n# Last script update: 2020-01-10\n#\n# File downloaded from www.site.com/data-files/data_file.csv\n# The description of the data goes here\n# Last file update: 2020-01-10\n\ndf <- read.csv('data/data_file.csv')\n# Script for reproducing the results of JOHN (2019)\n# Author: Mr data analyst (dontspamme@emailprovider.com)\n# Last script update: 2020-01-10\n#\n# File downloaded from www.site.com/data-files/data_file.csv\n# The description of the data goes here\n# Last file update: 2020-01-10\n\n# Clean data -------------------------\n# - remove outliers\n# - remove unnecessary columns\n\n# Create descriptive tables ----------\n\n\n# Estimate models --------------------\n\n\n# Report results ---------------------"},{"path":"basicoperations.html","id":"looking-for-help","chapter":"2 Basic Operations in R","heading":"2.19 Looking for Help","text":"common task use R seek help. Even advanced users often seek instructions specific tasks, whether better understand details functions simply study new procedure. use R help system part everyday routine software master soon possible.can get help using help panel RStudio directly prompt. Simply enter question mark next object want help, ?mean. case, object means function use help command open panel right side RStudio. R, help screen function shown Figure 2.8. presents general description function, explains input arguments format output. help screen follows references suggestions related functions. importantly, examples usage given last can copied prompt script order accelerate learning process.\nFigure 2.8: Help screen function mean\nlooking help given text function name, can use double question marks ??\"standard deviation\". operation search occurrence term packages R useful learn perform particular task. case, looked available functions calculate standard deviation vector.suggestion, easiest direct way learn new function trying examples manual. way, can see type input objects function expects type output gives. working, read help screen understand exactly expected options use. function performs desired procedure, can copy paste example script, adjusting necessary.Another important source help Internet . Sites like stackoverflow specific mailing lists blogs, whose content also Internet, valuable source information. find problem solved reading standard help files, next logical step seek solution using error message description problem search engines. many cases, problem, matter specific , already occurred solved users. fact, surprising find solution programming problem internet, way around.\nWhenever ask help internet, always try 1) describe\nproblem clearly 2) add reproducible code problem.\nThus, reader can easily verify happening running \nexample computer. doubt respect rules,\ncharitable person soon help problem.\n","code":""},{"path":"basicoperations.html","id":"autocomplete","chapter":"2 Basic Operations in R","heading":"2.20 Using Code Completion with tab","text":"useful feature RStudio code completion, editing tool facilitates search object names, packages, function arguments, files. usage simple. type first letter keyboard, just press tab (left side keyboard, capslock) number options appear. See Figure 2.9 , entering f letter pressing tab, small window appears list object names begin letter. \nFigure 2.9: Usage autocomplete object name\nautocomplete feature self-aware work differently depending called. , works perfectly searching packages. , type library() prompt editor, place cursor parentheses press tab. result look something like Figure 2.10, shown next.\nFigure 2.10: Usage autocomplete packages\nNote description package object also offered code completion tool. greatly facilitates day day work memorization package names R objects easy task. use tab decreases time look names, also avoiding possible coding errors.use tool becomes even beneficial objects functions named sort pattern. rest book, notice objects tend named prefix , my_x, my_num, my_df. Using naming rule () facilitates lookup names objects created user. can just type my_, press tab, list objects appear.mentioned previous section, can also find files folders computer using tab. try , write command my_file <- \"\" prompt script, point cursor middle quotes press tab key. screen files folders current working directory appear, shown Figure 2.11.\nFigure 2.11: Usage autocomplete files folders\nuse autocomplete also possible finding name description function arguments. try , write message() place mouse cursor inside parentheses. , press tab. result similar Figure 2.12. using tab inside function, names arguments description – mirror information found help files.\nFigure 2.12: Usage autocomplete function arguments\nLikewise, can also search function within package tab. , simply type name package followed two commas, readr::, press tab. result similar Figure 2.13\nFigure 2.13: Usage autocomplete finding functions within package\nSumming , using code completion make productive. ’ll find names files, objects, arguments, packages much faster. Use much can form habit .\nAutocomplete one important tools RStudio,\nhelping users find object names, locations hard disk, packages\nfunctions. Get used using tab key , soon enough,\n’ll see much autocomplete tool can help write\ncode quickly, without typos.\n","code":""},{"path":"basicoperations.html","id":"interacting-with-files-and-the-operating-system","chapter":"2 Basic Operations in R","heading":"2.21 Interacting with Files and the Operating System","text":"learning R, soon enough ’ll find data-related problem demand interacting files computer, either creating new folders, decompressing compressing files, listing removing files hard drive computer type operation. R full support type operations. can automate type computer task within R script, needed.","code":""},{"path":"basicoperations.html","id":"listing-files-and-folders","chapter":"2 Basic Operations in R","heading":"2.21.1 Listing Files and Folders","text":"list files computer, use function list.files, path argument sets directory list files . compilation book, ’ve created directory called data. folder contains data needed recreate book’s examples. can check files sub-folder data following code: several files different extensions directory. files contain data used future chapters. using list.files, recommended set input full.names TRUE. option makes sure names returned function contain full path. facilitates manipulation, reading importing information data files. worth noting can also list files recursively, , list files sub-folders contained original address. check , try using following code computer:previous command list files current folder sub-folders. Depending current working directory, may take time run . executed , patient just cancel pressing esc keyboard.list folders (directories) computer, use command list.dirs. See . command list.dirs(recursive = F) listed directories current path without recursion. output shows directories used write book. includes output directory book ( ./_book), directory data (./data), among others. directory, can find chapters book, organized files based RMarkdown language (.Rmd file extension). list files extension .Rmd, can use pattern input function list.files follows:files presented contain contents book, including specific paragraph, located file 02-Basic-operations.Rmd!","code":"\n# list files in data folder\nmy_files <- list.files(path = \"data\", full.names = TRUE)\nprint(my_files)R>  [1] \"data/batchgetsymbols_parallel_example.rds\"       \nR>  [2] \"data/FileWithLatinChar_ISO-8859-9.txt\"           \nR>  [3] \"data/FileWithLatinChar_UTF-8.txt\"                \nR>  [4] \"data/Financial Sample.xlsx\"                      \nR>  [5] \"data/grunfeld.csv\"                               \nR>  [6] \"data/MySQLiteDatabase.SQLITE\"                    \nR>  [7] \"data/pride_and_prejudice.txt\"                    \nR>  [8] \"data/SP500_Excel.xlsx\"                           \nR>  [9] \"data/SP500_long_yearly_2010-01-01_2019-11-04.rds\"\nR> [10] \"data/SP500-Stocks_long.csv\"                      \nR> [11] \"data/SP500-Stocks_wide.csv\"                      \nR> [12] \"data/SP500-Stocks-WithRet.rds\"                   \nR> [13] \"data/SP500.csv\"                                  \nR> [14] \"data/SQLite_db.SQLITE\"                           \nR> [15] \"data/temp_file.xlsx\"                             \nR> [16] \"data/temp_fst.fst\"                               \nR> [17] \"data/temp_rds.rds\"                               \nR> [18] \"data/temp_writexl.xlsx\"                          \nR> [19] \"data/temp_xlsx.xlsx\"                             \nR> [20] \"data/temp.csv\"                                   \nR> [21] \"data/temp.fst\"                                   \nR> [22] \"data/temp.RData\"                                 \nR> [23] \"data/temp.rds\"                                   \nR> [24] \"data/temp.txt\"                                   \nR> [25] \"data/temp.xlsx\"                                  \nR> [26] \"data/top25babynames-by-sex-2005-2017.csv\"        \nR> [27] \"data/UCI_Credit_Card.csv\"\n# list all files for all subfolders (IT MAY TAKE SOME TIME...)\nlist.files(path = getwd(), recursive = T, full.names = TRUE)\n# store names of directories\nmy_dirs <- list.dirs(recursive = F)\n\n# print it\nprint(my_dirs)R>  [1] \"./_book\"                   \"./_bookdown_files\"        \nR>  [3] \"./.Rproj.user\"             \"./.vscode\"                \nR>  [5] \"./afedR_ed_02_cache\"       \"./afedR_ed_02_files\"      \nR>  [7] \"./afedR_ed02-ONLINE_cache\" \"./afedR_ed02-ONLINE_files\"\nR>  [9] \"./bib-files\"               \"./blocks\"                 \nR> [11] \"./css\"                     \"./data\"                   \nR> [13] \"./ebook files\"             \"./eqs\"                    \nR> [15] \"./fig_ggplot\"              \"./figs\"                   \nR> [17] \"./ftp files\"               \"./gdfpd2_cache\"           \nR> [19] \"./html code\"               \"./images\"                 \nR> [21] \"./js\"                      \"./latex\"                  \nR> [23] \"./many_datafiles\"          \"./many_datafiles_2\"       \nR> [25] \"./mem_cache\"               \"./Other chapters\"         \nR> [27] \"./quandl_cache\"            \"./Scripts\"                \nR> [29] \"./simfin_cache\"            \"./tabs\"\n# list all files with the extension .Rmd\nlist.files(pattern = \"*.Rmd\")R>  [1] \"_Welcome.Rmd\"                    \nR>  [2] \"00a-About-new-edition.Rmd\"       \nR>  [3] \"00b-Preface.Rmd\"                 \nR>  [4] \"01-Introduction.Rmd\"             \nR>  [5] \"02-Basic-operations.Rmd\"         \nR>  [6] \"03-Research-scripts.Rmd\"         \nR>  [7] \"04-Importing-exporting-local.Rmd\"\nR>  [8] \"05-Importing-internet.Rmd\"       \nR>  [9] \"06-Data-structure-objects.Rmd\"   \nR> [10] \"07-Basic-objects.Rmd\"            \nR> [11] \"08-Programming--ONLINE.Rmd\"      \nR> [12] \"09-Cleaning-data--ONLINE.Rmd\"    \nR> [13] \"10-Figures--ONLINE.Rmd\"          \nR> [14] \"11-Models--ONLINE.Rmd\"           \nR> [15] \"12-Reporting-results--ONLINE.Rmd\"\nR> [16] \"13-Optimizing-code--ONLINE.Rmd\"  \nR> [17] \"14-References.Rmd\"               \nR> [18] \"afedR_ed02-ONLINE.Rmd\"           \nR> [19] \"index.Rmd\""},{"path":"basicoperations.html","id":"deleting-files-and-directories","chapter":"2 Basic Operations in R","heading":"2.21.2 Deleting Files and Directories","text":"can also use R session delete files directories computer. might come handy dealing disposable data files. Use commands responsibility. careful, can easily break operating system computer.can delete files command file.remove:Remember must permission operating system manipulate hard drive delete file. previous chunk code, returned value TRUE tells us operation successful.delete directories elements, use unlink:Notice , unlike file.remove, function unlink returns nothing. needed, can check deletion directory successful command dir.exists:expected, directory found.","code":"\n# create temporary file\nmy_file <- 'data/tempfile.csv'\nwrite.csv(x = data.frame(x=1:10),\n          file = my_file)\n\n# delete it\nfile.remove(my_file)R> [1] TRUE\n# create temp dir\ndir.create('temp')\n\n# create a file inside of temp\nmy_file <- 'temp/tempfile.csv'\nwrite.csv(x = data.frame(x=1:10),\n          file = my_file)\n\nunlink(x = 'temp', recursive = TRUE)\ndir.exists('temp')R> [1] FALSE"},{"path":"basicoperations.html","id":"downloading-files-from-the-internet","chapter":"2 Basic Operations in R","heading":"2.21.3 Downloading Files from the Internet","text":"can also use R download files Internet function download.file. See following example, download Excel spreadsheet Microsoft’s website:Using download.file quite handy working Internet data constantly updated. Just re-download file data beginning script. , continue code reading downloaded file performing analysis.One trick worth knowing can also download files cloud services Dropbox34 Google Drive35. , need send data file large group people update frequently, just pass file link cloud service. way, local change data file computer reflected users file link.\nNeedless say, careful commands\nfile.remove unlink, especially using\nrecursion (recursive = TRUE). One simple mistake \nimportant parts hard drive can erased, leaving computer\ninoperable. aware R permanently deletes files\nmove trash folder. Therefore, deleting\ndirectories unlink, unable recover \nfiles easily.\n","code":"\n# set link\nlink_dl <- 'go.microsoft.com/fwlink/?LinkID=521962'\nlocal_file <- 'data/temp_file.xlsx' # name of local file\n\ndownload.file(url = link_dl,\n              destfile = local_file)"},{"path":"basicoperations.html","id":"using-temporary-files-and-directories","chapter":"2 Basic Operations in R","heading":"2.21.4 Using Temporary Files and Directories","text":"interesting aspect R every new session linked temporary folder within computer. folder used store disposable files folders generated R. location directory available tempdir:name temporary directory, case `Rtmp8E', randomly defined start every new R session. computer rebooted, temporary directories deleted.dynamic found file names. want use temporary random name reason, use tempfile:can also set extension name:practical case using temporary files folders, let’s download Excel worksheet Microsoft temporary folder read content first five rows:example Excel file contains sales report company. notice imported file becomes dataframe R session, table like object rows columns.using tempfile, need delete (worry) downloaded file removed computer’s hard disk system rebooted.","code":"\nwindows_tempdir <- tempdir()\nprint(windows_tempdir)R> C:\\Users\\NAME\\AppData\\Local\\Temp\\Rtmp8E\nwindows_tempfile <- tempfile(pattern = 'temp_',\n                             fileext = '.xlsx')\nmessage(windows_tempfile)R> C:\\Users\\NAME\\AppData\\Local\\Temp\\Rtmp8E\\temp_4365730565.xlsx\nwindows_tempfile <- tempfile(pattern = 'temp_', \n                             fileext = '.csv')\nmessage(windows_tempfile)R> C:\\Users\\NAME\\AppData\\Local\\Temp\\Rtmp8E\\temp_43664e87729.csv\n# set link\nlink_dl <- 'go.microsoft.com/fwlink/?LinkID=521962'\nlocal_file <- tempfile(fileext = '.xlsx', tmpdir = tempdir())\n\ndownload.file(url = link_dl,\n              destfile = local_file)\n\ndf_msft <- readxl::read_excel(local_file)\n\nprint(head(df_msft))R> # A tibble: 6 × 16\nR>   Segment    Country Product Disco…¹ Units…² Manuf…³ Sale …⁴\nR>   <chr>      <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>\nR> 1 Government Canada  Carret… None      1618.       3      20\nR> 2 Government Germany Carret… None      1321        3      20\nR> 3 Midmarket  France  Carret… None      2178        3      15\nR> 4 Midmarket  Germany Carret… None       888        3      15\nR> 5 Midmarket  Mexico  Carret… None      2470        3      15\nR> 6 Government Germany Carret… None      1513        3     350\nR> # … with 9 more variables: `Gross Sales` <dbl>,\nR> #   Discounts <dbl>, Sales <dbl>, COGS <dbl>, Profit <dbl>,\nR> #   Date <dttm>, `Month Number` <dbl>, `Month Name` <chr>,\nR> #   Year <chr>, and abbreviated variable names\nR> #   ¹​`Discount Band`, ²​`Units Sold`,\nR> #   ³​`Manufacturing Price`, ⁴​`Sale Price`"},{"path":"basicoperations.html","id":"exercises-basic-exercises","chapter":"2 Basic Operations in R","heading":"2.22 Exercises","text":"","code":""},{"path":"basicoperations.html","id":"q.1-1","chapter":"2 Basic Operations in R","heading":"Q.1","text":"RStudio, create new script save personal folder. Now, write R commands script define two objects: one holding sequence 1 100 text name (ex. ‘Richard’). Execute whole script keyboard shortcuts.\n\nSolution\n\n","code":"x <- 1:100\ny <- 'Richard'\n\n# press control+shift+enter to run this chunk of code in RStudio"},{"path":"basicoperations.html","id":"q.2-1","chapter":"2 Basic Operations in R","heading":"Q.2","text":"previously created script, use function message display following phrase R’s prompt:\"name ....\".\n\nSolution\n\n","code":"x <- 36\ny <- 'Richard'\n\nmessage(paste0('My name is ', y))\n\n# press control+shift+enter to run this chunk of code in RStudio"},{"path":"basicoperations.html","id":"q.3-1","chapter":"2 Basic Operations in R","heading":"Q.3","text":"Within script, show current working directory (see function getwd, print(getwd())). Now, change working directory Desktop (Desktop) show following message prompt screen: 'desktop address ....'. Tip: use abuse RStudio’s autocomplete tool quickly find desktop folder.\n\nSolution\n\n","code":"current_dir <- getwd()\nprint(current_dir)\n\nnew_dir <- '~/Desktop/' # this is probably C:/Users/USERNAME/Desktop for Windows\nsetwd(new_dir)\n\ncat(paste0('My desktop address is ', getwd()))"},{"path":"basicoperations.html","id":"q.4-1","chapter":"2 Basic Operations in R","heading":"Q.4","text":"Use R download compressed zip file book material, available link36. Save file temporary session folder (see function tempfile).\n\nSolution\n\n","code":"local_file <- tempfile(fileext = '.zip')\nmy_url <- 'https://www.msperlin.com/files/afedr-files/afedR-code-and-data.zip'\n\ndownload.file(url = my_url, \n              destfile = local_file)\n\n# check if exists\nfile.exists(local_file)"},{"path":"basicoperations.html","id":"q.5-1","chapter":"2 Basic Operations in R","heading":"Q.5","text":"Use unzip function unzip downloaded file previous question directory called'afedR-files' inside “Desktop” folder. many files available resulting folder? Tip: use recursive = TRUE argument list.files also search available subdirectories.\n\nSolution\n\n","code":"my_folder <- '~/Desktop/adfeR-Files' # this is probably C:/Users/USERNAME/Desktop for Windows\nunzip(local_file, exdir = my_folder) # local_file comes from previous exercise\n\nfiles <- list.files(my_folder, \n                    full.names = TRUE, \n                    recursive = TRUE)\n\nn_files <- length(files)\n\nmessage(paste0('There are ', n_files, ' files available at folder \"', my_folder, '\".'))"},{"path":"basicoperations.html","id":"q.6-1","chapter":"2 Basic Operations in R","heading":"Q.6","text":"Every time user installs R package, package files stored locally specific directory hard disk. Using command Sys.getenv('R_LIBS_USER') list.dirs, list directories folder. many packages available folder computer?\n\nSolution\n\n","code":"r_pkg_folder <- Sys.getenv('R_LIBS_USER')\n\navailable_dirs <- list.dirs(r_pkg_folder, recursive = FALSE)\nn_dirs <- length(available_dirs)\n\ncat(paste0('There are ', n_dirs, ' folders available  at \"', r_pkg_folder, '\".'))"},{"path":"basicoperations.html","id":"q.7-1","chapter":"2 Basic Operations in R","heading":"Q.7","text":"topic previous exercise, list files subfolders directory containing files different packages (see command Sys.getenv('R_LIBS_USER')). average, many files needed package?\n\nSolution\n\n","code":"r_pkg_folder <- Sys.getenv ('R_LIBS_USER')\n\npkg_files <- list.files(r_pkg_folder, recursive = TRUE)\nmy_dirs <- list.dirs(r_pkg_folder, recursive = FALSE)\n\nn_files <- length(pkg_files)\nn_dirs <- length(my_dirs)\n\nmy_msg <- paste0('We have ', length(pkg_files), ' ',\n                 'files for ', length(my_dirs), ' packages. \\n',\n                 'On average, there are ', n_files/n_dirs, ' files per directory.')\n\nmessage(my_msg)"},{"path":"basicoperations.html","id":"q.8-1","chapter":"2 Basic Operations in R","heading":"Q.8","text":"Use install.packages function install BatchGetSymbols package computer. installation, use function BatchGetSymbols download price data IBM stock last 15 days. Tips: 1) use function Sys.Date() find current date Sys.Date()- 15 calculate date located 15 days past; 2) note output BatchGetSymbols list – special type object – price data located second element list.\n\nSolution\n\n","code":"if (!require(BatchGetSymbols)) install.packages('BatchGetSymbols')\n\nl_out <- BatchGetSymbols(tickers = 'IBM',\n                         first.date = Sys.Date() - 15,\n                         last.date = Sys.Date())\n\ndf_prices <- l_out[[2]]\nstr(df_prices)"},{"path":"basicoperations.html","id":"q.9-1","chapter":"2 Basic Operations in R","heading":"Q.9","text":"cranlogs package allows access downloads statistics CRAN packages. installing cranlogs computer, use cranlogs::cran_top_downloads function check 10 installed packages global community last month. package comes first? Tip: Set cran_top_downloads function input = 'last-month'. Also, aware answer may got depends day R code executed.\n\nSolution\n\n","code":"#if (!require(cranlogs)) install.packages('cranlogs')\n\npkgs <- cranlogs::cran_top_downloads(when = 'last-month')\n\nmy_sol <- pkgs$package[1]"},{"path":"basicoperations.html","id":"q.10-1","chapter":"2 Basic Operations in R","heading":"Q.10","text":"Using devtools package, install development version ggplot2 package, available Hadley Hickman repository. Load package using library create simple figure code qplot(y = rnorm(10), x = 1:10).\n\nSolution\n\n","code":"if (!require(devtools)) install.packages(\"devtools\")\n\ndevtools::install_github('hadley/ggplot2')\n\nlibrary(ggplot2)\nqplot(y = rnorm (10), x = 1:10)"},{"path":"basicoperations.html","id":"q.11","chapter":"2 Basic Operations in R","heading":"Q.11","text":"Using programming ability check computer folder, “Documents” directory (shortcut = ~), largest number files. Display five folders largest number files R’s prompt.\n\nSolution\n\n","code":"doc_folder <- '~' # 'C:/Users/USERNAME/Documents' in Windows\n                  # '/home/USERNAME/  in Linux\n\nfct_count_files <- function(dir_in) {\n  n_files <- list.files(dir_in, recursive = FALSE)\n  return(length(n_files))\n}\n\n# be aware this might take lots of time...\nall_folders <- fs::dir_ls(path = doc_folder, \n                          type = 'directory', \n                          recurse = TRUE)\n\ncounter_files <- sapply(all_folders, fct_count_files)\nsorted <- sort(counter_files, decreasing = TRUE)\n\nmessage('\\nThe five folders with highest number of files are:\\n\\n')\nmessage(paste0(names(sorted[1:5]), collapse = '\\n'))"},{"path":"research-scripts.html","id":"research-scripts","chapter":"3 Writing Research Scripts","heading":"3 Writing Research Scripts","text":"far learned use R basic tasks interacting computer, creating simple vectors downloading files internet. Although, import large volume tables R analyze , need discuss structure research script , specifically, organize work efficiently. organized code facilitates sharing future use. research code becomes larger complex, organization necessity. chapter, suggest way organize files folders. , recommend follow guidelines – least version – every project work .","code":""},{"path":"research-scripts.html","id":"stages-of-research","chapter":"3 Writing Research Scripts","heading":"3.1 Stages of Research","text":"Unlike software designs, every research script clear consecutive steps achieve goal.Importation data: Raw (original) data imported local file internet. stage, manual data manipulation, renaming columns names .csv file, happen. raw data imported “”. Save required reproducible manipulation next stage.Importation data: Raw (original) data imported local file internet. stage, manual data manipulation, renaming columns names .csv file, happen. raw data imported “”. Save required reproducible manipulation next stage.Cleaning structuring data: raw data imported previous step cleaned structured according need research. Abnormal records errors observations can removed treated. structure data can also manipulated, binding different datasets adding variables interest. Preferably, end stage, couple final datasets used next stage.Cleaning structuring data: raw data imported previous step cleaned structured according need research. Abnormal records errors observations can removed treated. structure data can also manipulated, binding different datasets adding variables interest. Preferably, end stage, couple final datasets used next stage.Visual analysis hypothesis testing: cleansing structuring data, work continues implementing visual analysis hypothesis testing. , can create graphical representations data audience use statistical tools, econometric models, test particular hypothesis. heart research stage likely take development time.Visual analysis hypothesis testing: cleansing structuring data, work continues implementing visual analysis hypothesis testing. , can create graphical representations data audience use statistical tools, econometric models, test particular hypothesis. heart research stage likely take development time.Reporting results: final stage research script reporting results. Likely, exporting selected tables figures R text processing software Latex, Writer (LibreOffice) Word (Microsoft).Reporting results: final stage research script reporting results. Likely, exporting selected tables figures R text processing software Latex, Writer (LibreOffice) Word (Microsoft).mentioned steps can structured single .R script several separate files. Using multiple files preferable first steps research demand significant processing time. example, importing organizing large volume database, worth trouble separate code different files. easier find bugs maintain code. script one job, well.practical example analysis large dataset financial transactions. Importing cleansing data takes plenty computer time. smart organization insert primary data procedures .R file save final objects stage external file. local archive serves bridge next step, hypothesis testing, previously created file clean data imported. Every time change made hypothesis testing script, unnecessary rebuild whole dataset. simple organization files saves lot time. underlying logic simple, isolate parts script demand computational time – less development –, connect rest code using external data files.working multiple files, one suggestion create naming structure informs steps research intuitive way. example name data importing code 01-Import--clean-data.R, modeling code 02-build-report-models.R . practical effect using number first letter filenames clarifies order execution. can also create master script called 0-run--.R 0-main.R runs (source) scripts. , every time make update original data, can simply run 0-run--.R new results, without need run script individually.","code":""},{"path":"research-scripts.html","id":"directories","chapter":"3 Writing Research Scripts","heading":"3.2 Folder Structure","text":"proper folder structure also benefits reproducibility organization research. simple scripts, small database low number procedures, unnecessary spend much time thinking organization files, just place files directory. certainly case code book. complex programs, several stages data cleansing, hypothesis testing, several sources data, organizing file structure essential. suggestion effective folder structure create single directory , within , create subdirectories input output element. example, can create subdirectory called data, original data stored, directory fig tables, figures tables final results exported. using many custom-written functions scripts, can also create directory called R-Fcts save files function definitions location. root directory, find main research scripts . example file structure summarizes idea : research code also self-contained, files available within sub-folder root directory. using many different R packages, advisable add comment first lines 0-run--.R indicates packages necessary run code. friendly way inform adding commented line installs required packages, #install.packages('pkg1', 'pkg2', ...). , someone receives code first time, () needs uncomment line execute . External dependencies steps installation also informed.benefits directory format follows. need share code researchers, simply compress directory single file send recipient. decompressing file, structure folder immediately informs user change original data, order execution scripts root folder, outputs saved. benefit goes reuse code future, say three years now. working smarter, productive, spending less time repetitive unnecessary steps.example content file 0-run--.R :first time use functions graphics.sapply. first one simply closes windows used display figure. research script, sometimes may many graphical windows opened wise close . Command sapply apply function, case source, series elements. , practical effect files located folder R-Fcts extension .R executed. chapter 8 learn sapply variants.Notice , assuming packages installed, extra step needed run code successfully another computer. also automate copy figure table files used report file.copy. , can create link text figure file. example, LaTeX, can include figure file command \\includegraphics{file_name_here}. can also create direct link figure file research folder, although method recommended since creates external dependency written report. Either way, whenever main code executed, research figures automatically updated text. needed, can also produce table files different formats using packages xtable (Dahl et al. 2019) texreg (Leifeld 2022). go deeper subject chapter 12.Another way setting directories research script using RStudio project. , open RStudio go File, New Project, New Directory, choose folder project name. RStudio create file .RProj extension chosen directory. Every time want work project, just open project file RStudio.benefit approach unnecessary change directory code. project automatically changes location .RProj file. Various information saved, including history files edited, history project commands, among things. Besides , custom options project can also made. ’s worth noting .RProj file pure text editable. can open text editor operating system see stores many startup options R.","code":"/Capital Markets and Inflation/\n    /data/\n        stock_indices.csv\n        inflation_data.csv\n    /figs/\n        SP500_and_inflation.png\n    /tables/\n        Table1_descriptive_table.tex\n        Table2_model_results.tex\n    /R-Fcts/\n        fct_models.R\n        fct_clean_data.R\n    0-run-it-all.R\n    1-import-and-clean-data.R\n    2-run-research.R\n# clean up workspace\nrm(list=ls())\n\n# close all figure windows created with x11()\ngraphics.off()\n\n# load packages\nlibrary(pkg1)\nlibrary(pkg2)\nlibrary(pkg3)\n\n# change directory\nmy_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)\nsetwd(my_dir)\n\n# list  functions in 'R-Fcts'\nmy_R_files <- list.files(path='R-Fcts',\n                         pattern = '*.R',\n                         full.names=TRUE)\n\n# Load all functions in R\nsapply(my_R_files, source)\n\n# Import data script\nsource('01-import-and-clean-data.R')\n\n# run models and report results\nsource('02-run-research.R')"},{"path":"research-scripts.html","id":"important-aspects-of-a-research-script","chapter":"3 Writing Research Scripts","heading":"3.3 Important Aspects of a Research Script","text":"section ’ll making suggestions can conduct research R. Making clear, personal positions experience researcher teacher. Many points raised specific academic environment can easily extended practice research outside universities. short, suggestions wish knew first started career.Firstly, know data!. can’t stress enough important! first instinct every passionate data analyst encountering new set tables immediately import R perform analysis. However, certain level caution needed. Every time come across new set data, ask much really know data:data collected? purpose?available data compare data used studies?possibility bias within data collection?Furthermore, need remember ultimate goal research communication. Thus, likely report results people informed opinion subject, including sources individualities different datasets. worst case scenario research effort three six months coding writing nullified simple lapse data checking. Unfortunately, uncommon.example, consider case analyzing long term performance companies retail business. , gather recent list available companies download financial records revenue, profit adjusted stock price past twenty years. Well, problem selection companies. taking available today, missed companies went bankrupt 20 year period. looking companies stayed active whole period, indirectly selected profitable presented good performance. well-known effect called survival bias. right way research gathering list companies retail business twenty years ago keep track went bankrupt stayed alive.message clear. cautious data using. raw tables stand base research. small detail goes unnoticed can invalidate whole work. lucky database accompanied written manual, break last detail. information clear, shy sending questions responsible party. Likewise, inevitable operational bias dataset, open transparent .second point code. finish reading book, knowledge conduct research R. computer powerful ally making research ideas come true, matter gigantic may . However, great power comes great responsibility. Likewise, need aware single misplace line code can easily bias invalidate research.Remember analyzing data profession reputation valuable asset. confidence produced code, publish communicate results. code entirely responsibility one else’s. Check many times necessary. Always skeptical work:descriptive statistics variables faithfully report database?relationship variables can verified descriptive table?main findings research make sense current literature subject? , explain ?possible bug code produced results?’m constantly surprised many studies submitted respected periodicals can denied publication based simple analysis descriptive table. Basic errors variable calculations can easily spotted trained eye. process continuous evaluation research make stronger researcher also serve practice peer evaluation, much used academic research. enough confidence report results, test code extensively. already done still confident, identify lines code doubts seek help colleague advisor, one. latter strong ally can help dealing problems /already .research work , extent, based existing work. Today extremely difficult carry ground-breaking research. Knowledge built form blocks, one . always collection literature needs consulted. Particularly case data research. Therefore, always compare results results already presented subject, especially replicated. main results similar found literature, one ask : code error created result?clarify possible results research differ literature, opposite likely. Knowledge demands care code. Bugs code errors quite common, especially early versions scripts. data analyst, important recognize risk manage .","code":""},{"path":"research-scripts.html","id":"exercises-1","chapter":"3 Writing Research Scripts","heading":"3.4 Exercises","text":"","code":""},{"path":"research-scripts.html","id":"q.1-2","chapter":"3 Writing Research Scripts","heading":"Q.1","text":"Imagine survey involving analyzing household budget time. Data available electronic spreadsheets separated month, 10 years. objective research understand possible purchase real state property next five years. Within setup, detail text elements stage study, importing data construction report.\n\nSolution\n\npossible stages study :Importing 01: Import data related income family budget, rate return investments - fixed income stocks - historical property prices desired locations;Importing 01: Import data related income family budget, rate return investments - fixed income stocks - historical property prices desired locations;Cleaning 01: Clean data outliers missing data (NA);Cleaning 01: Clean data outliers missing data (NA);Manipulation 01: Use personal income data find need monthly savings year.Manipulation 01: Use personal income data find need monthly savings year.Manipulation 02: Based historical returns investments inflation property, check many years takes save amount money needed buy property.Manipulation 02: Based historical returns investments inflation property, check many years takes save amount money needed buy property.","code":""},{"path":"research-scripts.html","id":"q.2-2","chapter":"3 Writing Research Scripts","heading":"Q.2","text":"Based study proposed earlier, create directory structure computer accommodate study. Create mock files subdirectory (see directory structure section 3.2). aware can create mock files direction R (see functions cat dir.create).\n\nSolution\n\n","code":"library(fs)\n\n# set temp dir for solving exercise\ntemp_dir <- path(tempdir(), 'Chapter 3 exercise')\n\n# create folder\ndir_create(temp_dir)\n\n# create files\nfile_create(path(temp_dir, '01-import_data.R'))\nfile_create(path(temp_dir, '02-clean_data.R'))\nfile_create(path(temp_dir, '03-build_budget_table.R'))\nfile_create(path(temp_dir, '04-build_investment_realstate_table.R'))\nfile_create(path(temp_dir, '05-build_report.R'))\n\n# create dirs\ndir_create(path(temp_dir, 'data'))\ndir_create(path(temp_dir, 'tabs'))\ndir_create(path(temp_dir, 'figs'))\n\n# fill with files\nfor (i_year in 2009:2019) {\n  file_create(path(temp_dir, 'data', \n                   paste0('annual_budget_', i_year, '.xlsx')) )\n}\n\nfile_create(path(temp_dir, 'data', 'fixed_income_index.csv'))\nfile_create(path(temp_dir, 'data', 'real_state_data.rds'))\nfile_create(path(temp_dir, 'figs', 'Income_and_HousePrices.png'))\nfile_create(path(temp_dir, 'tabs',  'Table_with_Results.xlsx'))\n\ndir_tree(temp_dir)"},{"path":"importing.html","id":"importing","chapter":"4 Importing Data from Local Files","heading":"4 Importing Data from Local Files","text":"Surely, first step script getting data R. chapter, learn import export data available local files computer. Although task particularly difficult, good data analyst understand different characteristics file formats take best advantage every situation. best suited sharing collaboration, others can offer significant boost reading writing speeds.draw comprehensive list file formats importing exporting data, including:Text data comma-separated values (csv);Microsoft Excel (xls, xlsx);R native files (RData, rds);fst format;SQLite;Unstructured text data.first lesson importing data local files location file must explicitly stated code. path file passed function read file. best way work paths use autocomplete feature RStudio (see section 2.20). example full path :Note use forwarding slashes (/) designate file directory. Relative references also work, :, assumed current working folder directory called data , inside , exists file called SP500_Data.csv. file path simply name, my_file <- 'SP500_Data.csv', implicitly assumed file located root working directory. previous chapter, recall can use setwd change working folder work done simply use relative path data file. example:\n, , reinforce use tab \nautocomplete tool RStudio. much easier\npractical find files computer’s hard disk using\ntab navigation copy paste address \nfile explorer. use , open double quotes RStudio, place \nmouse cursor quotes press tab.\nAnother important point data imported exported R object type dataframe. , table contained Excel .csv file become dataframe object R. export data, common format type object. Conveniently, dataframes nothing tables, rows columns.column dataframe class, common numeric (numeric), text (character), factor (factor) date (Date). importing data, imperative column represented correct class. vast amount errors can avoided simply checking column classes dataframe resulting import process. now, need understand basic property dataframes. study details object chapter 6.","code":"\nmy_file <- 'C:/My Research/data/SP500_Data.csv'\nmy_file <- 'data/SP500_Data.csv'\nsetwd('C:/My Research')\nmy_file <- 'data/SP500_Data.csv'"},{"path":"importing.html","id":"csv-files","chapter":"4 Importing Data from Local Files","heading":"4.1 csv files","text":"Consider data file called SP500.csv, available book package. contains daily closing prices SP500 index 2010-01-04 2020-12-30. now use package afedR finding file copying local folder. followed instructions book preface chapter, package afedR already installed. , execute following code: installed package afedR, file SP500.csv data files used book downloaded Github. package also includes functions facilitating reproduction code examples. Command afedR::get_data_file return local path book data file name.Let’s copy SP500.csv “Documents” folder following code using tilde (~) shortcut:Now, first time working .csv files, use file browser (Explorer Windows) open SP500.csv “Documents” folder text editor software Notepad (see figure 4.1). first lines SP500.csv, also called header lines, show column names. Following international standards, rows set using line breaks, columns separated commas (,).\nFigure 4.1: Ibov.csv Notepad\ncontent SP500.csv standard problem importing data R. However, aware always case. , want avoid common issues, suggest use set steps can avoid problems importing data .csv files:Check existence text actual data. standard .csv file contents table , sometimes, find header text details data. R, can control many lines skip csv reading function;Check existence text actual data. standard .csv file contents table , sometimes, find header text details data. R, can control many lines skip csv reading function;Verify existence names columns names readable;Verify existence names columns names readable;Check symbol column separation. Normally comma, never know sure;Check symbol column separation. Normally comma, never know sure;numerical data, verify decimal symbol. R expect dot. necessary, can adjust information CSV reading function.numerical data, verify decimal symbol. R expect dot. necessary, can adjust information CSV reading function.Check encoding text file. Normally one UTF-8, Latin1 (ISO-8859) Windows 1252. broad encoding formats suffice languages. Whenever find strange symbols text columns resulting dataframe, problem due difference encoding. file encoded specific format, R reading different encoding structure. Windows users can check encoding text file opening Notepad++37. information encoding available bottom right corner Notepad++ editor. Linux Mac users can find information advanced text editor software Kate38.Check encoding text file. Normally one UTF-8, Latin1 (ISO-8859) Windows 1252. broad encoding formats suffice languages. Whenever find strange symbols text columns resulting dataframe, problem due difference encoding. file encoded specific format, R reading different encoding structure. Windows users can check encoding text file opening Notepad++37. information encoding available bottom right corner Notepad++ editor. Linux Mac users can find information advanced text editor software Kate38.\nWhenever find unexpected text structure .csv\nfile, use arguments csv reading function import\ninformation correctly. rule thumb, never modify raw\n.csv data manually. far efficient use R code \ndeal different structures .csv files. takes bit \nwork, policy save lot time future , \ncouple months, unlikely remember manually\ncleaned .csv file R script.\n","code":"\n# install devtools dependency\ninstall.packages('devtools')\n\n# install book package\ndevtools::install_github('msperlin/afedR')\nmy_f <- afedR::get_data_file('SP500.csv')\nfile.copy(from = my_f, to = '~' )"},{"path":"importing.html","id":"importing-data","chapter":"4 Importing Data from Local Files","heading":"4.1.1 Importing Data","text":"base package R includes native function called read.csv importing data .csv files. However, prefer tidyverse alternative, readr::read_csv (Wickham, Hester, Bryan 2022), efficient easier work . short, benefit reads data quickly, uses clever rules defining classes imported columns.first package tidyverse use. , necessary install R session. simple way installing tidyverse packages bundle follows:running previous code, tidyverse packages installed computer. finishes, let’s load tidyverse set packages.Back importing data .csv files, load contents file SP500.csv R, use readr::read_csv function. contents imported file becomes dataframe object R. mentioned previous chapter, column dataframe class. can check classes my_df_sp500 using function glimpse package dplyr, also part tidyverse:Note column dates – ref.date – imported Date vector closing prices – price.close – numeric (dbl, double accuracy). exactly expected. Internally, function read_csv identifies columns classes according content.Notice previous code presented message entitled Parsed column specification: .... message shows function sets attributes columns reading first 1000 lines file. Column ref.date imported date column price.close imported double (numeric). can use information code copying text assigning variable. look:exercise, Let’s import data, use character class column date:expected, columns class character. , possible set steps using readr::read_csv , first, read file without arguments read_csv, copy default column classes output message, add argument col_types, re-execute script. handy imported file several columns manually defining column class requires lots typing.also simpler way using classes defined read_csv, just set col_types = cols(). way don’t need manually copy paste message read_csv.Going , read_csv several input options :change format import data, including symbols decimal places encoding (locale option);change column names (argument col_names);skip n lines importation (skip option);custom definition NA values (na option)Now, let’s study abnormal case .csv file. book package file called funky_csv_file.csv :header textual information;file use comma decimal;file text contain Latin characters.first 5 lines files contain following content:ave header text line number 7 columns separated semicolon (“;”). importing data standard (wrong) options, following result:Clearly something went wrong, issue several warning messages. solve , use following code, making sure particularities file handled:Note data now correctly imported, correct column classes. , use alternative function readr::read_delim custom inputs. Package readr also provides several functions specific import situations. read_csv function solve problem reading structured text file, surely another function package .","code":"\ninstall.packages('tidyverse')\n# load library\nlibrary(tidyverse)\n# set file to read\nmy_f <- afedR::get_data_file('SP500.csv')\n\n# read file\nmy_df_sp500 <- read_csv(my_f)R> Rows: 2718 Columns: 2\nR> ── Column specification ────────────────────────────────────\nR> Delimiter: \",\"\nR> dbl  (1): price.close\nR> date (1): ref.date\nR> \nR> ℹ Use `spec()` to retrieve the full column specification for this data.\nR> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n# print it\nprint(head(my_df_sp500))R> # A tibble: 6 × 2\nR>   ref.date   price.close\nR>   <date>           <dbl>\nR> 1 2010-01-04       70045\nR> 2 2010-01-05       70240\nR> 3 2010-01-06       70729\nR> 4 2010-01-07       70451\nR> 5 2010-01-08       70263\nR> 6 2010-01-11       70433\n# Check the content of dataframe\nglimpse(my_df_sp500)R> Rows: 2,718\nR> Columns: 2\nR> $ ref.date    <date> 2010-01-04, 2010-01-05, 2010-01-06, 2…\nR> $ price.close <dbl> 70045, 70240, 70729, 70451, 70263, 704…\n# set cols from import message\nmy_cols <- cols(ref.date = col_date(),\n                price.close = col_character() ) \n\n# read file with readr::read_csv\nmy_df_sp500 <- read_csv(my_f, col_types = my_cols)\n# set cols from import message\nmy_cols <- cols(ref.date = col_character(),\n                price.close = col_character() ) \n\n# read file with readr::read_csv\nmy_df_sp500 <- read_csv(my_f, col_types = my_cols)\n\n# glimpse the dataframe\nglimpse(my_df_sp500)R> Rows: 2,718\nR> Columns: 2\nR> $ ref.date    <chr> \"2010-01-04\", \"2010-01-05\", \"2010-01-0…\nR> $ price.close <chr> \"70045\", \"70240\", \"70729\", \"70451\", \"7…\n# read file with readr::read_csv\nmy_df_sp500 <- read_csv(my_f, \n                        col_types = cols())\n\n# glimpse the dataframe\nglimpse(my_df_sp500)R> Rows: 2,718\nR> Columns: 2\nR> $ ref.date    <date> 2010-01-04, 2010-01-05, 2010-01-06, 2…\nR> $ price.close <dbl> 70045, 70240, 70729, 70451, 70263, 704…R> Example of csv file with alternative format:\nR> - columns separated by \";\"\nR> - decimal as \",\"\nR> \nR> Data compiled in 2021-02-26\nmy_f <- afedR::get_data_file('funky_csv_file.csv')\n\ndf_funky <- read_csv(my_f, \n                     col_types = cols())\n\nglimpse(df_funky)R> Rows: 2\nR> Columns: 1\nR> $ `Example of csv file with alternative format:` <chr> \"- …\ndf_not_funky <- read_delim(\n        file = my_f, \n        skip = 7, # how many lines do skip\n        delim = ';', # column separator\n        col_types = cols(), # column types\n        locale = locale(decimal_mark = ',')# locale\n)\n\nglimpse(df_not_funky)R> Rows: 100\nR> Columns: 6\nR> $ COD.UF     <dbl> 35, 21, 35, 35, 41, 31, 31, 21, 29, 26,…\nR> $ COD        <dbl> 3546306, 2103109, 3514700, 3538105, 411…\nR> $ NOME       <chr> \"Santa Cruz das Palmeiras\", \"Cedral\", \"…\nR> $ state      <chr> \"São Paulo\", \"Maranhão\", \"São Paulo\", \"…\nR> $ SIGLA      <chr> \" SP\", \" MA\", \" SP\", \" SP\", \" PR\", \" MG…\nR> $ number_col <dbl> 1.902087, 69.808750, 81.509312, 56.8400…"},{"path":"importing.html","id":"exporting-data","chapter":"4 Importing Data from Local Files","heading":"4.1.2 Exporting Data","text":"write .csv file, use readr::write_csv function. First, create new dataframe random data: now use write_csv save new .csv file:previous example, save object my_df file path data/temp.csv. can read back check contents using read_csv :can see, data imported file identical one created previous code chunk.","code":"\n# set the number of rows\nN <- 100\n\n# set dataframe\nmy_df <- data.frame(y = runif(N), \n                    z = rep('a',N))\n\n# print it\nprint(head(my_df))R>           y z\nR> 1 0.2086880 a\nR> 2 0.3237866 a\nR> 3 0.3906633 a\nR> 4 0.4064216 a\nR> 5 0.5066105 a\nR> 6 0.8073321 a\n# set file out\nf_out <- 'data/temp.csv'\n\n# write to files\nwrite_csv(x = my_df,  \n          file = f_out)\n# read it\nmy_df_imported <- read_csv(f_out)R> Rows: 100 Columns: 2\nR> ── Column specification ────────────────────────────────────\nR> Delimiter: \",\"\nR> chr (1): z\nR> dbl (1): y\nR> \nR> ℹ Use `spec()` to retrieve the full column specification for this data.\nR> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n# print first five rows\nprint(head(my_df_imported))R> # A tibble: 6 × 2\nR>       y z    \nR>   <dbl> <chr>\nR> 1 0.209 a    \nR> 2 0.324 a    \nR> 3 0.391 a    \nR> 4 0.406 a    \nR> 5 0.507 a    \nR> 6 0.807 a"},{"path":"importing.html","id":"excel-files-xls-and-xlsx","chapter":"4 Importing Data from Local Files","heading":"4.2 Excel Files (xls and xlsx)","text":"Although efficient portable data storage format, Excel popular software due spreadsheet-like capacities. uncommon data stored distributed format, especially finance industry.downside using Excel files storing data low portability longer time required read write . may problem small tables, handling large volume data, using Excel files can frustrating. can, avoid use Excel files work cycle.","code":""},{"path":"importing.html","id":"importing-data-1","chapter":"4 Importing Data from Local Files","heading":"4.2.1 Importing Data","text":"R native function importing Excel files; therefore, must install use packages perform operation. several good options including XLConnect (Mirai Solutions GmbH 2022), xlsx (Dragulescu Arendt 2020), readxl (Wickham Bryan 2022) tidyxl (Garmonsway 2022). Despite similar goals, package peculiarities. reading Excel files important work, strongly advise study package. example, package tidyxl specially designed read unstructured Excel files, desired information contained tabular format. Package XLConnect allows user open live connection , R, control Excel file, making possible export send data, format cells, .section, give priority package readxl, one straightforward packages use. also require installation external software Java. Let’s start example. Consider file called SP500-Excel.xlsx contains SP500 data. can import information file using function read_excel readxl: can see, one benefit using Excel files column’s classes directly inherited. classes correct Excel file, automatically correct R. case, date column file SP500_Excel.xlsx correctly set dttm object, special type DateTime class. Likewise, even Excel file used commas decimals, import process still succeed conversion handled internally.","code":"\nlibrary(readxl)\n\n# set excel file\nmy_f <- afedR::get_data_file('SP500_Excel.xlsx')\n\n# read excel file \nmy_df <- read_excel(my_f, sheet = 'Sheet1')\n\n# print classes\nprint(sapply(my_df, class))R> $ref.date\nR> [1] \"POSIXct\" \"POSIXt\" \nR> \nR> $price.close\nR> [1] \"numeric\"\n# print with head (first five rows)\nprint(head(my_df))R> # A tibble: 6 × 2\nR>   ref.date            price.close\nR>   <dttm>                    <dbl>\nR> 1 2010-01-04 00:00:00       1133.\nR> 2 2010-01-05 00:00:00       1137.\nR> 3 2010-01-06 00:00:00       1137.\nR> 4 2010-01-07 00:00:00       1142.\nR> 5 2010-01-08 00:00:00       1145.\nR> 6 2010-01-11 00:00:00       1147."},{"path":"importing.html","id":"exporting-data-1","chapter":"4 Importing Data from Local Files","heading":"4.2.2 Exporting Data","text":"Exporting dataframe Excel file also easy. , native function R performs procedure. can, however, use packages xlsx writexl. requisite using xlsx installation Java JDK operating system. Windows users, visit Java site39 install option Windows -line (64 bits). , install xlsx command install.packages('xlsx') try loading library(xlsx). got error message Java , try rebooting system.example xlsx usage given next: want save several dataframes several worksheets Excel file, must use input option append=TRUE call write.xlsx. Otherwise, function create new file call erase previous content. See following example, export two dataframes two different sheets Excel file: executing code, can open excel files check contents see mirror artificial data.package writexl, innovation Java installation needed. Writing speed also significantly increased. See example next. order compare writing performance, let’s calculate difference time xlsx writexl:now show results:can see, even low-volume data, dataframe 2500 rows 2 columns, run-time difference significant. working large spreadsheets, use packages readxl writexl reading writing Excel files strongly recommended.","code":"\nlibrary(xlsx)\n\n# create dataframe\nN <- 50\nmy_df <- data.frame(y = seq(1,N), z = rep('a',N))\n\n# set excel file\nf_out <- 'data/temp.xlsx'\n\n# write to excel\nwrite.xlsx(x = my_df, file = f_out, sheetName = \"my df\")\n# create two dataframes\nN <- 25\nmy_df_A <- data.frame(y = seq(1, N), \n                      z = rep('a', N))\n\nmy_df_B <- data.frame(z = rep('b', N))\n\n# set file out\nf_out <- 'data/temp.xlsx'\n\n# write in different sheets\nwrite.xlsx(x = my_df_A, \n           file = f_out, \n           sheetName = \"my df A\")\n\nwrite.xlsx(x = my_df_B, \n           file = f_out, \n           sheetName = \"my df B\", \n           append = TRUE )\nlibrary(writexl)\n# set number of rows\nN <- 25\n\n# create random dfs\nmy_df_A <- data.frame(y = seq(1, N),\n                      z = rep('a', N))\n\nwrite_xlsx(x = my_df_A,\n           path = f_out)\nlibrary(writexl)\nlibrary(readxl)\nlibrary(xlsx)\n\n# set number of rows\nN <- 2500\n\n# create random dfs\nmy_df_A <- data.frame(y = seq(1,N),\n                      z = rep('a',N))\n\n# set files\nmy_file_1 <- 'data/temp_writexl.xlsx'\nmy_file_2 <- 'data/temp_xlsx.xlsx'\n\n# test export\ntime_write_writexl <- system.time(write_xlsx(x = my_df_A,\n                                             path = my_file_1))\n\ntime_write_xlsx <- system.time(write.xlsx(x = my_df_A,\n                                          file = my_file_2))\n\n# test read\ntime_read_readxl <- system.time(read_xlsx(path = my_file_1 ))\ntime_read_xlsx <- system.time(read.xlsx(file = my_file_2,\n                                        sheetIndex = 1 ))\n# results\nmy_formats <- c('xlsx', 'readxl')\nresults_read <- c(time_read_xlsx[3], time_read_readxl[3])\nresults_write<- c(time_write_xlsx[3], time_write_writexl[3])\n\n# print text\nmy_text <- paste0('\\nTime to WRITE dataframe with ',\n                  my_formats, ': ',\n                  format(results_write, digits = 4),\n                  ' seconds', collapse = '')\nmessage(my_text)R> \nR> Time to WRITE dataframe with xlsx: 1.461 seconds\nR> Time to WRITE dataframe with readxl: 0.010 seconds\nmy_text <- paste0('\\nTime to READ dataframe with ',\n                  my_formats, ': ',\n                  format(results_read, digits = 4),\n                  ' seconds', collapse = '')\nmessage(my_text)R> \nR> Time to READ dataframe with xlsx: 2.301 seconds\nR> Time to READ dataframe with readxl: 0.007 seconds"},{"path":"importing.html","id":"rdata-and-rds-files","chapter":"4 Importing Data from Local Files","heading":"4.3 RData and rds Files","text":"R offers native formats write objects local file. great benefit using native formats, RData, rds, saved file compact access fast. downside low portability, .e., ’s difficult use files software. difference RData rds first can save many R objects single file, latter one. , however, hard restriction rds format can incorporate several objects single one using list, special type object. practice, rds file can store many objects needed.","code":""},{"path":"importing.html","id":"importing-data-2","chapter":"4 Importing Data from Local Files","heading":"4.3.1 Importing Data","text":"create new .RData file, use save function. See following example, create .RData file content, clear R’s memory, load previously created file: can verify existence file file.exists function: expected, file temp.RData available.Importing data .rds files similar. use function readr::read_rds:Comparing code using .RData .rds files, note .rds format allows explicit definition output object. contents my_file read_rds saved my_y. use load function RData files, name output directly. particularly inconvenient need modify name imported object.\nsuggestion, give preference .rds format, \npractical, resulting cleaner code. difference speed\none minimal. benefit importing multiple\nobjects RData format file becomes irrelevant\nusing list objects, can incorporate \nobjects content.\n","code":"\n# set a object\nmy_x <- 1:100\n\n# set name of RData file\nmy_file <- 'data/temp.RData'\n\n# save it\nsave(list = c('my_x'), file = my_file)\n# check if file exists\nfile.exists(my_file)R> [1] TRUE\n# set file path\nmy_file <- 'data/temp.rds'\n\n# load content into workspace\nmy_y <- read_rds(file = my_file)"},{"path":"importing.html","id":"exporting-data-2","chapter":"4 Importing Data from Local Files","heading":"4.3.2 Exporting Data","text":"can create new RData file command save:can check file exists function file.exists:result TRUE expected..rds files, save function readr::write_rds:Command identical tests objects equal. , expected, find result TRUE.","code":"\n# set vars\nmy_x <- 1:100\nmy_y <- 1:100\n\n# write to RData\nmy_file <- 'data/temp.RData'\nsave(list = c('my_x', 'my_y'),\n     file = my_file)\nfile.exists(my_file)R> [1] TRUE\n# set data and file\nmy_x <- 1:100\nmy_file <- 'data/temp.rds'\n\n# save as .rds\nwrite_rds(x = my_x,\n          file = my_file)\n\n# read it\nmy_x2 <- read_rds(file = my_file)\n\n# test equality\nprint(identical(my_x, my_x2))R> [1] TRUE"},{"path":"importing.html","id":"fst-files","chapter":"4 Importing Data from Local Files","heading":"4.4 fst files","text":"fst format40 specially designed enable quick writing reading time tabular data, minimal disk space. Using format particularly beneficial working large databases powerful computers. trick use computer cores import export data, formats use one. computer several cores, gain speed impressive, soon learn. ","code":""},{"path":"importing.html","id":"importing-data-3","chapter":"4 Importing Data from Local Files","heading":"4.4.1 Importing Data","text":"Using fst file format similar previous cases. use function read_fst package fst (Klik 2022) read files:cases, data file temp.fst available workspace. ","code":"\nlibrary(fst)\n\n# set file location\nmy_file <- afedR::get_data_file('temp.fst')\n\n# read fst file\nmy_df <- read_fst(my_file)\n\n# check contents\nglimpse(my_df)R> Rows: 1,000\nR> Columns: 1\nR> $ x <dbl> 0.70968891, 0.83903044, 0.70026554, 0.78120026, …"},{"path":"importing.html","id":"exporting-data-3","chapter":"4 Importing Data from Local Files","heading":"4.4.2 Exporting Data","text":"use function fst::write_fst save dataframes fst format: ","code":"\nlibrary(fst)\n\n# create dataframe\nN <- 1000\nmy_file <- 'data/temp.fst'\nmy_df <- data.frame(x = runif(N))\n\n# write to fst\nwrite_fst(x = my_df, path = my_file)"},{"path":"importing.html","id":"timing-the-fst-format","chapter":"4 Importing Data from Local Files","heading":"4.4.3 Timing the fst format","text":"test potential fst format, now time read write time fst rds large table: 5.000.000 rows 2 columns. also report size resulting file.now check results:difference impressive! fst reads writes faster also results smaller file sizes. aware, however, result found 16 core computer book compiled. may able replicate result modest machine.\nDue use computer’s cores, fst format\nhighly recommended working large data powerful\ncomputer. resulting files smaller, writing\nreading process considerably faster.\n","code":"\nlibrary(fst)\n\n# set number of rows\nN <- 5000000\n\n# create random dfs\nmy_df <- data.frame(y = seq(1,N),\n                    z = rep('a',N))\n\n# set files\nmy_file_1 <- 'data/temp_rds.rds'\nmy_file_2 <- 'data/temp_fst.fst'\n\n# test write\ntime_write_rds <- system.time(write_rds(my_df, my_file_1 ))\ntime_write_fst <- system.time(write_fst(my_df, my_file_2 ))\n\n# test read\ntime_read_rds <- system.time(readRDS(my_file_1))\ntime_read_fst <- system.time(read_fst(my_file_2))\n\n# test file size (MB)\nfile_size_rds <- file.size(my_file_1)/1000000\nfile_size_fst <- file.size(my_file_2)/1000000\n# results\nmy_formats <- c('.rds', '.fst')\nresults_read <- c(time_read_rds[3], time_read_fst[3])\nresults_write<- c(time_write_rds[3], time_write_fst[3])\nresults_file_size <- c(file_size_rds , file_size_fst)\n\n# print text\nmy_text <- paste0('\\nTime to WRITE dataframe with ',\n                  my_formats, ': ',\n                  results_write, ' seconds', collapse = '')\nmessage(my_text)R> \nR> Time to WRITE dataframe with .rds: 1.08799999999997 seconds\nR> Time to WRITE dataframe with .fst: 0.0940000000000509 seconds\nmy_text <- paste0('\\nTime to READ dataframe with ',\n                  my_formats, ': ',\n                  results_read, ' seconds', collapse = '')\nmessage(my_text)R> \nR> Time to READ dataframe with .rds: 1.07600000000002 seconds\nR> Time to READ dataframe with .fst: 0.0930000000000746 seconds\nmy_text <- paste0('\\nResulting FILE SIZE for ',\n                  my_formats, ': ',\n                  results_file_size, ' MBs', collapse = '')\nmessage(my_text)R> \nR> Resulting FILE SIZE for .rds: 65.01011 MBs\nR> Resulting FILE SIZE for .fst: 14.791938 MBs"},{"path":"importing.html","id":"sqlite-files","chapter":"4 Importing Data from Local Files","heading":"4.5 SQLite Files","text":"use .csv .rds files storing objects limits size files increases. waiting long time read dataframe file interested small portion large table, look alternatives. Likewise, working network computers institution many people using tables, makes sense keep distribute information central server. way, every user can access information, concurrently.brings us topic database software. specific programs usually work query language, called SQL (Structured Query Language). allows user read portions data even manipulate efficiently. Many options database software integrate nicely R. list includes MySQL, SQLite MariaDB. , provide quick tutorial topic using SQLite, easiest one work. moving examples, need understand use database software. First, R connect database return connection object. Based connection, send queries importing data using SQL language. main advantage can large database , let’s say, 10 GB load small portion R. operation also quick, allowing efficient access available tables.","code":""},{"path":"importing.html","id":"importing-data-4","chapter":"4 Importing Data from Local Files","heading":"4.5.1 Importing Data","text":"Assuming existence SQLite file computer, can import tables package RSQLite (Müller et al. 2022):worked. dataframe table MyTable1 exactly expected. Another example using SQLite actual SQL statements. Notice, previous code, used function dbReadTable get contents rows table MyTable1. Now, let’s use SQL command get MyTable2 rows G column equal .also worked, expected.simple example, can see easy create connection database, retrieve tables, disconnect. work large tables, , opinion, database occupies 4 GB computer memory, worth moving proper database software. ’ll able retrieve data faster, without need loading whole database computer’s memory. server available workplace, strongly advise learning connect use SQL language advantage.","code":"\nlibrary(RSQLite)\n\n# set name of SQLITE file\nf_sqlite <- afedR::get_data_file('SQLite_db.SQLITE')\n\n# open connection\nmy_con <- dbConnect(drv = SQLite(), f_sqlite)\n\n# read table\nmy_df <- dbReadTable(conn = my_con,\n                     name = 'MyTable1') # name of table in sqlite\n\n# print with str\nglimpse(my_df)R> Rows: 1,000,000\nR> Columns: 2\nR> $ x <dbl> 0.007504194, 0.439465174, 0.178387480, 0.9857759…\nR> $ G <chr> \"B\", \"B\", \"B\", \"B\", \"A\", \"B\", \"A\", \"B\", \"B\", \"B\"…\n# set sql statement\nmy_SQL_statement <- \"select * from myTable2 where G='A'\"\n\n# get query\nmy_df_A <- dbGetQuery(conn = my_con, \n                      statement = my_SQL_statement)\n\n# disconnect from db\ndbDisconnect(my_con)\n\n# print with str\nprint(str(my_df_A))R> 'data.frame':    499522 obs. of  2 variables:\nR>  $ x: num  0.0637 0.1982 0.2894 0.7389 0.0669 ...\nR>  $ G: chr  \"A\" \"A\" \"A\" \"A\" ...\nR> NULL"},{"path":"importing.html","id":"exporting-data-4","chapter":"4 Importing Data from Local Files","heading":"4.5.2 Exporting Data","text":"example exporting data SQLite file, let’s first create SQLite database. , set two large dataframes random data save SQLite file using package RSQLite. TRUE output dbWriteTable indicates everything went well. connection opened using function dbConnect, dataframes written SQLite file, called SQLite_db.SQLITE. Unlike database software, SQLite stores data configurations single file, without need formal server. Also, notice disconnected database using function dbDisconnect. ","code":"\nlibrary(RSQLite)\n\n# set number of rows in df\nN = 10^6 \n\n# create simulated dataframe\nmy_large_df_1 <- data.frame(x=runif(N), \n                            G= sample(c('A','B'),\n                                      size = N,\n                                      replace = TRUE))\n\nmy_large_df_2 <- data.frame(x=runif(N), \n                            G = sample(c('A','B'),\n                                       size = N,\n                                       replace = TRUE))\n\n# set name of SQLITE file\nf_sqlite <- 'data/SQLite_db.SQLITE'\n\n# open connection\nmy_con <- dbConnect(drv = SQLite(), f_sqlite)\n\n# write df to sqlite\ndbWriteTable(conn = my_con, name = 'MyTable1', \n             value = my_large_df_1)\ndbWriteTable(conn = my_con, name = 'MyTable2', \n             value = my_large_df_2)\n\n# disconnect\ndbDisconnect(my_con)"},{"path":"importing.html","id":"unstructured-data-and-other-formats","chapter":"4 Importing Data from Local Files","heading":"4.6 Unstructured Data and Other Formats","text":"previous packages functions sufficient getting work done. Nevertheless, worth mentioning R can also import data formats SPSS, Stata, Matlab, among many others. case, suggest thorough study foreign package (R Core Team 2022).Another example case importing data unstructured text files. Reading raw text files last resort data importation. none previous packages can read data, must parsed line line. Let’s explore problem.","code":""},{"path":"importing.html","id":"importing-data-5","chapter":"4 Importing Data from Local Files","heading":"4.6.1 Importing Data","text":"can read contents text file function readr::read_lines: example, file pride_and_prejudice.txt contains whole content book Pride Prejudice Jane Austen, freely available Gutenberg41 project. imported entire content file character vector named my_txt. element my_txt line raw text file. Based , can calculate many things number lines book number times name 'Bennet', one protagonists, appears text:example, used sapply. case, allowed us use function element my_txt. searched counted number times word “Bennet” found. Notice simply change name_to_search name wanted .","code":"\n# set file to read\nmy_f <- afedR::get_data_file('pride_and_prejudice.txt')\n\n# read file line by line\nmy_txt <- read_lines(my_f)\n\n# print 50 characters of first fifteen lines\nprint(str_sub(string = my_txt[1:15], \n              start = 1, \n              end = 50))R>  [1] \"The Project Gutenberg EBook of Pride and Prejudice\"\nR>  [2] \"\"                                                  \nR>  [3] \"This eBook is for the use of anyone anywhere at no\"\nR>  [4] \"almost no restrictions whatsoever.  You may copy i\"\nR>  [5] \"re-use it under the terms of the Project Gutenberg\"\nR>  [6] \"with this eBook or online at www.gutenberg.org\"    \nR>  [7] \"\"                                                  \nR>  [8] \"\"                                                  \nR>  [9] \"Title: Pride and Prejudice\"                        \nR> [10] \"\"                                                  \nR> [11] \"Author: Jane Austen\"                               \nR> [12] \"\"                                                  \nR> [13] \"Posting Date: August 26, 2008 [EBook #1342]\"       \nR> [14] \"Release Date: June, 1998\"                          \nR> [15] \"Last Updated: March 10, 2018\"\n# count number of lines\nn_lines <- length(my_txt)\n\n# set target text\nname_to_search <- 'Bennet'\n  \n# set function for counting words\nfct_count_bennet <- function(str_in, target_text) {\n  \n  require(stringr)\n  \n\n  n_words <- length(str_locate_all(string = str_in, \n                                   pattern = target_text)[[1]])\n  \n  return(n_words)\n}\n\n# use fct for all lines of Pride and Prejudice\nn_times <- sum(sapply(X = my_txt, \n                      FUN = fct_count_bennet, \n                      target_text = name_to_search))\n\n# print results\nmy_msg <- paste0('The number of lines found in the file is ', \n                 n_lines, '.\\n',\n                 'The word \"', name_to_search, '\" appears ', \n                 n_times, ' in the book.')\nmessage(my_msg)R> The number of lines found in the file is 13427.\nR> The word \"Bennet\" appears 664 in the book."},{"path":"importing.html","id":"exporting-data-5","chapter":"4 Importing Data from Local Files","heading":"4.6.2 Exporting Data","text":"typical case exporting unstructured text saving log record procedure. quite simple. Using function readr::write_lines, use input file set name local file x actual textual content. previous example, created simple text object saved data/temp.txt. can check result readr::read_lines function:can see, worked expected.","code":"\n# set file\nmy_f <- 'data/temp.txt'\n\n# set some string\nmy_text <- paste0('Today is ', Sys.Date(), '\\n', \n                  'Tomorrow is ', Sys.Date()+1)\n\n# save string to file\nwrite_lines(x = my_text, file = my_f, append = FALSE)\nprint(read_lines(my_f))R> [1] \"Today is 2022-11-23\"    \"Tomorrow is 2022-11-24\""},{"path":"importing.html","id":"how-to-select-a-format","chapter":"4 Importing Data from Local Files","heading":"4.7 How to Select a Format","text":"choice file format important topic might actually time-saver work. decision, must consider three points:speed reading writing operations;size resulting file;compatibility software operating systems.Usually, use csv files easily satisfies requirements. csv file nothing text file can opened, viewed, imported statistical software. makes easy share people. Also, size csv files usually restrictive , needed, can compressed using zip function. reasons, use csv files importing exporting data preferable vast majority situations. However, cases execution speed import export operations matter. don’t mind giving portability, rds format great choice projects. good hardware execution speed rds still great, best alternative fst format, uses cores import export data. Finally, can, important suggestion avoid Excel format costs.","code":""},{"path":"importing.html","id":"exerc-importacao-exportacao","chapter":"4 Importing Data from Local Files","heading":"4.8 Exercises","text":"","code":""},{"path":"importing.html","id":"q.1-3","chapter":"4 Importing Data from Local Files","heading":"Q.1","text":"Create dataframe following code:Export resulting dataframe five formats: csv, rds, xlsx, fst. formats took space computer’s memory? Tip: file.size calculates size files within R.\n\nSolution\n\n","code":"library(dplyr)\n\nmy_N <- 10000\nmy_df <- tibble(x = 1:my_N,\n                y = runif(my_N))library(tidyverse)\n\ndo_tests <- function(my_N) {\n  \n  my_df <- tibble(x = 1:my_N,\n                  y = runif(my_N))\n  \n  # csv\n  my_f <- tempfile(pattern = 'temp', fileext = '.csv')\n  time.csv <- system.time({\n    write_csv(my_df, my_f)\n  })['elapsed']\n  size.csv <- file.size(my_f)/1000000\n  \n  # rds\n  my_f <- tempfile(pattern = 'temp', fileext = '.rds')\n  time.rds <- system.time({\n    write_rds(my_df, my_f)\n  })['elapsed']\n  \n  size.rds <- file.size(my_f)/1000000\n  \n  # xlsx\n  my_f <- tempfile(pattern = 'temp', fileext = '.xlsx')\n  library(writexl) \n  time.xlsx <- system.time({\n    write_xlsx(my_df, my_f)\n  })['elapsed']\n  \n  size.xlsx <- file.size(my_f)/1000000\n  \n  # fst\n  library(fst)\n  my_f <- tempfile(pattern = 'temp', fileext = '.fst')\n  time.fst <- system.time({\n    write_fst(my_df, my_f)\n  })['elapsed']\n  \n  size.fst <- file.size(my_f)/1000000\n  \n  print(c(size.csv, size.rds, size.xlsx, size.fst))\n  \n  print(c(time.csv, time.rds, time.xlsx, time.fst))\n  \n  tab <- tibble(Result = c('csv', 'rds', 'xlsx', 'fst'), \n                Size =  c(size.csv, size.rds, size.xlsx, size.fst),\n                Time = c(time.csv, time.rds, time.xlsx, time.fst))\n  \n  return(tab)\n}\n\nmy_N <- 10000\n\ntab <- do_tests(my_N)\nprint(tab)\n\nmy_msg <- paste0('The format with largest disk space for N = ', my_N, ' is ', \n                 tab$Result[which.max(tab$Size)], '.')\nmessage(my_msg)"},{"path":"importing.html","id":"q.2-3","chapter":"4 Importing Data from Local Files","heading":"Q.2","text":"Improve previous code measuring execution time saving data different formats. file format resulted fastest execution exporting data? Tip: use system.time function thetictoc package calculate execution times.\n\nSolution\n\n","code":"# do notice that this chunk requires the execution of previous solution\nmy_msg <- paste0('The format with least execution time for N = ', my_N, ' is ', \n                 tab$Result[which.min(tab$Time)], '.')\nmessage(my_msg)"},{"path":"importing.html","id":"q.3-2","chapter":"4 Importing Data from Local Files","heading":"Q.3","text":"previous code, reset value my_N 1000000. change answers last two questions?\n\nSolution\n\n","code":"# do notice that this chunk requires the execution of previous solution\nmy_N <- 1000000\n\ntab <- do_tests(my_N)\nprint(tab)\n\nmy_msg <- paste0('The format with largest disk space for N = ', my_N, ' is ', \n                 tab$Result[which.max(tab$Size)], '.')\n\nmessage(my_msg)\n\nmy_msg <- paste0('The format with least execution time for N = ', my_N, ' is ', \n                 tab$Result[which.min(tab$Time)], '.')\nmessage(my_msg)"},{"path":"importing.html","id":"q.4-2","chapter":"4 Importing Data from Local Files","heading":"Q.4","text":"Use afedR::get_data_file function access SP500.csv file book’s data repository. Import contents file R function readr::read_csv. many lines resulting dataframe?\n\nSolution\n\n","code":"library(tidyverse)\n\nmy_f <- afedR::get_data_file('SP500.csv')\n\ndf_SP500 <- read_csv(my_f, \n                     col_types = cols())\n\nmy_msg <- paste0('There are ', nrow(df_SP500), ' rows and ', \n                 ncol(df_SP500), ' columns in file ', basename(my_f))\nmessage(my_msg)\n\nmy_sol <- nrow(df_SP500)"},{"path":"importing.html","id":"q.5-2","chapter":"4 Importing Data from Local Files","heading":"Q.5","text":"Within link https://eeecon.uibk.ac./~zeileis/grunfeld/Grunfeld.csv/ find .csv file Grunfeld data. particularly famous table due use reference data econometric models. Using readr::read_csv function, read file using direct link input read_csv. many columns find resulting dataframe?\n\nSolution\n\n","code":"library(tidyverse)\n\nmy_url <- 'https://eeecon.uibk.ac.at/~zeileis/grunfeld/Grunfeld.csv'\n\ndf_grunfeld <- read_csv(my_url, col_types = cols())\n\nmy_sol <- ncol(df_grunfeld)"},{"path":"importing.html","id":"q.6-2","chapter":"4 Importing Data from Local Files","heading":"Q.6","text":"Use function afedR::get_data_file function access example_tsv.csv file book’s data repository. Note columns data separated tab symbol ('\\t'), usual comma. reading readr::read_delim manual, import information file R session. many rows resulting dataframe contain?\n\nSolution\n\n","code":"library(tidyverse)\n\nmy_f <- afedR::get_data_file('example_tsv.csv')\n\ndf_tsv <- read_delim(my_f, delim = '\\t', col_types = cols())\n\nmy_sol <- nrow(df_tsv)\n\n#check_answers(my_answers)"},{"path":"importing.html","id":"q.7-2","chapter":"4 Importing Data from Local Files","heading":"Q.7","text":"book package data file called 'funky_csv2.csv'. particularly bizarre format data. Open text editor try understand columns separated symbol decimals. , study inputs function read.table import table R session. add number rows number columns imported table, result?\n\nSolution\n\n","code":"library(tidyverse)\n\nmy_f <- afedR::get_data_file('funky_csv2.csv')\n\ndf_funky <- read.table(file = my_f, \n           dec = '?', \n           skip = 7, \n           sep = '|', \n           header = TRUE)\n\nmy_sol <- nrow(df_funky) + ncol(df_funky)"},{"path":"importing-internet.html","id":"importing-internet","chapter":"5 Importing Data from the Internet","heading":"5 Importing Data from the Internet","text":"One great advantages R large amount data can imported using internet specialized packages. means can avoid tedious soul-crushing work manual data collection. also becomes easy share reproducible code, anyone can feasibly download tables single line code.chapter, describe give examples important reliable packages data importation fields finance economics. small, comprehensive list packages cover large range research topics. list includes:GetQuandlData (M. S. Perlin 2019)\nImports economical financial data Quandl platform.\nBatchGetSymbols (M. Perlin 2022)\nImports adjusted unadjusted stock price data Yahoo Finance.\nsimfinR (M. S. Perlin 2021)\nImports financial statements adjusted stock prices SimFin project42.\ntidyquant (Dancho Vaughan 2022)\nImports several financial information stock prices fundamental data.\nRbitcoin (Gorecki 2016)\nImports data cryptocurrencies.\n","code":""},{"path":"importing-internet.html","id":"quandl","chapter":"5 Importing Data from the Internet","heading":"5.1 Package GetQuandlData","text":"Quandl established comprehensive platform provides access series free paid data. Several central banks research institutions provide free economic financial information platform. strongly recommend browsing available tables Quandl website43. likely ’ll find datasets ’re familiar . R, package Quandl (Raymond McTaggart, Gergely Daroczi, Clement Leung 2021) official extension offered company available CRAN. However, package issues (see blog post here44) uncomfortable work tidyverse collection packages. alternative package GetQuandlData (M. S. Perlin 2019) , humble biased opinion author, better alternative.first mandatory step using GetQuandlData register user Quandl website. Soon , go account settings click API KEY. page show code, Asv8Ac7zuZzJSCGxynfG. Copy clipboard (control + c) , R, define character object containing copied content follows:API key unique user, one presented work computer. ’ll need get API key run examples book. finding setting key, go Quandl’s website use search box look symbol time series interest. example, use data gold prices London Market, Quandl code equivalent 'LBMA/GOLD'. notice structure Quandl code always , name main database first, name table second, separated forward slash (/).Now, API key Quandl symbol, use function get_Quandl_series download data 1980-01-01 2019-01-01: Notice set name time series inline id_in = c('GOLD' = 'LBMA/GOLD'). name element becomes value column series_name df_quandl. time series, stacked table, different series_name value.Worth knowing Quandl API options available inputs order, collapse transform. using Quandl important work, strongly recommend reading available parameters querying data45. Several choices data transformations can passed function get_Quandl_series.inspection check, let’s plot prices Gold USD time.Overall, gold prices fairly stable 1980 2000, reaching spike 2010. One possible explanation higher demand safer assets, gold, 2009 financial crisis. However, gold never efficient long term investment. show , let’s calculate compound annual return 1980-01-02 2022-11-22:find result Gold prices USD compounded rate equal 2.69% per year. impressive investment result means. comparison, annual inflation US period 3.12%. means buying gold 1980, investor received less inflation nominal return.","code":"\n# set FAKE api key to quandl\nmy_api_key <- 'Asv8Ac7zuZzJSCGxynfG'\nlibrary(GetQuandlData)\nlibrary(tidyverse)\n\n# set symbol and dates\nmy_symbol <- c('GOLD' = 'LBMA/GOLD')\nfirst_date <- '1980-01-01'\nlast_date <- '2021-01-01'\n\n# get data!\ndf_quandl <- get_Quandl_series(id_in = my_symbol,\n                               api_key = my_api_key, \n                               first_date = first_date,\n                               last_date = last_date, \n                               do_cache = FALSE)\n\n# check it\nglimpse(df_quandl)R> Rows: 10,840\nR> Columns: 9\nR> $ `USD (AM)`  <chr> \"1747\", \"1739.65\", \"1764.75\", \"1764.55…\nR> $ `USD (PM)`  <chr> \"1742.95\", \"1740.4\", \"1751.6\", \"1758.6…\nR> $ `GBP (AM)`  <chr> \"1473.59\", \"1474.01\", \"1481.15\", \"1484…\nR> $ `GBP (PM)`  <chr> \"1467.74\", \"1471.86\", \"1473.27\", \"1491…\nR> $ `EURO (AM)` <chr> \"1698.78\", \"1699.64\", \"1702.63\", \"1701…\nR> $ `EURO (PM)` <chr> \"1696.76\", \"1696.02\", \"1694.85\", \"1701…\nR> $ series_name <chr> \"GOLD\", \"GOLD\", \"GOLD\", \"GOLD\", \"GOLD\"…\nR> $ ref_date    <date> 2022-11-22, 2022-11-21, 2022-11-18, 2…\nR> $ id_quandl   <chr> \"LBMA/GOLD\", \"LBMA/GOLD\", \"LBMA/GOLD\",…\n# sort the rows\ndf_quandl <- df_quandl %>%\n  mutate(USD = as.numeric(`USD (AM)`)) %>%\n  arrange(ref_date)\n\ntotal_ret <- last(df_quandl$USD)/first(df_quandl$USD) - 1\ntotal_years <- as.numeric(max(df_quandl$ref_date) - \n                            min(df_quandl$ref_date) )/365\n\ncomp_ret_per_year <- (1 + total_ret)^(1/total_years) - 1\n\nprint(comp_ret_per_year)R> [1] 0.0269065"},{"path":"importing-internet.html","id":"fetching-many-time-series","chapter":"5 Importing Data from the Internet","heading":"5.1.0.1 Fetching many time series","text":"asking multiple time series Quandl, package GetQuandlData stacks data single dataframe, making easier work tidyverse tools. example, let’s look Quandl database RATEINF, contains time series inflation rates around world. First, need see available datasets:Column name contains description tables. dig deeper, ’ll find following names:want 'Inflation YOY - *' datasets, contain year--year inflation rates different countries. Let’s filter dataframe keep series yearly inflation, select four countries:Now grab data using get_Quandl_series:, finally, create elegant plot see behavior inflation rates selected countries:can see, GetQuandlData output formatted work well tidyverse tools. resulting data shows correlation inflation rates, specially Euro Area USA.","code":"\nlibrary(GetQuandlData)\nlibrary(tidyverse)\n\n# databse to get info\ndb_id <- 'RATEINF'\n\n# get info \ndf_db <- get_database_info(db_id, my_api_key)\n\nglimpse(df_db)R> Rows: 26\nR> Columns: 8\nR> $ code         <chr> \"CPI_ARG\", \"CPI_AUS\", \"CPI_CAN\", \"CPI…\nR> $ name         <chr> \"Consumer Price Index - Argentina\", \"…\nR> $ description  <chr> \"Please visit <a href=http://www.rate…\nR> $ refreshed_at <dttm> 2020-10-10 02:03:32, 2022-11-19 02:0…\nR> $ from_date    <date> 1988-01-31, 1948-09-30, 1989-01-31, …\nR> $ to_date      <date> 2013-12-31, 2022-09-30, 2022-10-31, …\nR> $ quandl_code  <chr> \"RATEINF/CPI_ARG\", \"RATEINF/CPI_AUS\",…\nR> $ quandl_db    <chr> \"RATEINF\", \"RATEINF\", \"RATEINF\", \"RAT…\nprint(unique(df_db$name))R>  [1] \"Consumer Price Index - Argentina\"  \nR>  [2] \"Consumer Price Index - Australia\"  \nR>  [3] \"Consumer Price Index - Canada\"     \nR>  [4] \"Consumer Price Index - Switzerland\"\nR>  [5] \"Consumer Price Index - Germany\"    \nR>  [6] \"Consumer Price Index - Euro Area\"  \nR>  [7] \"Consumer Price Index - France\"     \nR>  [8] \"Consumer Price Index - UK\"         \nR>  [9] \"Consumer Price Index - Italy\"      \nR> [10] \"Consumer Price Index - Japan\"      \nR> [11] \"Consumer Price Index - New Zealand\"\nR> [12] \"Consumer Price Index - Russia\"     \nR> [13] \"Consumer Price Index - USA\"        \nR> [14] \"Inflation YOY - Argentina\"         \nR> [15] \"Inflation YOY - Australia\"         \nR> [16] \"Inflation YOY - Canada\"            \nR> [17] \"Inflation YOY - Switzerland\"       \nR> [18] \"Inflation YOY - Germany\"           \nR> [19] \"Inflation YOY - Euro Area\"         \nR> [20] \"Inflation YOY - France\"            \nR> [21] \"Inflation YOY - UK\"                \nR> [22] \"Inflation YOY - Italy\"             \nR> [23] \"Inflation YOY - Japan\"             \nR> [24] \"Inflation YOY - New Zealand\"       \nR> [25] \"Inflation YOY - Russia\"            \nR> [26] \"Inflation YOY - USA\"\nselected_series <- c('Inflation YOY - USA',\n                     'Inflation YOY - Canada',\n                     'Inflation YOY - Euro Area',\n                     'Inflation YOY - Australia')\n\n# filter selected countries\nidx <- df_db$name %in% selected_series\ndf_db <- df_db[idx, ]\nmy_id <- df_db$quandl_code\nnames(my_id) <- df_db$name\nfirst_date <- '2010-01-01'\nlast_date <- Sys.Date()\n\ndf_inflation <- get_Quandl_series(id_in = my_id, \n                                  api_key = my_api_key,\n                                  first_date = first_date,\n                                  last_date = last_date)\n\nglimpse(df_inflation)R> Rows: 513\nR> Columns: 4\nR> $ series_name <chr> \"Inflation YOY - Australia\", \"Inflatio…\nR> $ ref_date    <date> 2022-09-30, 2022-06-30, 2022-03-31, 2…\nR> $ value       <dbl> 7.3, 6.1, 5.1, 3.5, 3.0, 3.8, 1.1, 0.9…\nR> $ id_quandl   <chr> \"RATEINF/INFLATION_AUS\", \"RATEINF/INFL…"},{"path":"importing-internet.html","id":"package-batchgetsymbols","chapter":"5 Importing Data from the Internet","heading":"5.2 Package BatchGetSymbols","text":"Package BatchGetSymbols (M. Perlin 2022) downloading stock price data Yahoo Finance. Unlike packages, BatchGetSymbols focuses large batch downloads structured clean/tidy data. main features : Cleanliness organization: financial data different tickers kept dataframe format facilitates analysis using packages tidyverse.Control import errors: download errors registered output. particular stock available data Yahoo finance, skipped stock data still downloaded returned user;Comparison dates benchmark: Individual asset data compared data available benchmark, usually market index. number missing dates exceeds certain limit set user, stock removed final dataframe. Moreover, can set minimal accepted volume data stock, removing stock cases low number rows.Caching system: default, imported data locally saved using clever caching system. Whenever user repeats data query, cache system used. desired data available cache, function download missing data. significantly increases data access speed minimizing use Internet connection;\nSince version 2.6 (2020-11-22) BatchGetSymbols, \ndefault cache folder located temporary directory R\nsession. Thus, cache persistent current user\nsession. change motivated structural breaks Yahoo\nFinance data, past data recorded cache longer\ncorrect due corporate events splits dividends. user,\nhowever, can change cache folder using cache.folder\nentry.\nAccess tickers market indices: package includes functions download composition stock indexes. makes easy import data large number stocks. can, example, download prices stocks constituents SP500 index.Use multiple cores: user downloading large batch stock data, option parallel execution available. practical effect , depending number cores computer, significant decrease total download time.Flexible output format: package also offers functions modify format data. need wide format dataframe, price matrix tickers columns prices rows, need call function BatchGetSymbols::reshape.wide. Likewise, changing frequency data also possible. can, example, download weekly monthly prices.example usage, let’s download prices four stocks previous five years using function BatchGetSymbols. choose companies: Microsoft (MSFT), Google (GOOGL), JP Morgan (JPM) General Electric (GE). call function BatchGetSymbols, set arguments thresh.bad.data = 0.95 bench_ticker = '^GSPC'. choices make sure returned data least 95% valid prices compared data SP500 index (ticker '^GSPC').output BatchGetSymbols object type list, yet presented book. now, need know list container objects. study class chapter 6.\nNote entries \nBatchGetSymbols::BatchGetSymbols function use “.” \nnames, thresh.bad.data, \nbench.ticker, book written using \nunderscore (_), asthresh_bad_data, \nbench_ticker. difference can result problems , \nabsence attention, user substitutes one . \nrule thumb, prioritize use underscores object names.\nUnfortunately functions written past still old code\nstructure , order harm old users, names inputs\nkept.\nBack example, object l_out two elements, table called df.control another table called df.tickers. can access element using operator $, l_out$df.control. first table, df.control, contains result download process. previously mentioned, package downloads data also keeps track possible errors missing values. Let’s check content table.Column threshold.decision df.control shows tickers valid, got 1258 valid observations (rows) company.actual financial data, contained element df.tickers l_out. Let’s look:expected, find information stock prices traded volume. Notice also includes column ticker, contains symbols stocks. tidy format, stock chunk data pilled top . Later, chapter 8, use column split data build summary tables. inspect data, let’s look prices ggplot2.see General Eletric (GE) stock kind investors. Someone bought stock peak mid-2016 found current value less half. Now, comes GOOGL, JPM MSFT, see upward increase stock prices. profitable competitive companies sectors surprisingly, stock prices surged time.Now, let’s look example large batch download stock prices. , find group tickers stocks currently belong SP500 index function BatchGetSymbols::GetSP500Stocks. , simply pass vector tickers BatchGetSymbols. also use parallel computing speed importation:now check resulting data:get table 1027664 rows l_out$df.tickers. Looking deeper l_out$df.control find , 503 tickers, 454 passed consistency check. fairly sized table. Notice easy get large volume data Yahoo Finance R session.\nPlease aware Yahoo Finance (YF) data adjusted\nprices single stocks trustworthy , compare\ndata vendors, ’ll easily find large differences. issue\nYahoo Finance adjust dividends, stock\nsplits. means , looking price series long period\ntime, downward bias overall return. rule thumb,\nformal research, never use individual stock data Yahoo\nFinance, specially stock return important \nresearch. exception financial indexes, SP500,\nYahoo Finance data quite reliable since indexes undergo\nadjustments individual stocks.\n","code":"\nlibrary(BatchGetSymbols)\n\n# set tickers\ntickers <- c('MSFT','GOOGL','JPM','GE')\n\n# set dates\nfirst_date <- Sys.Date()-5*365\nlast_date <- Sys.Date()\nthresh_bad_data <- 0.95   # sets percent threshold for bad data\nbench_ticker <- '^GSPC'   # set benchmark as ibovespa\n\nl_out <- BatchGetSymbols(tickers = tickers,\n                         first.date = first_date,\n                         last.date = last_date,\n                         bench.ticker = bench_ticker,\n                         thresh.bad.data = thresh_bad_data)\n# print result of download process\nprint(l_out$df.control)R> # A tibble: 4 × 6\nR>   ticker src   download.status total.obs perc.benc…¹ thres…²\nR>   <chr>  <chr> <chr>               <int>       <dbl> <chr>  \nR> 1 MSFT   yahoo OK                   1258           1 KEEP   \nR> 2 GOOGL  yahoo OK                   1258           1 KEEP   \nR> 3 JPM    yahoo OK                   1258           1 KEEP   \nR> 4 GE     yahoo OK                   1258           1 KEEP   \nR> # … with abbreviated variable names ¹​perc.benchmark.dates,\nR> #   ²​threshold.decision\n# print df.tickers\nglimpse(l_out$df.tickers)R> Rows: 5,032\nR> Columns: 10\nR> $ price.open          <dbl> 83.01, 83.31, 84.07, 84.71, 83…\nR> $ price.high          <dbl> 83.43, 83.98, 85.06, 84.92, 84…\nR> $ price.low           <dbl> 82.78, 83.30, 84.02, 83.18, 83…\nR> $ price.close         <dbl> 83.26, 83.87, 84.88, 83.34, 84…\nR> $ volume              <dbl> 7425600, 18265200, 21926000, 2…\nR> $ price.adjusted      <dbl> 78.40719, 78.98163, 79.93274, …\nR> $ ref.date            <date> 2017-11-24, 2017-11-27, 2017-…\nR> $ ticker              <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\"…\nR> $ ret.adjusted.prices <dbl> NA, 0.0073263691, 0.0120421802…\nR> $ ret.closing.prices  <dbl> NA, 0.0073264591, 0.0120423747…\nlibrary(BatchGetSymbols)\n\n# set tickers\ndf_SP500 <- GetSP500Stocks()\nsp500_tickers <- df_SP500$Tickers\n\n# set dates\nfirst_date <- '2010-01-01'\nlast_date <- '2021-01-01'\nthresh_bad_data <- 0.95   # sets percent threshold for bad data\nbench_ticker <- '^GSPC'   # set benchmark as ibovespa\n\n# set number of cores (half of available cores)\nfuture::plan(future::multisession, \n             workers = floor(parallel::detectCores()/2))\n\nl_out <- BatchGetSymbols(tickers = sp500_tickers,\n                         first.date = first_date,\n                         last.date = last_date,\n                         bench.ticker = bench_ticker,\n                         thresh.bad.data = thresh_bad_data,\n                         do.parallel = TRUE)\nglimpse(l_out$df.tickers)R> Rows: 1,027,664\nR> Columns: 10\nR> $ price.open          <dbl> 83.09, 82.80, 83.88, 83.32, 83…\nR> $ price.high          <dbl> 83.45, 83.23, 84.60, 83.76, 84…\nR> $ price.low           <dbl> 82.67, 81.70, 83.51, 82.12, 83…\nR> $ price.close         <dbl> 83.02, 82.50, 83.67, 83.73, 84…\nR> $ volume              <dbl> 3043700, 2847000, 5268500, 447…\nR> $ price.adjusted      <dbl> 64.09430, 63.69284, 64.59611, …\nR> $ ref.date            <date> 2010-01-04, 2010-01-05, 2010-…\nR> $ ticker              <chr> \"MMM\", \"MMM\", \"MMM\", \"MMM\", \"M…\nR> $ ret.adjusted.prices <dbl> NA, -0.0062636148, 0.014181783…\nR> $ ret.closing.prices  <dbl> NA, -0.0062635150, 0.014181793…"},{"path":"importing-internet.html","id":"package-simfinr","chapter":"5 Importing Data from the Internet","heading":"5.3 Package simfinR","text":"SimFin46 special project making financial data accessible possible. works gathering data different stock exchanges financial reports, cleaning verifying official records, distributing tables API (access point interface.). website:core goal make financial data freely available possible believe right tools investing/research shouldn’t privilege can afford spend thousands dollars per year data.platform free, daily limit 2000 api calls. bad suffice users. need calls, premium version47 just 10 euros month, fraction data vendors usually request.Package simfinR facilitates importing data SimFin API. First, makes sure requested data exists calls api. usual, api queries saved locally using package memoise. means second time ask particular data company/year, function load local copy, call web api, helping stay API limits.","code":""},{"path":"importing-internet.html","id":"example-01---apple-inc-annual-profit","chapter":"5 Importing Data from the Internet","heading":"5.3.1 Example 01 - Apple Inc Annual Profit","text":"first step using simfinR registering SimFin website. done, click Data Access48. now show API key 'rluwSlN304NpyJeBjlxZPspfBBhfJR4o'. Save R object later use.need aware API key my_api_key fake work . need get execute examples.API key hand, second step find numerical id company interest. , can find available companies respective ids ticker simfinR_get_available_companies.Digging deeper dataframe, find numerical id Apple 111052. Let’s use download annual financial information since 2009.now plot results Net Income (profit/loss) years:bad! Apple well years. can also grab data quarters get detailed information:plot results:Nice impressive profit record. first quarter (Q1) seems present best performance, probably due effect Christmas retail business. Apple sells quality products premium price. surprinsingly, many people want new iphone Christmas translates sells months december, registered first quarter year.","code":"\nmy_api_key <- 'rluwSlN304NpyJeBjlxZPspfBBhfJR4o'\nlibrary(simfinR)\nlibrary(tidyverse)\n\n# get info\ndf_info_companies <- simfinR_get_available_companies(my_api_key)\n\n# check it\nglimpse(df_info_companies)R> Rows: 3,410\nR> Columns: 3\nR> $ simId  <int> 171401, 901704, 1243193, 901866, 994625, 45…\nR> $ ticker <chr> \"ZYXI\", \"ZYNE\", \"ZY\", \"ZVO\", \"ZUO\", \"ZUMZ\",…\nR> $ name   <chr> \"ZYNEX INC\", \"Zynerba Pharmaceuticals, Inc.…\nid_companies <- 111052 # id of APPLE INC\ntype_statements <- 'pl' # profit/loss\nperiods = 'FY' # final year\nyears = 2009:2018\n\ndf_fin_FY <- simfinR_get_fin_statements(\n  id_companies,\n  type_statements = type_statements,\n  periods = periods,\n  years = years,\n  api_key = my_api_key)\n\nglimpse(df_fin_FY)R> Rows: 580\nR> Columns: 13\nR> $ company_name   <chr> \"APPLE INC\", \"APPLE INC\", \"APPLE IN…\nR> $ company_sector <chr> \"Computer Hardware\", \"Computer Hard…\nR> $ type_statement <fct> pl, pl, pl, pl, pl, pl, pl, pl, pl,…\nR> $ period         <fct> FY, FY, FY, FY, FY, FY, FY, FY, FY,…\nR> $ year           <int> 2009, 2009, 2009, 2009, 2009, 2009,…\nR> $ ref_date       <date> 2009-12-31, 2009-12-31, 2009-12-31…\nR> $ acc_name       <chr> \"Revenue\", \"Sales & Services Revenu…\nR> $ acc_value      <dbl> 42905000000, NA, NA, NA, -256830000…\nR> $ tid            <chr> \"1\", \"3\", \"5\", \"6\", \"2\", \"7\", \"8\", …\nR> $ uid            <chr> \"1\", \"0\", \"0\", \"0\", \"2\", \"0\", \"0\", …\nR> $ parent_tid     <chr> \"4\", \"1\", \"1\", \"1\", \"4\", \"2\", \"2\", …\nR> $ display_level  <chr> \"0\", \"1\", \"1\", \"1\", \"0\", \"1\", \"1\", …\nR> $ check_possible <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, …\ntype_statements <- 'pl' # profit/loss\nperiods = c('Q1', 'Q2', 'Q3', 'Q4') # final year\nyears = 2009:2018\n\ndf_fin_quarters <- simfinR_get_fin_statements(\n  id_companies,\n  type_statements = type_statements,\n  periods = periods,\n  years = years,\n  api_key = my_api_key)\n\nglimpse(df_fin_quarters)R> Rows: 2,320\nR> Columns: 13\nR> $ company_name   <chr> \"APPLE INC\", \"APPLE INC\", \"APPLE IN…\nR> $ company_sector <chr> \"Computer Hardware\", \"Computer Hard…\nR> $ type_statement <fct> pl, pl, pl, pl, pl, pl, pl, pl, pl,…\nR> $ period         <fct> Q1, Q1, Q1, Q1, Q1, Q1, Q1, Q1, Q1,…\nR> $ year           <int> 2009, 2009, 2009, 2009, 2009, 2009,…\nR> $ ref_date       <date> 2009-03-31, 2009-03-31, 2009-03-31…\nR> $ acc_name       <chr> \"Revenue\", \"Sales & Services Revenu…\nR> $ acc_value      <dbl> 11880000000, NA, NA, NA, -737300000…\nR> $ tid            <chr> \"1\", \"3\", \"5\", \"6\", \"2\", \"7\", \"8\", …\nR> $ uid            <chr> \"1\", \"0\", \"0\", \"0\", \"2\", \"0\", \"0\", …\nR> $ parent_tid     <chr> \"4\", \"1\", \"1\", \"1\", \"4\", \"2\", \"2\", …\nR> $ display_level  <chr> \"0\", \"1\", \"1\", \"1\", \"0\", \"1\", \"1\", …\nR> $ check_possible <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, …"},{"path":"importing-internet.html","id":"example-02---quarterly-net-profit-of-many-companies","chapter":"5 Importing Data from the Internet","heading":"5.3.2 Example 02 - Quarterly Net Profit of Many Companies","text":"Package simfinR can also fetch information many companies single call. Let’s run another example selecting four random companies creating previous graph:can see, fairly straighforward download financial data multiple companies using simfinR.","code":"\nset.seed(100)\nmy_ids <- sample(df_info_companies$simId, 4)\ntype_statements <- 'pl' # profit/loss\nperiods = 'FY' # final year\nyears = 2010:2018\n\ndf_fin <- simfinR_get_fin_statements(\n  id_companies = my_ids,\n  type_statements = type_statements,\n  periods = periods,\n  years = years,\n  api_key = my_api_key)\n\nnet_income <- df_fin %>% \n  dplyr::filter(acc_name == 'Net Income')\n\nglimpse(net_income)R> Rows: 36\nR> Columns: 13\nR> $ company_name   <chr> \"ABERCROMBIE & FITCH CO /DE/\", \"ABE…\nR> $ company_sector <chr> \"Retail - Apparel & Specialty\", \"Re…\nR> $ type_statement <fct> pl, pl, pl, pl, pl, pl, pl, pl, pl,…\nR> $ period         <fct> FY, FY, FY, FY, FY, FY, FY, FY, FY,…\nR> $ year           <int> 2010, 2011, 2012, 2013, 2014, 2015,…\nR> $ ref_date       <date> 2010-12-31, 2011-12-31, 2012-12-31…\nR> $ acc_name       <chr> \"Net Income\", \"Net Income\", \"Net In…\nR> $ acc_value      <dbl> 254000, 155709000, 143934000, 23701…\nR> $ tid            <chr> \"55\", \"55\", \"55\", \"55\", \"55\", \"55\",…\nR> $ uid            <chr> \"55\", \"55\", \"55\", \"55\", \"55\", \"55\",…\nR> $ parent_tid     <chr> \"58\", \"58\", \"58\", \"58\", \"58\", \"58\",…\nR> $ display_level  <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", …\nR> $ check_possible <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, …"},{"path":"importing-internet.html","id":"example-03---fetching-price-data","chapter":"5 Importing Data from the Internet","heading":"5.3.3 Example 03 - Fetching price data","text":"simfin project also provides prices stocks, adjusted dividends, splits corporate events. look:can see, data comprehensive suffice many different corporate finance research topics.","code":"\nset.seed(15)\nmy_ids <- sample(df_info_companies$simId, 4)\n\n\ndf_price <- simfinR_get_price_data(id_companies = my_ids,\n                                   api_key = my_api_key)\n\nglimpse(df_price)R> Rows: 9,503\nR> Columns: 8\nR> $ ref_date         <date> 2017-07-10, 2017-07-07, 2017-07-…\nR> $ close_adj        <dbl> 83, 83, 83, 83, 83, 83, 83, 83, 8…\nR> $ split_coef       <chr> NA, NA, NA, NA, NA, NA, NA, NA, N…\nR> $ share_class_id   <int> 553306, 553306, 553306, 553306, 5…\nR> $ share_class_name <chr> \"Common shares\", \"Common shares\",…\nR> $ share_class_type <chr> \"common\", \"common\", \"common\", \"co…\nR> $ currency         <chr> \"USD\", \"USD\", \"USD\", \"USD\", \"USD\"…\nR> $ company_name     <chr> \"CLARCOR INC.\", \"CLARCOR INC.\", \"…"},{"path":"importing-internet.html","id":"package-tidyquant","chapter":"5 Importing Data from the Internet","heading":"5.4 Package tidyquant","text":"Package tidyquant (Dancho Vaughan 2022) provides functions related financial data acquisition analysis. ambitious project offers many solutions field finance. might suspect, tidyquant designed interact well tidyverse format, also known long format, discussed chapter 6. package includes functions obtaining financial data web, manipulation data, calculation performance measures portfolios. current version, tidyquant 159 functions. Let’s look main functionalities. First, obtain price data Apple stocks (AAPL) using function tq_get.can see, except column names, price data similar format one got BatchGetSymbols. surprising share origin, Yahoo Finance.can also get information components index using function tq_index. available market indices : Let’s get information \"DOWGLOBAL\".looked functions package tidyquant. also offers solutions usual manipulations, calculating returns functions portfolio analytics. can find details package website49.","code":"\nlibrary(tidyquant)\n\n# set stock and dates\nticker <- 'AAPL'\nfirst_date <- '2019-01-01'\nlast_date <-  Sys.Date()\n\n# get data with tq_get\ndf_prices <- tq_get(ticker,\n                    get = \"stock.prices\", \n                    from = first_date, \n                    to = last_date)\n\nglimpse(df_prices)R> Rows: 982\nR> Columns: 8\nR> $ symbol   <chr> \"AAPL\", \"AAPL\", \"AAPL\", \"AAPL\", \"AAPL\", \"…\nR> $ date     <date> 2019-01-02, 2019-01-03, 2019-01-04, 2019…\nR> $ open     <dbl> 38.7225, 35.9950, 36.1325, 37.1750, 37.39…\nR> $ high     <dbl> 39.7125, 36.4300, 37.1375, 37.2075, 37.95…\nR> $ low      <dbl> 38.5575, 35.5000, 35.9500, 36.4750, 37.13…\nR> $ close    <dbl> 39.4800, 35.5475, 37.0650, 36.9825, 37.68…\nR> $ volume   <dbl> 148158800, 365248800, 234428400, 21911120…\nR> $ adjusted <dbl> 38.10513, 34.30958, 35.77423, 35.69461, 3…\n# print available indices\nprint(tq_index_options())R> [1] \"DOW\"       \"DOWGLOBAL\" \"SP400\"     \"SP500\"    \nR> [5] \"SP600\"\n# get components of \"DOWJONES\"\nprint(tq_index(\"DOWGLOBAL\"))R> Getting holdings for DOWGLOBALR> # A tibble: 156 × 8\nR>    symbol company       ident…¹ sedol  weight sector share…²\nR>    <chr>  <chr>         <chr>   <chr>   <dbl> <chr>    <dbl>\nR>  1 SLB    Schlumberger… 806857… 2779… 0.00860 Energy   16427\nR>  2 UCG-IT UniCredit S.… BYMXPS  BYMX… 0.00843 Finan…   62007\nR>  3 GILD   Gilead Scien… 375558… 2369… 0.00843 Healt…    9983\nR>  4 SIE-DE Siemens AG    572797  5727… 0.00815 Indus…    6158\nR>  5 SAP-DE SAP SE        484628  4846… 0.00813 Infor…    7467\nR>  6 NFLX   Netflix Inc.  64110L… 2857… 0.00801 Commu…    2805\nR>  7 ALV-DE Allianz SE    523148  5231… 0.00800 Finan…    3835\nR>  8 CAT    Caterpillar … 149123… 2180… 0.00789 Indus…    3392\nR>  9 MRK    Merck & Co. … 58933Y… 2778… 0.00783 Healt…    7408\nR> 10 DD     DuPont de Ne… 26614N… BK0V… 0.00779 Mater…   11157\nR> # … with 146 more rows, 1 more variable:\nR> #   local_currency <chr>, and abbreviated variable names\nR> #   ¹​identifier, ²​shares_held"},{"path":"importing-internet.html","id":"package-rbitcoin","chapter":"5 Importing Data from the Internet","heading":"5.5 Package Rbitcoin","text":"Given popularity crypto-currencies, another package worth mentioning RBitcoin. allows access trade data several Bitcoin exchanges. , let’s show simple example importing trade data 'Kraken' exchange, using Euro currency.output market.api.process list object information Bitcoin 'Kraken' market. actual trades available trade slot my_l. Let’s look content:includes price time information past 1000 trades. package also includes functions looking order book market managing Bitcoin wallets. One can find details functionalities package website50.","code":"\nlibrary(Rbitcoin)\n\n# set mkt, currency pair and type of action\nmkt <- \"kraken\"\ncurrency <- c(\"BTC\",\"EUR\")\naction <- 'trades'\n\n# import data\nmy_l <- market.api.process(market = mkt,\n                           currency_pair = currency,\n                           action = action)\n\n# print it\nprint(my_l)R> $market\nR> [1] \"kraken\"\nR> \nR> $base\nR> [1] \"BTC\"\nR> \nR> $quote\nR> [1] \"EUR\"\nR> \nR> $timestamp\nR> [1] \"2022-11-23 16:13:24 -03\"\nR> \nR> $market_timestamp\nR> [1] NA\nR> \nR> $trades\nR>                      date   price     amount\nR>    1: 2022-11-23 18:42:02 15841.6 0.06000000\nR>    2: 2022-11-23 18:42:02 15841.6 0.06000000\nR>    3: 2022-11-23 18:42:02 15841.6 0.06000000\nR>    4: 2022-11-23 18:42:02 15841.6 0.06000000\nR>    5: 2022-11-23 18:42:04 15841.6 0.03982641\nR>   ---                                       \nR>  996: 2022-11-23 19:12:47 15953.2 0.04642000\nR>  997: 2022-11-23 19:13:00 15950.7 0.00285684\nR>  998: 2022-11-23 19:13:03 15949.3 0.09844177\nR>  999: 2022-11-23 19:13:10 15953.2 0.00010000\nR> 1000: 2022-11-23 19:13:21 15946.3 0.00156740\nR>                       tid type\nR>    1:                <NA>  bid\nR>    2:                <NA>  bid\nR>    3:                <NA>  bid\nR>    4:                <NA>  bid\nR>    5:                <NA>  bid\nR>   ---                         \nR>  996:                <NA>  bid\nR>  997:                <NA>  bid\nR>  998:                <NA>  bid\nR>  999:                <NA>  bid\nR> 1000: 1669230801426028575  bid\nglimpse(my_l$trades)R> Rows: 1,000\nR> Columns: 5\nR> $ date   <dttm> 2022-11-23 18:42:02, 2022-11-23 18:42:02, …\nR> $ price  <dbl> 15841.6, 15841.6, 15841.6, 15841.6, 15841.6…\nR> $ amount <dbl> 0.06000000, 0.06000000, 0.06000000, 0.06000…\nR> $ tid    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\nR> $ type   <chr> \"bid\", \"bid\", \"bid\", \"bid\", \"bid\", \"bid\", \"…"},{"path":"importing-internet.html","id":"other-packages","chapter":"5 Importing Data from the Internet","heading":"5.6 Other Packages","text":"CRAN, ’ll find many packages importing financial datasets R. section, focused packages, free easy use. Interface commercial data sources also possible. Several companies provide APIs serving data clients. Packages Rblpapi (Bloomberg), IBrokers (Interactive Brokers), TFX (TrueFX), rdatastream (Thomson Dataworks) can make R communicate commercial platforms. company use presented , check list packages CRAN51. likely ’ll find need.","code":""},{"path":"importing-internet.html","id":"accessing-data-from-web-pages-webscraping","chapter":"5 Importing Data from the Internet","heading":"5.7 Accessing Data from Web Pages (webscraping)","text":"Packages previous section make easy import data directly web single line code. However, many cases, information interest available package, web page. Fortunately, can use R read HTML data import desired information R session. main advantage every time execute R code, get content target website.process extracting information web pages called webscraping. Depending structure technology used internet page, importing content can trivial single line R complex process, taking hundreds lines code. Let’s look two simple examples; first, retrieve tabular information SP500 index Wikipedia , second, extract current inflation interest rate Reserve Bank Australia (RBA) website. ","code":""},{"path":"importing-internet.html","id":"scraping-the-components-of-the-sp500-index-from-wikipedia","chapter":"5 Importing Data from the Internet","heading":"5.7.1 Scraping the Components of the SP500 Index from Wikipedia","text":"website, Wikipedia offers section52 components SP500 index. information presented tabular format, Figure 5.1.\nFigure 5.1: Mirror Wikipedia page SP500 components\ninformation web page constantly updated, can use import information stocks belonging SP500 index. delving R code, need understand webpage works. Briefly, webpage nothing lengthy HTML code interpreted browser. numerical value text presented website can usually found within code. code particular tree-like structure branches classes. Moreover, every element webpage address, called xpath. chrome firefox browsers, can see actual code webpage using mouse right-click part webpage selecting View page source.first step webscraping finding location information need. Chrome, can right-clicking specific location number/text website selecting inspect. open extra window browser. , right-click selection chose copy copy xpath. Figure 5.2, see mirror seeing browser.\nFigure 5.2: Finding xpath website\n, copied xpath :address header table. whole content table, including header, rows, columns, need set upper level HTML tree. equivalent address //*[@id=\"MW-content-text\"]/table[1].Now location want, let’s load package rvest (Wickham 2022a) use functions read_html, html_nodes html_table import desired table R: Object df_SP500_comp contains mirror data Wikipedia website. names columns require work, raw data intact used script. Notice output exact data previous use function BatchGetSymbols::GetSP500Stocks. executing command edit(BatchGetSymbols::GetSP500Stocks) ’ll see source data code similar one just executed.","code":"\n'//*[@id=\"mw-content-text\"]/table[1]/thead/tr/th[2]'\nlibrary(rvest)\n\n# set url and xpath\nmy_url <- paste0('https://en.wikipedia.org/wiki/',\n                 'List_of_S%26P_500_companies')\nmy_xpath <- '//*[@id=\"mw-content-text\"]/div/table[1]'\n\n# get nodes from html\nout_nodes <- html_nodes(read_html(my_url),\n                        xpath = my_xpath)\n\n# get table from nodes (each element in \n# list is a table)\ndf_SP500_comp <- html_table(out_nodes)\n\n# isolate it \ndf_SP500_comp <- df_SP500_comp[[1]]\n\n# change column names (remove space)\nnames(df_SP500_comp) <- make.names(names(df_SP500_comp))\n\n# print it\nglimpse(df_SP500_comp)R> Rows: 503\nR> Columns: 9\nR> $ Symbol                <chr> \"MMM\", \"AOS\", \"ABT\", \"ABBV\",…\nR> $ Security              <chr> \"3M\", \"A. O. Smith\", \"Abbott…\nR> $ SEC.filings           <chr> \"reports\", \"reports\", \"repor…\nR> $ GICS.Sector           <chr> \"Industrials\", \"Industrials\"…\nR> $ GICS.Sub.Industry     <chr> \"Industrial Conglomerates\", …\nR> $ Headquarters.Location <chr> \"Saint Paul, Minnesota\", \"Mi…\nR> $ Date.first.added      <chr> \"1976-08-09\", \"2017-07-26\", …\nR> $ CIK                   <int> 66740, 91142, 1800, 1551152,…\nR> $ Founded               <chr> \"1902\", \"1916\", \"1888\", \"201…"},{"path":"importing-internet.html","id":"scraping-the-website-of-the-reserve-bank-of-australia","chapter":"5 Importing Data from the Internet","heading":"5.7.2 Scraping the Website of the Reserve Bank of Australia","text":"another example webscraping R, let’s import information Reserve Bank Australia. accessed 2021-02-26, home page53 mirrors Figure 5.3.\nFigure 5.3: Website Reserve Bank Australia\nwebsite presents several information current news interest rates. Let’s assume interested information current cash/bank rate inflation, right upper corner webpage.first step webscrapping finding xpath information want. Using procedure described previous example, find address values, market rate current inflation:difference previous example importing table, simple text website. , use function html_text html_table. full code output presented next.now print result:Using webscraping techniques can become strong ally researcher. can give access immense amount information available web. However, scenario webscraping particular. always case can import data directly easily previous examples.Another problem webscrapping code depends structure website. simple change html structure code fail. aware maintaining webscraping code can demand significant time effort developer. possible, always check alternative sources information.Readers interested learning topic study functionalities packages XML (Temple Lang 2022), RSelenium (Harrison 2022) splashr (R-splashr?). one best suited sove particular webscraping problem. ","code":"\nxpath_inflation <- '//*[@id=\"content\"]/section[1]/div/div[3]/p'\nxpath_int_rate <- '//*[@id=\"content\"]/section[1]/div/div[1]/p'\nlibrary(rvest)\n\n# set address of RBA\nmy_url <- 'https://www.rba.gov.au/'\n\n# read html\nhtml_code <- read_html(my_url)\n\n# set xpaths\nxpath_inflation <- '//*[@id=\"content\"]/section[1]/div/div[3]/p'\nxpath_int_rate <- '//*[@id=\"content\"]/section[1]/div/div[1]/p'\n\n# get inflation from html\nmy_inflation <- html_text(html_nodes(html_code,\n                                     xpath = xpath_inflation ))\n\n# get interest rate from html\nmy_int_rate <- html_text(html_nodes(x = html_code,\n                                    xpath = xpath_int_rate ))\n# print result\ncat(\"\\nCurrent inflation in AUS:\", my_inflation)R> \nR> Current inflation in AUS: 0.9%\ncat(\"\\nCurrent interest rate AUS:\", my_int_rate)R> \nR> Current interest rate AUS: 0.1%"},{"path":"importing-internet.html","id":"exercises-2","chapter":"5 Importing Data from the Internet","heading":"5.8 Exercises","text":"","code":""},{"path":"importing-internet.html","id":"q.1-4","chapter":"5 Importing Data from the Internet","heading":"Q.1","text":"Using BatchGetSymbols package, download daily data Facebook stock (META) Yahoo Finance period 2019 2020. lowest unadjusted closing price (column price.close) analyzed period?\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\nticker <- 'META'\nfirst_date <- '2019-01-01'\nlast_date  <- '2020-01-01'\n\ndf_prices <- BatchGetSymbols(tickers = ticker, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\nmy_sol <- min(df_prices$price.close, \n              na.rm = TRUE)"},{"path":"importing-internet.html","id":"q.2-4","chapter":"5 Importing Data from the Internet","heading":"Q.2","text":"already done , create profile Quandl website54 download arabica coffee price data CEPEA database (Center Advanced Studies Applied Economics) ) 2010-01-01 2020-12-31. value recent price?\n\nSolution\n\n","code":"library(GetQuandlData)\n\nid_series <- c(COFFEE = 'CEPEA/COFFEE_A')\n\n# set api key (make sure you got your own!)\n#my_api_key <- readLines('~/Dropbox/98-pass_and_bash/.quandl_api.txt')\n\nfirst_date <- '2010-01-01'\nlast_date <- '2020-12-31'\n\n#df_coffee <- get_Quandl_series(id_in = id_series, \n #                              first_date = first_date,\n  #                             last_date = last_date,\n   #                            api_key = my_api_key,\n    #                           do_cache = TRUE)\n\n# find most recent\n#idx <- which.max(df_coffee$ref_date)\n#my_sol <- as.numeric(df_coffee$`Cash Price US$`[idx])"},{"path":"importing-internet.html","id":"q.3-3","chapter":"5 Importing Data from the Internet","heading":"Q.3","text":"Use function simfinR::simfinR_get_available_companies import data available companies Simfin. many companies find? aware number rows necessarily equal number companies. need check number unique values column name (see function dplyr::n_distinct.\n\nSolution\n\n","code":"library(simfinR)\nlibrary(tidyverse)\n\n# set api key - make sure you got your own at https://simfin.com/data/access/api\nmy_api_key <- read_lines('~/GDrive/98-pass-and-bash/.api_key_simfin.txt')\n# get info\n\ndf_info_companies <- simfinR_get_available_companies(my_api_key)\n\n# check it\nn_companies <- n_distinct(df_info_companies$name)\n\nmy_sol <- n_companies"},{"path":"importing-internet.html","id":"q.4-3","chapter":"5 Importing Data from the Internet","heading":"Q.4","text":"package simfinR, download PL (profit/loss) statement FY (final year) data company TESLA INC (id = 56317) years 2018, 2019, 2020. latest Net Income company?\n\nSolution\n\n","code":"library(simfinR)\nlibrary(tidyverse)\n\n# set api key - make sure you got your own at https://simfin.com/data/access/api\nmy_api_key <- read_lines('~/GDrive/98-pass-and-bash/.api_key_simfin.txt')\n# get info\n\ndf_info_companies <- simfinR_get_available_companies(my_api_key)\n\ncompany_name <- 'TESLA INC'\nid_companies <- 56317 # id of TESLA\ntype_statements <- 'pl' # profit/loss\nperiods = 'FY' # final year\nyears = 2018:2020\n\ndf_fin_FY <- simfinR_get_fin_statements(id_companies,\n                                        type_statements = type_statements,\n                                        periods = periods,\n                                        years = years,\n                                        api_key = my_api_key)\n\nglimpse(df_fin_FY)\n\ndesired_acc <- 'Net Income'\ntbl_ac <- df_fin_FY %>%\n  dplyr::filter(acc_name == desired_acc)\n\nlatest_acc_value <- tbl_ac$acc_value[which.max(tbl_ac$year)]\n\nmy_sol <- latest_acc_value "},{"path":"importing-internet.html","id":"q.5-3","chapter":"5 Importing Data from the Internet","heading":"Q.5","text":"Using function tidyquant::tq_index, download current composition index DOWGLOBAL. company highest percentage composition index?aware answer time-dependent reported result might different actually got R session.\n\nSolution\n\n","code":"library(tidyquant)\n\n# print available indices\navailable_index <- tq_index_options()\n\nmy_index <- sample(available_index, 1)\n\n# get components of \"DOWJONES\"\ncomp_idx <- tq_index(my_index)\n\nhighest_weight <- comp_idx$company[which.max(comp_idx$weight)]\n\nmy_sol <- highest_weight "},{"path":"importing-internet.html","id":"q.6-3","chapter":"5 Importing Data from the Internet","heading":"Q.6","text":"Using BatchGetSymbols package, download data 2019-01-01 2020-01-01 following tickers:AAPL: Apple IncBAC: Bank America CorporationGE: General Electric CompanyTSLA: Tesla, Inc.SNAP: Snap Inc.Using adjusted closing price column, company provided higher return stock holder analyzed period?Tip: advanced exercise require coding. solve , check function split split dataframe price data lapply map function dataframe.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\nfirst_date <- '2019-01-01'\nlast_date  <- '2020-01-01'\n\nmy_tickers <- c('AAPL', 'BAC', \n                'GE', 'TSLA',\n                'SNAP')\n    \ndf_prices <- BatchGetSymbols(tickers = my_tickers, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\nsplit_l <- split(df_prices, df_prices$ticker)\n\nmy_fct <- function(df_in) {\n  price_vec <- df_in$price.adjusted\n  ticker_in <- df_in$ticker[1]\n  \n  total_ret <- last(price_vec)/first(price_vec) - 1\n  \n  return(tibble(ticker = ticker_in,\n                total_ret = total_ret))\n}\n\ndf_results <- bind_rows(\n  lapply(split_l, my_fct)\n)\n\nwinner <- df_results$ticker[which.max(df_results$total_ret)]\n\nmy_sol <- winner"},{"path":"data-structure-objects.html","id":"data-structure-objects","chapter":"6 Dataframes and other objects","heading":"6 Dataframes and other objects","text":"R, everything object properties. numeric vector can interact numeric objects operations multiplication, division, addition. objects character class, mathematical properties valid intuitive – make sense add numeric value text divide text text. , character class properties, allowing user look specific chunk characters, splitting parts text, replacing specific characters, among many possibilities. One important aspects working R learning functionalities object classes.basic object classes R include numeric values, characters (text), factors, dates, among many cases. However, base classes stored complex data structures, dataframes (tables) lists. organization makes job manipulating data lot easier. Imagine, example, conducting study using price volume data five hundred stocks. used one numeric object – vector – stock’s volume price, one thousand objects handle environment. Although possible work way, resulting code disorganized, difficult understand, prone errors – -called spaguetti code55. twisted tangled becomes difficult use maintain.avoid , simpler way organize data create object named my_data allocate prices volumes . information needed perform study object, facilitating import export data. code also simpler structured need manipulate one object – table, expanding new variables relating tables. Said , let’s closer look objects structuring datasets, including dataframes, lists matrices.","code":""},{"path":"data-structure-objects.html","id":"dataframes","chapter":"6 Dataframes and other objects","heading":"6.1 Dataframes","text":"Without doubt, dataframe class used important object understand learning R. spend time manipulating one many dataframes get result need. dataframe simply table rows columns. allows column different class. can organize text data dataframe along numbers, example. flexibility makes dataframe efficient object represent heterogeneous datasets. Internally, dataframe special type list, column atomic vector. dataframe can organize work significantly. tabular structure dataframe forces data paired, row different data point several pieces information (columns). simple data structure can accommodate infinite variety information. new data points arrive, number rows increases. new variable inserted analysis, simply add new column existing table.Another positive aspect using dataframe class R several functions expect dataframe input. example, data manipulation package dplyr (Wickham, François, et al. 2022) graphical package ggplot2 (Wickham, Chang, et al. 2022) work dataframe . Operations importing exporting information mostly dataframe oriented. Without doubt, dataframes centre functionalities R, must master manipulation object.","code":""},{"path":"data-structure-objects.html","id":"creating-dataframes","chapter":"6 Dataframes and other objects","heading":"6.1.1 Creating dataframes","text":"dataframe object one R’s native classes implemented base package. can, example, create dataframe function base::data.frame. However, tidyverse universe offers version dataframe, called tibble. Converting dataframe tibble internal automatic. tibble object flexible native dataframes, making significantly easier use. Following preference tidyverse functions, now use tibbles version dataframes. call function tibble::tibble create dataframe. Notice function tibble:data_frame job, deprecated. means developers tibble package give preference tibble function future , users, follow recommendation. now use function creating dataframe financial data different stocks. used function rep replicate facilitate creation raw data dataframe object. Notice data now stored single object, facilitating access organization resulting code. content my_df can also viewed RStudio interface. , click object name environment tab, top right screen. , viewer appear main screen program, 6.1. \nFigure 6.1: Example viewing dataframe RStudio\nadvantage using viewer can explore data easily sort columns clicking names. like use prompt, can open viewer function View, View(my_df). ","code":"\nlibrary(tidyverse)\n\n# set tickers\ntickers <- c(rep('AAP',5), \n             rep('COG', 5), \n             rep('BLK', 5), \n             rep('CAM',5) )\n\n# set a date vector\ndates <- as.Date(rep(c(\"2010-01-04\", \"2010-01-05\", \"2010-01-06\", \n                       \"2010-01-07\", \"2010-01-08\"), 4) )\n\n# set prices                      \nprices <- c(40.38,  40.14,  40.49,  40.48,  40.64,\n            46.23,  46.17,  45.97,  45.56,  45.46,\n            238.58, 239.61, 234.67, 237.25, 238.92,\n            43.43,  43.96,  44.26,  44.5,   44.86)\n\n# create tibble/dataframe\nmy_df <- tibble(tickers, dates, prices)\n\n# print its first 5 rows\nprint(head(my_df))R> # A tibble: 6 × 3\nR>   tickers dates      prices\nR>   <chr>   <date>      <dbl>\nR> 1 AAP     2010-01-04   40.4\nR> 2 AAP     2010-01-05   40.1\nR> 3 AAP     2010-01-06   40.5\nR> 4 AAP     2010-01-07   40.5\nR> 5 AAP     2010-01-08   40.6\nR> 6 COG     2010-01-04   46.2"},{"path":"data-structure-objects.html","id":"inspecting-a-dataframe","chapter":"6 Dataframes and other objects","heading":"6.1.2 Inspecting a Dataframe","text":"dataframe R session, mandatory step check contents. time, become healthy habit work. need aware :Properly defined column’s names classes;Correct number rows columns;existence () missing data (NA).often control get data errors column names common. mind, meaningful column names intuitive, easy access without special characters essential. Therefore, first step checking dataframe analyze names columns , necessary, adjust code. rule, never touch content raw tables, always use code manipulate data.also important make sure classes columns imported dataframe correctly specified. Otherwise, future column operations may cause error. example, column numeric values imported text class (character), mathematical operation column cause error. Checking column’s classes right importing data important save lot time future.also check number NA values different columns. Whenever find large proportion NA values imported table, find going information correctly imported. mentioned previous chapter, NA values contagious turn anything touches another NA.Back code, one recommended functions familiarizing dataframe dplyr::glimpse. shows name class columns number rows/columns. used abused function previous chapters. ’s simple example:Usually, use glimpse sufficient check data import process succeeded. However, deeper analysis can also help understand column varies imported data makes sense problem. comes role base::summary function:objective summary provide grasp content column dataframe. Notice summary interprets column differently. first case, column ticker, character vector, shows length. , column prices, numeric vector, presents maximum, minimum, median quartiles. can use simple call base::summary inspecting contents columns. example, extreme observation (outlier) easily identified analyzing output summary.\nWhenever start work new dataframe, check \ncontents functions dplyr::glimpse \nbase::summary verify possible problems \nimporting process content file . experience \nnotice many future errors code can remedied simple\ninspection imported tables.\n","code":"\n# check content of my_df\nglimpse(my_df)R> Rows: 20\nR> Columns: 3\nR> $ tickers <chr> \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"COG\", …\nR> $ dates   <date> 2010-01-04, 2010-01-05, 2010-01-06, 2010-…\nR> $ prices  <dbl> 40.38, 40.14, 40.49, 40.48, 40.64, 46.23, …\n# check variation my_df\nsummary(my_df)R>    tickers              dates                prices      \nR>  Length:20          Min.   :2010-01-04   Min.   : 40.14  \nR>  Class :character   1st Qu.:2010-01-05   1st Qu.: 42.73  \nR>  Mode  :character   Median :2010-01-06   Median : 45.16  \nR>                     Mean   :2010-01-06   Mean   : 92.08  \nR>                     3rd Qu.:2010-01-07   3rd Qu.: 93.34  \nR>                     Max.   :2010-01-08   Max.   :239.61"},{"path":"data-structure-objects.html","id":"the-pipeline-operator","chapter":"6 Dataframes and other objects","heading":"6.1.3 The pipeline Operator (%>%)","text":"important feature tidyverse universe extensive use pipeline operator, first proposed package magrittr (Bache Wickham 2022) defined symbol %>%. pipeline operator allows data operations performed sequentially modular fashion, increasing readability maintainability resulting code.Imagine situation three functions applied dataframe. function depends output another function. requires chaining calls, one output feeds object next call. Using pipeline operator, can write dataframe manipulation procedure following code: use symbol %>% end line “glue” operations. fct* functions operations performed step. arg* objects just arguments (options) function call. result code line passed next function sequentially. Thus, need create intermediate objects. compare, two ways perform operation without pipeline operator:Notice alternatives result messy code structure. Version one ugliest. need pay good attention understand code. probably haven’t noticed, codes typos cause bug. first, last arg1 argument arg3 , second, fct3 function using temp1 dataframe temp2. example shows using pipelines makes code elegant readable. now use pipeline operator extensively.","code":"\nmy_tab <- my_df %>%\n  fct1(arg1) %>%\n  fct2(arg2) %>%\n  fct3(arg3)\n# version 1\nmy_tab <- fct3(fct2(fct1(my_df,\n                         arg1),\n                    arg2),\n               arg1)\n\n# version 2\ntemp1 <- fct1(my_df, arg1)\ntemp2 <- fct2(temp1, arg2)\n\nmy_tab <- fct3(temp1, arg3)"},{"path":"data-structure-objects.html","id":"accessing-columns","chapter":"6 Dataframes and other objects","heading":"6.1.4 Accessing Columns","text":"discover names columns dataframe, two functions, names colnames, exact behavior: can also modify column names:example, way use names differs greatly R functions. , use function left side assign symbol (<-). Internally, defining attribute temp_df object, name columns.access particular column dataframe vector, can use operator $ name/position column double brackets:’s worth knowing , internally, dataframes stored lists, element column. important properties lists also work dataframes. One example using double bracket ([[ ]]) selecting columns:access specific rows columns dataframe, use single brackets atomic vectors indicate positions:Column selection can also performed using names, following example:, using pipeline operator function dplyr::slice dplyr::select: ","code":"\n# get names of columns with names\nnames(my_df)R> [1] \"tickers\" \"dates\"   \"prices\"\ncolnames(my_df)R> [1] \"tickers\" \"dates\"   \"prices\"\n# set temp df\ntemp_df <- my_df\n\n# change names\nnames(temp_df) <- paste0('Col', 1:ncol(temp_df))\n\n# check names\nnames(temp_df)R> [1] \"Col1\" \"Col2\" \"Col3\"\n# isolate columns of df\nmy_tickers <- my_df$tickers\nmy_prices <- my_df$prices\n\n# print the results\nprint(head(my_tickers))R> [1] \"AAP\" \"AAP\" \"AAP\" \"AAP\" \"AAP\" \"COG\"\nprint(head(my_prices))R> [1] 40.38 40.14 40.49 40.48 40.64 46.23\n# select column in dataframe with list notation\nprint(my_df[[2]])R>  [1] \"2010-01-04\" \"2010-01-05\" \"2010-01-06\" \"2010-01-07\"\nR>  [5] \"2010-01-08\" \"2010-01-04\" \"2010-01-05\" \"2010-01-06\"\nR>  [9] \"2010-01-07\" \"2010-01-08\" \"2010-01-04\" \"2010-01-05\"\nR> [13] \"2010-01-06\" \"2010-01-07\" \"2010-01-08\" \"2010-01-04\"\nR> [17] \"2010-01-05\" \"2010-01-06\" \"2010-01-07\" \"2010-01-08\"\nprint(my_df[['tickers']])R>  [1] \"AAP\" \"AAP\" \"AAP\" \"AAP\" \"AAP\" \"COG\" \"COG\" \"COG\" \"COG\"\nR> [10] \"COG\" \"BLK\" \"BLK\" \"BLK\" \"BLK\" \"BLK\" \"CAM\" \"CAM\" \"CAM\"\nR> [19] \"CAM\" \"CAM\"\n# accessing rows 1:5, column 2\nprint(my_df[1:5, 2])R> # A tibble: 5 × 1\nR>   dates     \nR>   <date>    \nR> 1 2010-01-04\nR> 2 2010-01-05\nR> 3 2010-01-06\nR> 4 2010-01-07\nR> 5 2010-01-08\n# accessing rows 1:5, columns 1 and 2\nprint(my_df[1:5, c(1,2)])R> # A tibble: 5 × 2\nR>   tickers dates     \nR>   <chr>   <date>    \nR> 1 AAP     2010-01-04\nR> 2 AAP     2010-01-05\nR> 3 AAP     2010-01-06\nR> 4 AAP     2010-01-07\nR> 5 AAP     2010-01-08\n# accessing rows 1:5, all columns\nprint(my_df[1:5, ])R> # A tibble: 5 × 3\nR>   tickers dates      prices\nR>   <chr>   <date>      <dbl>\nR> 1 AAP     2010-01-04   40.4\nR> 2 AAP     2010-01-05   40.1\nR> 3 AAP     2010-01-06   40.5\nR> 4 AAP     2010-01-07   40.5\nR> 5 AAP     2010-01-08   40.6\n# selecting rows 1 to 3, columns 'ticker' and 'prices'\nprint(my_df[1:3, c('tickers', 'prices')])R> # A tibble: 3 × 2\nR>   tickers prices\nR>   <chr>    <dbl>\nR> 1 AAP       40.4\nR> 2 AAP       40.1\nR> 3 AAP       40.5\nmy.temp <- my_df %>%\n  select(tickers, prices) %>%\n  slice(1:3) %>%\n  glimpse()R> Rows: 3\nR> Columns: 2\nR> $ tickers <chr> \"AAP\", \"AAP\", \"AAP\"\nR> $ prices  <dbl> 40.38, 40.14, 40.49"},{"path":"data-structure-objects.html","id":"modifying-a-dataframe","chapter":"6 Dataframes and other objects","heading":"6.1.5 Modifying a dataframe","text":"create new columns dataframe, simply use function dplyr::mutate pipeline operator. new columns defined arguments dplyr::mutate. Also note use price column construct ret, daily return prices. special case creation column seq_2 based seq_1, , even explicitly calculated, possible use new column create another one.Another, traditional way creating new columns using operator $:Therefore, can use $ either access modify dataframe.Going , try create column number elements different number rows target dataframe, error appear.However, due simplified recycling rule, can use single values fill whole column:remove columns dataframe, use function dplyr::select minus symbol undesired columns:Using base R, traditional way removing columns allocate single value NULL contents:","code":"\n# add columns with mutate\nmy_df <- my_df %>%\n  mutate(ret = prices/lag(prices) -1,\n         seq_1 = 1:nrow(my_df),\n         seq_2 =  seq_1 +9) %>%\n  glimpse()R> Rows: 20\nR> Columns: 6\nR> $ tickers <chr> \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"COG\", …\nR> $ dates   <date> 2010-01-04, 2010-01-05, 2010-01-06, 2010-…\nR> $ prices  <dbl> 40.38, 40.14, 40.49, 40.48, 40.64, 46.23, …\nR> $ ret     <dbl> NA, -0.0059435364, 0.0087194818, -0.000246…\nR> $ seq_1   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…\nR> $ seq_2   <dbl> 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20…\n# add new column with base R\nmy_df$seq_3 <- 1:nrow(my_df)\n\n# check it\nglimpse(my_df)R> Rows: 20\nR> Columns: 7\nR> $ tickers <chr> \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"COG\", …\nR> $ dates   <date> 2010-01-04, 2010-01-05, 2010-01-06, 2010-…\nR> $ prices  <dbl> 40.38, 40.14, 40.49, 40.48, 40.64, 46.23, …\nR> $ ret     <dbl> NA, -0.0059435364, 0.0087194818, -0.000246…\nR> $ seq_1   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…\nR> $ seq_2   <dbl> 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20…\nR> $ seq_3   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…\nmy_df <- my_df %>%\n  mutate(seq_3 =  1:100) %>%\n  glimpse()R> Error: Column `seq_3` must be length 20 (the number of rows) ...\nmy_df <- my_df %>%\n  mutate(seq_3 =  1) %>%\n  glimpse()R> Rows: 20\nR> Columns: 7\nR> $ tickers <chr> \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"COG\", …\nR> $ dates   <date> 2010-01-04, 2010-01-05, 2010-01-06, 2010-…\nR> $ prices  <dbl> 40.38, 40.14, 40.49, 40.48, 40.64, 46.23, …\nR> $ ret     <dbl> NA, -0.0059435364, 0.0087194818, -0.000246…\nR> $ seq_1   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…\nR> $ seq_2   <dbl> 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20…\nR> $ seq_3   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n# removing columns\nmy_df.temp <- my_df %>%\n  select(-seq_1, -seq_2, -seq_3) %>%\n  glimpse()R> Rows: 20\nR> Columns: 4\nR> $ tickers <chr> \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"AAP\", \"COG\", …\nR> $ dates   <date> 2010-01-04, 2010-01-05, 2010-01-06, 2010-…\nR> $ prices  <dbl> 40.38, 40.14, 40.49, 40.48, 40.64, 46.23, …\nR> $ ret     <dbl> NA, -0.0059435364, 0.0087194818, -0.000246…\n# set temp df\ntemp_df <- my_df\n\n# remove cols\ntemp_df$prices <- NULL\ntemp_df$dates  <- NULL\ntemp_df$ret  <- NULL\ntemp_df$tickers  <- NULL\n\n# check it\nglimpse(temp_df)R> Rows: 20\nR> Columns: 3\nR> $ seq_1 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…\nR> $ seq_2 <dbl> 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …\nR> $ seq_3 <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…"},{"path":"data-structure-objects.html","id":"filtering-rows-of-a-dataframe","chapter":"6 Dataframes and other objects","heading":"6.1.6 Filtering rows of a dataframe","text":"fairly common dataframe operation R filter rows according one conditions. example, wanted data 'COG' stock, use filter function filter table: can go also filter data 'COG' dates '2010-01-05':used symbol == test equality column ticker greater (>) selecting rows dates 2010-01-05. plenty operators kinds logical conditions. study chapter 7.","code":"\n# filter df for single stock\nmy_df.temp <- my_df %>%\n  filter(tickers == 'COG') %>%\n  glimpse()R> Rows: 5\nR> Columns: 7\nR> $ tickers <chr> \"COG\", \"COG\", \"COG\", \"COG\", \"COG\"\nR> $ dates   <date> 2010-01-04, 2010-01-05, 2010-01-06, 2010-0…\nR> $ prices  <dbl> 46.23, 46.17, 45.97, 45.56, 45.46\nR> $ ret     <dbl> 0.137549213, -0.001297859, -0.004331817, …\nR> $ seq_1   <int> 6, 7, 8, 9, 10\nR> $ seq_2   <dbl> 15, 16, 17, 18, 19\nR> $ seq_3   <dbl> 1, 1, 1, 1, 1\n# filter df for single stock and date\nmy_df.temp <- my_df %>%\n  filter(tickers == 'COG',\n         dates > as.Date('2010-01-05')) %>%\n  glimpse()R> Rows: 3\nR> Columns: 7\nR> $ tickers <chr> \"COG\", \"COG\", \"COG\"\nR> $ dates   <date> 2010-01-06, 2010-01-07, 2010-01-08\nR> $ prices  <dbl> 45.97, 45.56, 45.46\nR> $ ret     <dbl> -0.004331817, -0.008918860, -0.002194908\nR> $ seq_1   <int> 8, 9, 10\nR> $ seq_2   <dbl> 17, 18, 19\nR> $ seq_3   <dbl> 1, 1, 1"},{"path":"data-structure-objects.html","id":"sorting-a-dataframe","chapter":"6 Dataframes and other objects","heading":"6.1.7 Sorting a dataframe","text":"creating importing dataframe, can sort rows according values column. common case sort operation needed financial economic data imported, dates ascending. Depending situation, may easier – expected – deal data dates always increasing along rows, top bottom. sorting operation dataframes performed using function dplyr::arrange base::order. example, consider creating dataframe values:use function dplyr::arrange pipeline operator order whole dataframe ascending values column col1:can also sort descending values using desc:, multiple columns, using extra arguments arrange:base R, function order returns position elements sorted vector. first column my_df, positions elements ascending order :Therefore, using output function order index existing dataframe, get new version dataframe, rows set according ascending values particular column. See example next:operation may also performed considering one column. See following example, sort rows my_df using columns col2 col1.","code":"\n# set new df\nmy_df <- tibble(col1 = c(4, 1, 2), \n                col2 = c(1, 1, 3), \n                col3 = c('a','b','c'))\n\n# print it                  \nprint(my_df)R> # A tibble: 3 × 3\nR>    col1  col2 col3 \nR>   <dbl> <dbl> <chr>\nR> 1     4     1 a    \nR> 2     1     1 b    \nR> 3     2     3 c\n# sort ascending, by col1 \nmy_df <- my_df %>%\n  arrange(col1) %>%\n  print()R> # A tibble: 3 × 3\nR>    col1  col2 col3 \nR>   <dbl> <dbl> <chr>\nR> 1     1     1 b    \nR> 2     2     3 c    \nR> 3     4     1 a\n# sort descending, col1 and col2\nmy_df <- my_df %>%\n  arrange(desc(col1)) %>%\n  print()R> # A tibble: 3 × 3\nR>    col1  col2 col3 \nR>   <dbl> <dbl> <chr>\nR> 1     4     1 a    \nR> 2     2     3 c    \nR> 3     1     1 b\n# sort ascending, by col2 and col1\nmy_df <- my_df %>%\n  arrange(col2, col1) %>%\n  print()R> # A tibble: 3 × 3\nR>    col1  col2 col3 \nR>   <dbl> <dbl> <chr>\nR> 1     1     1 b    \nR> 2     4     1 a    \nR> 3     2     3 c\n# set index with positions of ascending order in col1\nidx <- order(my_df$col1)\n\n# print it\nprint(idx)R> [1] 1 3 2\n# order my_df by col1\nmy_df.2 <- my_df[order(my_df$col1), ]\n\n# print result\nprint(my_df.2)R> # A tibble: 3 × 3\nR>    col1  col2 col3 \nR>   <dbl> <dbl> <chr>\nR> 1     1     1 b    \nR> 2     2     3 c    \nR> 3     4     1 a\n# sort df with col2 and col1\nmy_df.3 <- my_df[order(my_df$col2, my_df$col1), ]\n\n# print result\nprint(my_df.3)R> # A tibble: 3 × 3\nR>    col1  col2 col3 \nR>   <dbl> <dbl> <chr>\nR> 1     1     1 b    \nR> 2     4     1 a    \nR> 3     2     3 c"},{"path":"data-structure-objects.html","id":"combining-and-aggregating-dataframes","chapter":"6 Dataframes and other objects","heading":"6.1.8 Combining and Aggregating dataframes","text":"practice manipulating data, often must aggregate multiple dataframes single one. usually happens heterogeneous data imported different sources must bind single table. simplest case combining dataframes, join according rows (vertically) columns (horizontally). , functions dplyr::bind_rows (alternative base::rbind) dplyr::bind_cols (alternative base::cbind). Examples usage given next. Notice , previous example, names columns my_df_1 my_df_2. Function dplyr::bind_rows clever search shared names correctly bind data, even column positions different. swapped positions columns, change result bind operation.Another interesting aspect dplyr::bind_rows , names columns don’t match, unmatched columns return NA result (available). means can bind tables different column names:case column bind function dplyr::bind_cols, names columns must different, number rows must : Sometimes, aggregating different tables won’t easy simply row column binding. example, imagine data annual unemployment rates one dataframe data monthly inflation another. , can’t just bind columns frequency number rows different. solution use index (table key) – vector dates – relates tables., can use functions dplyr::join* merge two dataframes using one indexes. includes dplyr::inner_join, dplyr::left_join, dplyr::full_join, many others. main difference treat row cases without match. example, dplyr::inner_join keeps data finds matching index, dplyr::full_join keep everything tables fills missing information NA values. Let’s closer look using practical example .Please notice dataframes share column called date, automatically used matching index.Now dplyr::full_join:Notice difference number rows one . using dplyr::full_join, unmatched cases set NA.dataframes different column names, can also set index explicitly argument dplyr::*_join. See next example, set different column names still match data using vector dates:Whenever need combine tables share information, use one dplyr::*_join functions. decision treat unmatched cases depend problem ’re analyzing.","code":"\n# set two dfs with same colnames\nmy_df_1 <- tibble(col1 = 1:5, \n                  col2 = rep('a', 5))\nmy_df_2 <- tibble(col1 = 6:10, \n                  col2 = rep('b', 5))\n\n# bind them by rows\nmy_df <- bind_rows(my_df_1, my_df_2)\n\n# print result\nprint(my_df)R> # A tibble: 10 × 2\nR>     col1 col2 \nR>    <int> <chr>\nR>  1     1 a    \nR>  2     2 a    \nR>  3     3 a    \nR>  4     4 a    \nR>  5     5 a    \nR>  6     6 b    \nR>  7     7 b    \nR>  8     8 b    \nR>  9     9 b    \nR> 10    10 b\n# set two df with different colnames\nmy_df_1 <- tibble(col1 = 1:5, \n                  col2 = rep('a', 5))\nmy_df_2 <- tibble(col1 = 6:10, \n                  col3 = rep('b', 5))\n\n# bind them by rows (NA values for missing cols)\nmy_df <- bind_rows(my_df_1, \n                   my_df_2)\n\n# print result\nprint(my_df)R> # A tibble: 10 × 3\nR>     col1 col2  col3 \nR>    <int> <chr> <chr>\nR>  1     1 a     <NA> \nR>  2     2 a     <NA> \nR>  3     3 a     <NA> \nR>  4     4 a     <NA> \nR>  5     5 a     <NA> \nR>  6     6 <NA>  b    \nR>  7     7 <NA>  b    \nR>  8     8 <NA>  b    \nR>  9     9 <NA>  b    \nR> 10    10 <NA>  b\n# set two dfs\nmy_df_1 <- tibble(col1 = 1:5, \n                  col2 = rep('a', 5))\nmy_df_2 <- tibble(col3 = 6:10, \n                  col4 = rep('b', 5))\n\n# column bind dfs\nmy_df <- cbind(my_df_1, my_df_2)\n\n# print result\nprint(my_df)R>   col1 col2 col3 col4\nR> 1    1    a    6    b\nR> 2    2    a    7    b\nR> 3    3    a    8    b\nR> 4    4    a    9    b\nR> 5    5    a   10    b\n# set df\nmy_df_1 <- tibble(date = as.Date('2016-01-01')+0:10,\n                  x = 1:11)\n\nmy_df_2 <- tibble(date = as.Date('2016-01-05')+0:10,\n                  y = seq(20,30, length.out = 11))\n# aggregate tables\nmy_df <- inner_join(my_df_1, \n                    my_df_2)R> Joining, by = \"date\"\nglimpse(my_df)R> Rows: 7\nR> Columns: 3\nR> $ date <date> 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-…\nR> $ x    <int> 5, 6, 7, 8, 9, 10, 11\nR> $ y    <dbl> 20, 21, 22, 23, 24, 25, 26\n# aggregate tables\nmy_df <- full_join(my_df_1, \n                   my_df_2)R> Joining, by = \"date\"\nglimpse(my_df)R> Rows: 15\nR> Columns: 3\nR> $ date <date> 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-…\nR> $ x    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, NA, NA, NA…\nR> $ y    <dbl> NA, NA, NA, NA, 20, 21, 22, 23, 24, 25, 26, 2…\n# set df\nmy_df_3 <- tibble(ref_date = as.Date('2016-01-01')+0:10,\n                  x = 1:11)\n\nmy_df_4 <- tibble(my_date = as.Date('2016-01-05')+0:10,\n                  y = seq(20,30, length.out = 11))\n\n# join by my_df.3$ref.date and my_df.4$my.date\nmy_df <- inner_join(my_df_3, my_df_4,\n                    by = c('ref_date' = 'my_date'))\n\nglimpse(my_df)R> Rows: 7\nR> Columns: 3\nR> $ ref_date <date> 2016-01-05, 2016-01-06, 2016-01-07, 2016…\nR> $ x        <int> 5, 6, 7, 8, 9, 10, 11\nR> $ y        <dbl> 20, 21, 22, 23, 24, 25, 26"},{"path":"data-structure-objects.html","id":"extensions-of-the-dataframe-class","chapter":"6 Dataframes and other objects","heading":"6.1.9 Extensions of the dataframe Class","text":"mentioned previous chapter, one benefit using R existence range packages designed deal specific problems. also true extensions basic data structure. tibble class good solution cases, sometimes, can make sense store data specific type custom object. time, several solutions developed.example, common economic financial research work numeric data indexed time. can store data matrix format, line represents dates column represents variable. structure, time operations, period aggregations, easier perform. main idea package xts (Ryan Ulrich 2022). great benefit alternative dataframe several functions time aggregation manipulation available. can turn whole set daily data several variables weekly frequency one line code. addition, various functions automatically recognize time index adapt accordingly. One example creation figure values variable time. horizontal axes figure automatically arranged dates. See following example, represent previous stock data xts object: creating xts object, notice time index explicitly defined using argument order.. necessary step creating every xts object.previous code can give impression object my_xts similar native dataframe. However, make mistake. explicit time index, object my_xts can used several privileged procedures. See following example, create new xts object two columns calculate average column weekly basis.finance economics, time aggregations xts objects useful working data different time frequencies. common aggregate transaction data financial market high-frequency intervals 5 5 minutes. procedure easily accomplished R correct representation data xts objects. several features package. Users work frequently time-indexed data encouraged read manual56 learn .Package xts alone alternative dataframes. example, data structure proposed package data.table (Dowle Srinivasan 2022) prioritizes processing time uses compact notation. like short notations writing code need quick execution time, data.table impressive powerful package. another example, package tibbletime (Vaughan Dancho 2022) , well, time-oriented version tibble, bringing together benefits tidyverse xts. ","code":"\n# load pkg\nlibrary(xts)\n\n# set ticker symbols as a vector\ntickers <- c('AAP', 'COG', 'BLK', 'CAM')\n\n# set a date vector\ndates <- as.Date(c(\"2010-01-04\", \"2010-01-05\", \"2010-01-06\", \n                   \"2010-01-07\", \"2010-01-08\"))\n\n# set prices as  matrix                   \nprice_matrix <- matrix(c(40.38,  40.13,  40.49,  40.48,  40.63,\n                         46.23,  46.16,  45.97,  45.56,  45.45,\n                         238.58, 239.61, 234.66, 237.25, 238.91,\n                         43.43,  43.95,  44.25,  44.5,   44.86),\n                       nrow = length(dates))\n\n# set xts object\nmy_xts <- xts(price_matrix, order.by = dates)\n\n# set colnames\ncolnames(my_xts) <- tickers\n\n# print it\nprint(my_xts)R>              AAP   COG    BLK   CAM\nR> 2010-01-04 40.38 46.23 238.58 43.43\nR> 2010-01-05 40.13 46.16 239.61 43.95\nR> 2010-01-06 40.49 45.97 234.66 44.25\nR> 2010-01-07 40.48 45.56 237.25 44.50\nR> 2010-01-08 40.63 45.45 238.91 44.86\n# show its class\nclass(my_xts)R> [1] \"xts\" \"zoo\"\n# set number of time periods\nN <- 500\n\n# create matrix with data\nmy_mat <- matrix(c(seq(1, N), seq(N, 1)), nrow=N)\n\n# set xts object\nmy_xts <- xts(my_mat, order.by = as.Date('2018-01-01')+1:N)\n\n# apply mean function for each week\nmy_xts_weekly_mean <- apply.weekly(my_xts, mean)\n\n# print result\nprint(head(my_xts_weekly_mean))R>             X.1   X.2\nR> 2018-01-07  3.5 497.5\nR> 2018-01-14 10.0 491.0\nR> 2018-01-21 17.0 484.0\nR> 2018-01-28 24.0 477.0\nR> 2018-02-04 31.0 470.0\nR> 2018-02-11 38.0 463.0"},{"path":"data-structure-objects.html","id":"other-useful-functions-for-handling-dataframes","chapter":"6 Dataframes and other objects","heading":"6.1.10 Other Useful Functions for Handling dataframes","text":"head Returns first n rows dataframe. function mostly used showing small part dataframe prompt. tail - Returns last n rows dataframe. Also used glimpse last rows dataframe. complete.cases - Returns logical vector length number rows dataframe, containing TRUE columns non NA values FALSE otherwise. na.omit - Returns dataframe without rows NA column found. unique - Returns dataframe duplicated rows removed unique cases, row-wise, kept. ","code":"\n# set df\nmy_df <- tibble(col1 = 1:5000, \n                col2 = rep('a', 5000))\n\n# print its first 5 rows\nprint(head(my_df, 5))R> # A tibble: 5 × 2\nR>    col1 col2 \nR>   <int> <chr>\nR> 1     1 a    \nR> 2     2 a    \nR> 3     3 a    \nR> 4     4 a    \nR> 5     5 a\n# print its last 5 rows\nprint(tail(my_df, 5))R> # A tibble: 5 × 2\nR>    col1 col2 \nR>   <int> <chr>\nR> 1  4996 a    \nR> 2  4997 a    \nR> 3  4998 a    \nR> 4  4999 a    \nR> 5  5000 a\n# create df\nmy_df <- tibble(x = c(1:5, NA, 10),\n                y = c(5:10, NA))\n\n# show df\nprint(my_df)R> # A tibble: 7 × 2\nR>       x     y\nR>   <dbl> <int>\nR> 1     1     5\nR> 2     2     6\nR> 3     3     7\nR> 4     4     8\nR> 5     5     9\nR> 6    NA    10\nR> 7    10    NA\n# print logical test of complete.cases\nprint(complete.cases(my_df))R> [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n# print all rows where there is at least one NA\nprint(which(!complete.cases(my_df)))R> [1] 6 7\nprint(na.omit(my_df))R> # A tibble: 5 × 2\nR>       x     y\nR>   <dbl> <int>\nR> 1     1     5\nR> 2     2     6\nR> 3     3     7\nR> 4     4     8\nR> 5     5     9\n# set df with repeating rows\nmy_df <- data.frame(col1 = c(1, 1, 2, 3, 3, 4, 5), \n                    col2 = c('A', 'A', 'A', 'C', 'C', 'B', 'D'))\n\n# print it                  \nprint(my_df)R>   col1 col2\nR> 1    1    A\nR> 2    1    A\nR> 3    2    A\nR> 4    3    C\nR> 5    3    C\nR> 6    4    B\nR> 7    5    D\n# print unique df\nprint(unique(my_df))R>   col1 col2\nR> 1    1    A\nR> 3    2    A\nR> 4    3    C\nR> 6    4    B\nR> 7    5    D"},{"path":"data-structure-objects.html","id":"lists","chapter":"6 Dataframes and other objects","heading":"6.2 Lists","text":"list flexible container can hold many elements. Unlike atomic vectors, list restriction classes types elements – can group numeric objects character objects, factor Dates even lists within lists. Likewise, element list need length others. can also name element within list. properties make list class flexible object R. accident several functions R return object type list. ","code":""},{"path":"data-structure-objects.html","id":"creating-lists","chapter":"6 Dataframes and other objects","heading":"6.2.1 Creating lists","text":"list can created base::list command, followed comma-separated elements: Notice gather four objects: numeric vector, character vector, factor dataframe/tibble single list. Also, notice list type object printed differently atomic vectors. elements list separated vertically content appears within double brackets ([[ ]]). soon learn can access elements way, using double brackets.Following objects, elements list can also named, making easier work heterogenous data. example, let’s consider set data information particular company traded NYSE market:data organized single object, facilitating import/export data analysis.\nEvery time work lists, make life easier naming \nelements intuitively. Avoid use position element \nlist, can change lists expand contract. Using names\nfacilitates access avoids possible errors code.\n","code":"\n# create list\nmy_l <- list(c(1, 2, 3),\n             c('a', 'b'),\n             factor('A', 'B', 'C'),\n             data.frame(col1 = 1:5))\n\n# use base::print\nprint(my_l)R> [[1]]\nR> [1] 1 2 3\nR> \nR> [[2]]\nR> [1] \"a\" \"b\"\nR> \nR> [[3]]\nR> [1] <NA>\nR> Levels: C\nR> \nR> [[4]]\nR>   col1\nR> 1    1\nR> 2    2\nR> 3    3\nR> 4    4\nR> 5    5\n# use dplyr::glimpse\nglimpse(my_l)R> List of 4\nR>  $ : num [1:3] 1 2 3\nR>  $ : chr [1:2] \"a\" \"b\"\nR>  $ : Factor w/ 1 level \"C\": NA\nR>  $ :'data.frame':    5 obs. of  1 variable:\nR>   ..$ col1: int [1:5] 1 2 3 4 5\n# set named list\nmy_named_l <- list(tickers = 'CMPY',\n                   markets = 'NYSE',\n                   df_prices = data.frame(P = c(1,1.5,2,2.3),\n                                          ref_date = Sys.Date()+0:3))\n\n# check content\nglimpse(my_named_l)R> List of 3\nR>  $ tickers  : chr \"CMPY\"\nR>  $ markets  : chr \"NYSE\"\nR>  $ df_prices:'data.frame':   4 obs. of  2 variables:\nR>   ..$ P       : num [1:4] 1 1.5 2 2.3\nR>   ..$ ref_date: Date[1:4], format: \"2022-11-23\" ..."},{"path":"data-structure-objects.html","id":"accessing-the-elements-of-a-list","chapter":"6 Dataframes and other objects","heading":"6.2.2 Accessing the Elements of a list","text":"mentioned, individual elements list can accessed double brackets ( [[ ]]), : can also access elements list simple brackets ([]), careful operation result element , another list. common mistake. See :try add element my_l[2], receive error message.error returned list object summed numeric object. fix , simply use double brackets, my_l[[2]] + 1. Accessing elements list simple brackets useful looking sub-list within larger list. example, wanted obtain first second elements my_l, write:named lists, can access elements operator $ my_named_l$df_prices using element’s name. general, efficient advised way working lists. Avoid using positional access list. problem , working interactively list, position elements may change new data arrives. Using names prevents problem , modifying list adding elements, can change order elements, names.\naware RStudio’s autocomplete tool also works \nlists. use , enter list name followed $ \npress tab. dialog box elements available \nlist appear. , just select desired element \npressing enter.\nNext, provide several examples access elements list using operator $ double brackets.Another useful trick working lists can access inner elements directly – one line code – simply using consecutive brackets names. See :operation useful interested elements within larger object. avoids need creating intermediate objects.","code":"\n# accessing elements from list\nprint(my_named_l[[2]])R> [1] \"NYSE\"\nprint(my_named_l[[3]])R>     P   ref_date\nR> 1 1.0 2022-11-23\nR> 2 1.5 2022-11-24\nR> 3 2.0 2022-11-25\nR> 4 2.3 2022-11-26\n# set list\nmy_l <- list('a',\n             c(1, 2, 3),\n             factor('a', 'b'))\n\n# check classes\nclass(my_l[[2]])R> [1] \"numeric\"\nclass(my_l[2])R> [1] \"list\"\n# adding an element to a list (WRONG)\nmy_l[2] + 1R> Error in my_l[2] + 1: non-numeric argument to binary operator\n# set new list with the first and second element of my_l\nmy_new_l <- my_l[c(1,2)]\n\n# print result\nprint(my_new_l)R> [[1]]\nR> [1] \"a\"\nR> \nR> [[2]]\nR> [1] 1 2 3\n# different ways to access a list\nmy_named_l$tickers\nmy_named_l$markets\nmy_named_l[['tickers']]\nmy_named_l[['markets']]\nmy_l <- list(slot1 = c(num1 = 1, \n                       num2 = 2, \n                       num3 = 3), \n             slot2 = c('a', 'b'))\n\n# access the second value of the first element of my_l\nprint(my_l[[1]][2])R> num2 \nR>    2\n# access the first value of the second element of my_l\nprint(my_l[[2]][1])R> [1] \"a\"\n# access the value 'num3' in 'slot1'\nprint(my_l[['slot1']]['num3'])R> num3 \nR>    3"},{"path":"data-structure-objects.html","id":"adding-and-removing-elements-from-a-list","chapter":"6 Dataframes and other objects","heading":"6.2.3 Adding and Removing Elements from a list","text":"add replace elements list, just set new object desired position:operation also possible use names $:remove elements list, set element reserved symbol NULL, : Another way removing elements list use negative index, exclude returned object. See next example, remove second element list using negative index.atomic vectors, removing elements list can also accomplished logical conditions. See next:However, note operation works elements my_l numeric, logical test can applied cases. impossible particular element, R return NA value.","code":"\n# set list\nmy_l <- list('a', 1, 3)\nglimpse(my_l)R> List of 3\nR>  $ : chr \"a\"\nR>  $ : num 1\nR>  $ : num 3\n# add new elements to list\nmy_l[[4]] <- c(1:5)\nmy_l[[2]] <- c('b')\n\n# print result\nglimpse(my_l)R> List of 4\nR>  $ : chr \"a\"\nR>  $ : chr \"b\"\nR>  $ : num 3\nR>  $ : int [1:5] 1 2 3 4 5\n# set list\nmy_l <- list(elem1 = 'a', \n             name1=5)\n\n# set new element\nmy_l$name2 <- 10\n\n# check it\nglimpse(my_l)R> List of 3\nR>  $ elem1: chr \"a\"\nR>  $ name1: num 5\nR>  $ name2: num 10\n# set list\nmy_l <- list(text = 'b', num1 = 2, num2 = 4)\nglimpse(my_l)R> List of 3\nR>  $ text: chr \"b\"\nR>  $ num1: num 2\nR>  $ num2: num 4\n# remove elements\nmy_l[[3]] <- NULL\nglimpse(my_l)R> List of 2\nR>  $ text: chr \"b\"\nR>  $ num1: num 2\n# remove elements\nmy_l$num1 <- NULL\nglimpse(my_l)R> List of 1\nR>  $ text: chr \"b\"\n# set list\nmy_l <- list(a = 1, \n             b = 'text')\n\n# remove second element\nglimpse(my_l[[-2]])R>  num 1\n# set list\nmy_l <- list(1, 2, 3, 4)\n\n# remove elements by condition\nmy_l[my_l > 2] <- NULL\nglimpse(my_l)R> List of 2\nR>  $ : num 1\nR>  $ : num 2"},{"path":"data-structure-objects.html","id":"processing-the-elements-of-a-list","chapter":"6 Dataframes and other objects","heading":"6.2.4 Processing the Elements of a list","text":"important point working lists elements can iterated simple direct way. example, list twenty dataframes, can easily apply function base::summary single line code. example, consider list numeric vectors different sizes:Let’s assume need calculate average vector my_l_num store result atomic vector. operation calling mean function element list, : However, code looks bad took three lines code, one! easier, elegant, smarter way use sapply function, apply function element list. need name list object name function used process element: expected, result identical previous example. Using function sapply preferable, compact efficient alternative - creating mean_1, mean_2 mean_3. Notice first example code works list three elements. fourth element wanted keep code structure, add new line mean_4 <- mean(my_l_num[[4]]) modify output command print <-c(mean_1, mean_2, mean_3, mean_4)).Intelligently, function sapply works way lists size. elements my_l_num, modification necessary my_mean <- sapply(my_l_num, mean), making easier extend code information. combining flexible object, list, programming capacity R, performing extensive operations many complex objects becomes easy.Using generic procedures one premise good efficient programming practices. case R, rule simple: always write code flexible size objects. arrival new data never require modifications code. called DRY rule (don’t repeat ). repeating lines code, previous example, certainly elegant flexible solution used. section gives taste programming capacity R. explained greater detail chapter 8.","code":"\n# set list with different numerical vectors.\nmy_l_num <- list(c(1,2,3), \n                 seq(1:50), \n                 seq(-5,5, by=0.5))\n# calculate means\nmean_1 <- mean(my_l_num[[1]])\nmean_2 <- mean(my_l_num[[2]])\nmean_3 <- mean(my_l_num[[3]])\n\n# print result\nprint(c(mean_1, mean_2, mean_3))R> [1]  2.0 25.5  0.0\n# using sapply\nmy_mean <- sapply(my_l_num, mean)\n\n# print result\nprint(my_mean)R> [1]  2.0 25.5  0.0"},{"path":"data-structure-objects.html","id":"other-useful-functions","chapter":"6 Dataframes and other objects","heading":"6.2.5 Other Useful Functions","text":"unlist - Returns elements list single atomic vector. .list - Converts object list type. names - Returns defines names elements list. ","code":"\nmy_named_l <- list(ticker = 'XXXX4',\n                   price = c(1,1.5,2,3),\n                   market = 'Be')\nmy_unlisted <- unlist(my_named_l)\nprint(my_unlisted)R>  ticker  price1  price2  price3  price4  market \nR> \"XXXX4\"     \"1\"   \"1.5\"     \"2\"     \"3\"    \"Be\"\nclass(my_unlisted)R> [1] \"character\"\nmy_x <- 10:13\nmy_x_as_list <- as.list(my_x)\nprint(my_x_as_list)R> [[1]]\nR> [1] 10\nR> \nR> [[2]]\nR> [1] 11\nR> \nR> [[3]]\nR> [1] 12\nR> \nR> [[4]]\nR> [1] 13\nmy_l <- list(value1 = 1, value2 = 2, value3 = 3)\nprint(names(my_l))R> [1] \"value1\" \"value2\" \"value3\"\nmy_l <- list(1,2,3)\nnames(my_l) <- c('num1', 'num2', 'num3')\nprint(my_l)R> $num1\nR> [1] 1\nR> \nR> $num2\nR> [1] 2\nR> \nR> $num3\nR> [1] 3"},{"path":"data-structure-objects.html","id":"matrices","chapter":"6 Dataframes and other objects","heading":"6.3 Matrices","text":"matrix two-dimensional representation numbers, arranged rows columns. Using matrices powerful way representing numerical data two dimensions , certain situations, matrix functions can simplify complex mathematical operations. R, matrices objects two dimensions, elements must class. can think matrices atomic vectors one extra dimension. matrices, lines columns can named. used correctly, matrix objects can facilitate storage context data. simple example using matrices finance representation stock prices time. rows matrix represents different dates, columns set stock apart:matrix created R following code:set number rows columns explicitly arguments nrow = 4 ncol = 3 base::matrix. names rows columns defined functions colnames rownames, using left side notation rownames(my_mat) <- c(...). Going , can also retrieve names rows columns functions: matrix my_mat created, disposal numerical properties. simple example using matrix operations finance calculation value portfolio. investor 200 shares AAP, 300 share COG, 100 BLK 50 CAM, value portfolio time can calculated follows:\\[V _t = \\sum _{=1} ^{4} N _i P_{,t}\\]formula, \\(N_i\\) number shares purchased asset, \\(P_{,t}\\) price stock date t. simple operation performed matrix multiplication. Translating procedure R code, :last example, use symbol %*%, matrix multiplication two objects class matrix. output shows value portfolio time, resulting small loss investor last date. matrix object also flexible content, long single class. example, can create matrices character elements:Now logic type:flexibility allows user expand representation two-dimensional data beyond numerical values.","code":"R> New names:\nR> • `` -> `...1`\n# set raw data with prices \nraw_data <- c(40.38,  40.14,  40.49,  40.48,  40.64,\n              46.23,  46.17,  45.97,  45.56,  45.46,\n              238.58, 239.61, 234.67, 237.25, 238.92,\n              43.43,  43.96,  44.26,  44.5,   44.86)\n\n# create matrix          \nmy_mat <- matrix(raw_data, nrow = 5, ncol = 4)\ncolnames(my_mat) <- c('AAP', 'COG', 'BLK', 'CAM')\nrownames(my_mat) <- c(\"2010-01-04\", \"2010-01-05\", \"2010-01-06\", \n                      \"2010-01-07\", \"2010-01-08\")\n\n# print result\nprint(my_mat)R>              AAP   COG    BLK   CAM\nR> 2010-01-04 40.38 46.23 238.58 43.43\nR> 2010-01-05 40.14 46.17 239.61 43.96\nR> 2010-01-06 40.49 45.97 234.67 44.26\nR> 2010-01-07 40.48 45.56 237.25 44.50\nR> 2010-01-08 40.64 45.46 238.92 44.86\n# print the names of columns \nprint(colnames(my_mat))R> [1] \"AAP\" \"COG\" \"BLK\" \"CAM\"\n# print the names of rows\nprint(rownames(my_mat))R> [1] \"2010-01-04\" \"2010-01-05\" \"2010-01-06\" \"2010-01-07\"\nR> [5] \"2010-01-08\"\n# set vector with shares purchased\nmy_stocks <- as.matrix(c(200, 300, 100, 50), nrow = 4)\n\n# get value of portfolio with matrix multiplication\nmy_port <- my_mat %*% my_stocks\n\n# print result\nprint(my_port)R>               [,1]\nR> 2010-01-04 47974.5\nR> 2010-01-05 48038.0\nR> 2010-01-06 47569.0\nR> 2010-01-07 47714.0\nR> 2010-01-08 47901.0\n# create matrix with character\nmy_mat_char <- matrix(rep(c('a','b','c'), 3), \n                      nrow = 3, \n                      ncol = 3)\n\n# print it                    \nprint(my_mat_char)R>      [,1] [,2] [,3]\nR> [1,] \"a\"  \"a\"  \"a\" \nR> [2,] \"b\"  \"b\"  \"b\" \nR> [3,] \"c\"  \"c\"  \"c\"\n# create matrix with logical\nmy_mat_logical <- matrix(sample(c(TRUE,FALSE), \n                                size = 3*3,\n                                replace = TRUE),\n                         nrow = 3, \n                         ncol = 3)\n\n# print it                    \nprint(my_mat_logical)R>       [,1]  [,2]  [,3]\nR> [1,] FALSE  TRUE  TRUE\nR> [2,]  TRUE FALSE  TRUE\nR> [3,]  TRUE  TRUE FALSE"},{"path":"data-structure-objects.html","id":"selecting-elements-from-a-matrix","chapter":"6 Dataframes and other objects","heading":"6.3.1 Selecting Elements from a matrix","text":"Following notation atomic vector, can select pieces matrix using indexes. difference matrices two-dimensional objects, atomic vectors one-dimensional.57 extra dimension matrices requires selecting elements lines, also columns. elements array can accessed notation [, j] represents row j column. See following example:select entire row column, simply leave blank index, following example:Notice result indexing atomic vector, matrix. wanted extracted piece maintain matrix class, vertical horizontal orientation, force conversion using functions .matrix matrix: Pieces matrix can also selected using vectors. wanted new matrix elements second row first column third row second column, use following code:Finally, using logical tests select elements matrices also possible: ","code":"\n# create matrix\nmy_mat <- matrix(1:9, nrow = 3)\n\n# display it\nprint(my_mat)R>      [,1] [,2] [,3]\nR> [1,]    1    4    7\nR> [2,]    2    5    8\nR> [3,]    3    6    9\n# display element in [1,2]\nprint(my_mat[1,2])R> [1] 4\n# select all rows from column 2\nprint(my_mat[, 2])R> [1] 4 5 6\n# select all columns from row 1\nprint(my_mat[1, ])R> [1] 1 4 7\n# force matrix conversion and print result\nprint(as.matrix(my_mat[ ,2]))R>      [,1]\nR> [1,]    4\nR> [2,]    5\nR> [3,]    6\n# force matrix conversion for one row and print result\nprint(matrix(my_mat[1, ], nrow=1))R>      [,1] [,2] [,3]\nR> [1,]    1    4    7\n# select some elements and print them\nprint(my_mat[2:3, 1:2])R>      [,1] [,2]\nR> [1,]    2    5\nR> [2,]    3    6\n# set matrix\nmy_mat <- matrix(1:9, nrow = 3)\n\n# print logical matrix where value is higher than 5\nprint(my_mat >5)R>       [,1]  [,2] [,3]\nR> [1,] FALSE FALSE TRUE\nR> [2,] FALSE FALSE TRUE\nR> [3,] FALSE  TRUE TRUE\n# print the result\nprint(my_mat[my_mat >5])R> [1] 6 7 8 9"},{"path":"data-structure-objects.html","id":"other-useful-functions-1","chapter":"6 Dataframes and other objects","heading":"6.3.2 Other Useful Functions","text":".matrix - Transforms raw data matrix object. t - Returns transposed matrix. rbind - Returns merger (bind) matrices, row orientation. cbind - Returns merger (bind) matrices, column orientation. rowMeans - Returns mean matrix, row wise. colMeans - Returns mean matrix, column wise. ","code":"\nmy_mat <- as.matrix(1:5)\nprint(my_mat)R>      [,1]\nR> [1,]    1\nR> [2,]    2\nR> [3,]    3\nR> [4,]    4\nR> [5,]    5\nmy_mat <- matrix(seq(10,20, \n                     length.out = 6), \n                 nrow = 3)\nprint(my_mat)R>      [,1] [,2]\nR> [1,]   10   16\nR> [2,]   12   18\nR> [3,]   14   20\nprint(t(my_mat))R>      [,1] [,2] [,3]\nR> [1,]   10   12   14\nR> [2,]   16   18   20\nmy_mat_1 <- matrix(1:5, nrow = 1)\nprint(my_mat_1)R>      [,1] [,2] [,3] [,4] [,5]\nR> [1,]    1    2    3    4    5\nmy_mat_2 <- matrix(10:14, nrow = 1)\nprint(my_mat_2)R>      [,1] [,2] [,3] [,4] [,5]\nR> [1,]   10   11   12   13   14\nmy_rbind_mat <- rbind(my_mat_1, my_mat_2)\nprint(my_rbind_mat)R>      [,1] [,2] [,3] [,4] [,5]\nR> [1,]    1    2    3    4    5\nR> [2,]   10   11   12   13   14\nmy_mat_1 <- matrix(1:4, nrow = 2)\nprint(my_mat_1)R>      [,1] [,2]\nR> [1,]    1    3\nR> [2,]    2    4\nmy_mat_2 <- matrix(10:13, nrow = 2)\nprint(my_mat_2)R>      [,1] [,2]\nR> [1,]   10   12\nR> [2,]   11   13\nmy_cbind_mat <- cbind(my_mat_1, my_mat_2)\nprint(my_cbind_mat)R>      [,1] [,2] [,3] [,4]\nR> [1,]    1    3   10   12\nR> [2,]    2    4   11   13\nmy_mat <- matrix(1:9, nrow=3)\nprint(rowMeans(my_mat))R> [1] 4 5 6\nmy_mat <- matrix(1:9, nrow=3)\nprint(colMeans(my_mat))R> [1] 2 5 8"},{"path":"data-structure-objects.html","id":"exercises-3","chapter":"6 Dataframes and other objects","heading":"6.4 Exercises","text":"","code":""},{"path":"data-structure-objects.html","id":"q.1-5","chapter":"6 Dataframes and other objects","heading":"Q.1","text":"Using function dplyr::tibble, create dataframe called my_df column called x containing sequence -100 100 another column called y value column x added 5. many values column x greater 10 lower 25?\n\nSolution\n\n","code":"my_df <- dplyr::tibble(x = -100:100, \n                        y = x + 5)\n# solution\nmy_sol <- sum((my_df$x > 10)&(my_df$x < 25))"},{"path":"data-structure-objects.html","id":"q.2-5","chapter":"6 Dataframes and other objects","heading":"Q.2","text":"Create new column object my_df called cumsum_x, containing cumulative sum x (cumsum function). new column, many values greater -3500?\n\nSolution\n\n","code":"my_df <- dplyr::tibble(x = -100:100, \n                       y = x + 5)\n\n# solution\nmy_df$cumsum_x <- cumsum(my_df$x)\n\n# solution\nmy_sol <- sum(my_df$cumsum_x > -3500)"},{"path":"data-structure-objects.html","id":"q.3-4","chapter":"6 Dataframes and other objects","heading":"Q.3","text":"Use function dplyr::filter function pipeline operator filter my_df, keeping rows value y column greater 0. number rows resulting table?\n\nSolution\n\n","code":"my_df <- dplyr::tibble(x = -100:100, \n                       y = x + 5)\n\n# solution\nlibrary(tidyverse)\n\nmy_df2 <- my_df %>%\n  filter(y > 0)\n\n# solution\nmy_sol <- nrow(my_df2)"},{"path":"data-structure-objects.html","id":"q.4-4","chapter":"6 Dataframes and other objects","heading":"Q.4","text":"already done , repeat exercises 1, 2 3 using functions tidyverse universe pipeline operator.\n\nSolution\n\n","code":"library(tidyverse)\n\nset.seed(1)\n\nmy_df <- tibble(x = -100:100,\n                y = x + 5) %>%\n  mutate(cumsum_x = cumsum(x))\n\n# solution 01\nsol_01 <- my_df %>%\n  filter(x > 10, \n         x < 25) %>%\n  nrow()\n\n# solution 02\nsol_02 <- my_df %>%\n  mutate(cumsum_x = cumsum(x)) %>%\n  filter(cumsum_x > -3500) %>%\n  nrow()\n\n# solution 03\nsol_03 <- my_df %>%\n  filter(y > 0) %>%\n  nrow()\n\nmessage(str_glue(\n  'Solution 01 = {sol_01} \\n',\n  'Solution 02 = {sol_02} \\n',\n  'Solution 03 = {sol_03}'\n  )\n)"},{"path":"data-structure-objects.html","id":"q.5-4","chapter":"6 Dataframes and other objects","heading":"Q.5","text":"Use BatchGetSymbols package download Google (GOOG) stock data, fromr first_date 2020-12-31. investor bought 1000 USD Google shares first day data kept investment today, value portfolio?\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\nfirst_date <- '2010-01-01'\nlast_date <- '2020-12-31'\n\ndf_prices <- BatchGetSymbols(tickers = 'GOOG', \n                             first.date = first_date,\n                             last.date = last_date)[[2]]\n\nvalue_purchase <- 1000\n\n# solution\nmy_sol <- last(df_prices$price.adjusted)/first(df_prices$price.adjusted)*value_purchase"},{"path":"data-structure-objects.html","id":"q.6-4","chapter":"6 Dataframes and other objects","heading":"Q.6","text":"Use functions afedR::get_data_file readr::read_csv import data grunfeld.csv file. Now, use function dplyr::glimpse functions find number lines imported data. number rows imported table?\n\nSolution\n\n","code":"my_file <- afedR::get_data_file('grunfeld.csv')\n\ndf_grunfeld <- read_csv(my_file, \n                        col_types = cols())\n\n# solution\nglimpse(df_grunfeld)\n\nmy_sol <- nrow(df_grunfeld)"},{"path":"data-structure-objects.html","id":"q.7-3","chapter":"6 Dataframes and other objects","heading":"Q.7","text":"Create list type object three dataframes contents,df1, df2 df3. content size dataframes personal choice. Now, use sapply function custom function find number rows columns dataframe.\n\nSolution\n\n","code":"df1 <- dplyr::tibble(x = 1:10)\ndf2 <- dplyr::tibble(y = runif(100))\ndf3 <- dplyr::tibble(z = rnorm(150),\n                     m = rnorm(150))\n\nmy_l <- list(df1, df2, df3)\n\nmy_fct <- function(df_in) {\n  out <- c('nrows' = nrow(df_in), \n           'ncols' = ncol(df_in))\n  return(out)\n}\n\ntab <- sapply(my_l, my_fct)\ntab"},{"path":"data-structure-objects.html","id":"q.8-2","chapter":"6 Dataframes and other objects","heading":"Q.8","text":"Wihtin R session, create identity matrix (value 1 diagonal, zero ) size 3X3. Tip: use diag function define diagonal matrix.\n\nSolution\n\n","code":"my_size <- 3\nM_identity <- matrix(0, \n                     nrow = my_size, \n                     ncol = my_size)\n\n# solution\ndiag(M_identity) <- 1\n\nprint(M_identity)"},{"path":"basic-classes.html","id":"basic-classes","chapter":"7 Basic Object Classes","heading":"7 Basic Object Classes","text":"basic classes primary elements data representation R. Previously, used basic classes translate raw information files internet. numeric data became numeric column dataframe, text data became character object.chapter, study R’s basic object classes depth, including manipulation content. chapter show operations possible object class can use functions packages manipulate information efficiently. includes following types objects:Numeric (numeric)Text (character)Factors (factor)Logical Values (logical)Dates Time (Date timedate)Missing Data (NA)","code":""},{"path":"basic-classes.html","id":"numeric-objects","chapter":"7 Basic Object Classes","heading":"7.1 Numeric Objects","text":"objects type numeric represent quantities , unsurprisingly, one used objects data research. example, price stock given date, value inflation given period country, net profit company end fiscal year, among many possibilities.","code":""},{"path":"basic-classes.html","id":"creating-and-manipulating-numeric-objects","chapter":"7 Basic Object Classes","heading":"7.1.1 Creating and Manipulating numeric Objects","text":"easy create manipulate numeric objects. expected, can use common symbols mathematical operations, sum (+), difference (-), division (/) multiplication (*). working numeric vectors, mathematical operations carried using element element orientation using vector notation. example, means can add elements two vectors single line code.can see next example, created two vectors perform various operations.difference R programming languages operations vectors different sizes accepted. , can also add numeric vector four elements another two. Whenever happens, R calls recycling rule. states , two different sized vectors interacting, smaller vector repeated often necessary obtain number elements larger vector. See following example: result x + y equivalent 1:4 + c(2, 1, 2, 1). try operate vectors length largest vector multiple length smaller, R performs recycling procedure. However, also sends warning message inform user recycling procedure result perfect match.first three elements x summed first three elements y, expected. However, fourth element x summed first element y. order complete operation, R cycled values vector, restarting first element y.Elements numeric vector can also named. See example next, create vector several named items.Empty numeric vectors can also created. Sometimes, need preallocate empty vector filled values later. situations simple procedure can make code faster; , need use numeric function: can see, using numeric(length = 10), values set zero.","code":"\n# create numeric vectors\nx <- 1:5\ny <- 2:6\n\n# print sum\nprint(x+y)R> [1]  3  5  7  9 11\n# print multiplication\nprint(x*y)R> [1]  2  6 12 20 30\n# print division\nprint(x/y)R> [1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n# print exponentiation\nprint(x^y)R> [1]     1     8    81  1024 15625\n# set x with 4 elements and y with 2\nx <- 1:4\ny <- 2:1\n\n# print sum\nprint(x + y)R> [1] 3 3 5 5\n# set x = 4 elements and y with 3\nx <- c(1, 2, 3, 4)\ny <- c(1, 2, 3)\n\n# print sum (recycling rule)\nprint(x +y)R> Warning in x + y: longer object length is not a multiple of\nR> shorter object lengthR> [1] 2 4 6 5\n# create named vector\nx <- c(item1 = 10, \n       item2 = 14, \n       item3 = 9, \n       item4 = 2)\n\n# print it\nprint(x)R> item1 item2 item3 item4 \nR>    10    14     9     2\n# create empty numeric vector of length 10\nmy_x <- numeric(length = 10)\n\n# print it\nprint(my_x)R>  [1] 0 0 0 0 0 0 0 0 0 0"},{"path":"basic-classes.html","id":"creating-a-numeric-sequence","chapter":"7 Basic Object Classes","heading":"7.1.2 Creating a numeric Sequence","text":"R, two ways create sequence numerical values. first operator : my_seq <- 1:10. method practical notation clear direct.However, using operator : can restrictive. notice creates sequences difference adjacent elements +1 -1? powerful version creation sequences use function seq. , can set intervals value argument . See example next: Another interesting feature function seq possibility creating equally spaced vectors initial value, final value, desired number elements. accomplished using option length.. following code, create array 0 10 20 elements:final number elements object my_seq exactly 20. Function seq automatically calculates sets difference 0.5263 adjacent elements. , calculate difference one element , always find result 0.5263.","code":"\n# create sequence with seq\nmy_seq <- seq(from = -10, \n              to = 10, \n              by = 2)\n\n# print it\nprint(my_seq)R>  [1] -10  -8  -6  -4  -2   0   2   4   6   8  10\n# create sequence with defined number of elements\ndesired_len <- 20\nmy_seq <- seq(from = 0, \n              to = 10, \n              length.out = desired_len)\n\n# print it\nprint(my_seq)R>  [1]  0.0000000  0.5263158  1.0526316  1.5789474  2.1052632\nR>  [6]  2.6315789  3.1578947  3.6842105  4.2105263  4.7368421\nR> [11]  5.2631579  5.7894737  6.3157895  6.8421053  7.3684211\nR> [16]  7.8947368  8.4210526  8.9473684  9.4736842 10.0000000"},{"path":"basic-classes.html","id":"creating-vectors-with-repeated-elements","chapter":"7 Basic Object Classes","heading":"7.1.3 Creating Vectors with Repeated Elements","text":"Another way create numeric vectors using repetition. example, imagine interested vector value 1 repeated ten times. , use function rep: also works vectors. example, let’s say need create vector repeated values c(1, 2). result equal c(1, 2, 1, 2, 1, 2). , use rep way:","code":"\n# repeat vector three times\nmy_x <- rep(x = 1, times = 10)\n\n# print it\nprint(my_x)R>  [1] 1 1 1 1 1 1 1 1 1 1\n# created a vector with repeated elements\nmy_x <- rep(x = c(1, 2), \n            times = 3)\n\n# print it\nprint(my_x)R> [1] 1 2 1 2 1 2"},{"path":"basic-classes.html","id":"creating-vectors-with-random-numbers","chapter":"7 Basic Object Classes","heading":"7.1.4 Creating Vectors with Random Numbers","text":"applications finance economics require use random numbers simulate mathematical models. example, simulation method Monte Carlo can generate asset prices based random numbers Normal distribution.R, several functions create random numbers different statistical distributions. commonly used, however, functions stats::rnorm stats::runif. Remember package stats automatically loaded R starts. , unless changed default settings R’s startup, need make call library(stats). Function rnorm generates random numbers Normal distribution, options mean standard deviation. mean set point highest frequency sd (standard deviation) change dispersion histogram.generated ten thousand random numbers Normal distribution, mean zero standard deviation equal one. Let’s see distribution numbers looks close Normal, bell shaped distribution:Yes, shape frequency distribution visually close bell curve. can change parameters mean sd different shapes Normal distribution.Function runif generates random values uniformly distributed maximum minimum. commonly used simulate probabilities values zero one. runif function three input parameters: desired number random values, minimum value, maximum value. See following example:Note functions, rnorm runif, limited respective distribution. alternative flexible way generate random values use sample function. accepts vector input returns scrambled version elements. flexibility lies fact input vector can anything. example, wanted create random vector elements taken vector c(0, 5, 15, 20, 25), like : Function sample also allows random selection fixed number elements. wanted select one element my_vec randomly, write code :wanted two random elements my_rnd_vec:Besides, can select values smaller vector create larger vector. Consider case vector numbers c(5, 10, 15) want create random vector ten elements. , use option replace = TRUE.Another important feature sample works type vector, numeric class:point, important acknowledge generation random values R entirely random! Internally, computer makes selections based deterministic queue. Every time chance-related functions, rnorm, runif, sample, called code, computer chooses different place queue according various parameters. practical effect actual chosen values unpredictable user’s viewpoint. However, computer, selection absolutely predictable deterministic.One neat trick can select starting place queue random values using function base::set.seed. practical terms, result , call set.seed, subsequent numbers random selections every code execution. Using set.seed strongly recommended reproducibility code involving randomness. Anyone can replicate exact results, even involves selection random numbers. See following example. previous code, value 10 set.seed(10) integer chosen user. call set.seed(10), selections random numbers start point queue. Therefore, random vectors . running previous chunk code computer, ’ll see values my_rnd_vec_1 my_rnd_vec_2 exactly ones printed book.Function set.seed also works sample:Likewise, execute previous code R session, ’ll see exact selections.","code":"\n# generate 10 random numbers from a Normal distribution\nmy_rnd_vec <- rnorm(n = 10000, \n                    mean = 0, \n                    sd = 1)\n\n# print it\nglimpse(my_rnd_vec)R>  num [1:10000] -0.169 0.612 0.678 0.568 -0.573 ...\n# create a random vector with minimum and maximum\nmy_rnd_vec <- runif(n = 10, \n                    min = -5, \n                    max = 5)\n\n# print it\nprint(my_rnd_vec)R>  [1] -0.3947496  3.4054654  3.1049157  3.5276227 -1.5256521\nR>  [6] -1.0434816 -4.0893803  3.2413137 -4.5963401  4.3946481\n# create sequence\nmy_vec <- seq(from = 0, to = 25, by=5)\n\n# sample sequence\nmy_rnd_vec <- sample(my_vec)\n\n# print it\nprint(my_rnd_vec)R> [1] 20 25  0  5 15 10\n# sample one element of my_vec\nmy_rnd_vec <- sample(my_vec, size = 1)\n\n# print it\nprint(my_rnd_vec)R> [1] 25\n# sample two elements of my_vec\nmy_rnd_vec <- sample(my_vec, size = 2)\n\n# print it\nprint(my_rnd_vec)R> [1] 20  0\n# create vector\nmy_vec <- c(5, 10, 15)\n\n# sample\nmy_rnd_vec <- sample(x = my_vec, size = 10, replace = TRUE)\nprint(my_rnd_vec)R>  [1] 10  5  5 15 10 10 10 10 10 15\n# example of sample with characters\nprint(sample(c('elem 1','elem 2','elem 3'),\n             size = 1))R> [1] \"elem 1\"\n# example of sample with list\nprint(sample(list(x = c(1,1,1),\n                  y = c('a', 'b')),\n             size = 1))R> $y\nR> [1] \"a\" \"b\"\n# set seed with integer 10\nset.seed(seed = 10)\n\n# create and print \"random\" vectors\nmy_rnd_vec_1 <- runif(5)\nprint(my_rnd_vec_1)R> [1] 0.50747820 0.30676851 0.42690767 0.69310208 0.08513597\nmy_rnd_vec_2 <- runif(5)\nprint(my_rnd_vec_2)R> [1] 0.2254366 0.2745305 0.2723051 0.6158293 0.4296715\n# fix seed\nset.seed(seed = 15)\n\n# print vectors\nprint(sample(1:10))R>  [1]  5  2  1  6  8 10  3  7  9  4\nprint(sample(10:20))R>  [1] 13 15 10 17 20 14 19 12 11 18 16"},{"path":"basic-classes.html","id":"accessing-the-elements-of-a-numeric-vector","chapter":"7 Basic Object Classes","heading":"7.1.5 Accessing the Elements of a numeric Vector","text":"elements numerical vector can accessed brackets ([]). example, wanted first element x, can use x[1]:notation used extract parts vector. wanted create sub-vector first second element x, can achieve goal next chunk code:access named elements numeric array, simply use name character value vector inside brackets.can also access elements numerical vector using logical tests. example, interested knowing values x larger 0, use following code:selection elements vector, according criteria, called logical indexing. Objects type logical treated later chapter.","code":"\n# set vector\nx <- c(-1, 4, -9, 2)\n\n# get first element\nfirst_elem_x <- x[1]\n\n# print it\nprint(first_elem_x)R> [1] -1\n# sub-vector of x\nsub_x <- x[1:2]\n\n# print it\nprint(sub_x)R> [1] -1  4\n# set named vector\nx <- c(item1 = 10, item2 = 14, item3 = -9, item4 = -2)\n\n# access elements by name\nprint(x['item2'])R> item2 \nR>    14\nprint(x[c('item2','item4')])R> item2 item4 \nR>    14    -2\n# find all values of x higher than zero\nprint(x[x > 0])R> item1 item2 \nR>    10    14"},{"path":"basic-classes.html","id":"modifying-and-removing-elements-of-a-numeric-vector","chapter":"7 Basic Object Classes","heading":"7.1.6 Modifying and Removing Elements of a numeric Vector","text":"modification vector simple. Just indicate changes assign symbol (<-): modification can also performed block-wise:Using conditions change values vector also possible:removal elements vector carried using negative index:Notice using negative index simply returns original vector, without elements brackets.","code":"\n# set vector\nmy_x <- 1:4\n\n# modify first element to 5\nmy_x[1] <- 5\n\n# print result\nprint(my_x)R> [1] 5 2 3 4\n# set vector\nmy_x <- 0:5\n\n# set the first three elements to 5\nmy_x[1:3] <- 5\n\n# print result\nprint(my_x)R> [1] 5 5 5 3 4 5\n# set vector\nmy_x <- -5:5\n\n# set any value lower than 2 to 0\nmy_x[my_x<2] <- 0\n\n# print result\nprint(my_x)R>  [1] 0 0 0 0 0 0 0 2 3 4 5\n# create vector\nmy_x <- -5:5\n\n# remove first and second element of my_x\nmy_x <- my_x[-(1:2)]\n\n# show result\nprint(my_x)R> [1] -3 -2 -1  0  1  2  3  4  5"},{"path":"basic-classes.html","id":"creating-groups","chapter":"7 Basic Object Classes","heading":"7.1.7 Creating Groups","text":"common data task create groups based numerical data. example, can calculate many cases sample located within certain numerical range. Now, let’s imagine vector daily returns stock, percentage change prices one day another. simple way measure risk investment divide return interval five parts verify percentage occurrences returns range. simple calculation show, example, many days return negative, drop stock price.R, function used create intervals numerical vector base::cut. See following example, create random vector Normal distribution five groups intervals defined data. aware ranges define names my_cut, result factor object. cover object future section. now, worthwhile say factors simply groups within data. Going forward, can also check often find cases group using base::table:expected, distribution values balanced, higher occurrence values around zero – mean.cut function, can also define custom breaks data group names. See next, use tibble organize data:Notice , example creating group numerical vector, breaks defined my_breaks names my_labels. can check distribution groups function table:","code":"\n# set random vector\nmy_x <- rnorm(10000)\n\n# create groups with 5 breaks\nmy_cut <- cut(x = my_x, breaks = 5)\n\n# print it!\nprint(head(my_cut))R> [1] (-2.18,-0.71] (-0.71,0.759] (-2.18,-0.71] (-0.71,0.759]\nR> [5] (-0.71,0.759] (-2.18,-0.71]\nR> 5 Levels: (-3.66,-2.18] (-2.18,-0.71] ... (2.23,3.7]\nprint(table(my_cut))R> my_cut\nR> (-3.66,-2.18] (-2.18,-0.71] (-0.71,0.759]  (0.759,2.23] \nR>           154          2132          5459          2149 \nR>    (2.23,3.7] \nR>           106\n# create random vector in tibble\nmy_df <- tibble(x = rnorm(10000))\n\n# define breaks and labels manually\nmy_breaks <- c(min(my_x)-1, -1, 1, max(my_x)+1)\nmy_labels <- c('Low','Normal', 'High')\n\n# create group from numerical vector\nmy_df <- my_df %>%\n  mutate(cut_x = cut(x = x, \n                     breaks = my_breaks, \n                     labels = my_labels))\n\n# glimpse it!\nglimpse(my_df)R> Rows: 10,000\nR> Columns: 2\nR> $ x     <dbl> -0.42217453, 1.21510691, -0.48018365, 0.0904…\nR> $ cut_x <fct> Normal, High, Normal, Normal, Low, Normal, N…\nprint(table(my_df$cut_x))R> \nR>    Low Normal   High \nR>   1593   6770   1637"},{"path":"basic-classes.html","id":"other-useful-functions-2","chapter":"7 Basic Object Classes","heading":"7.1.8 Other Useful Functions","text":".numeric - Converts object numeric class. unique - Returns unique values numeric vector. sum - Sums elements numeric vector. max - Returns maximum value numeric vector. min - Returns minimum value numeric vector. .max - Returns position maximum value numeric object. .min - Returns position minimum value numeric object. sort - Returns sorted (ascending descending) version numeric vector. cumsum - Returns cumulative sum elements numerical vector. prod - Returns product (multiplication) elements numerical vector. cumprod - Returns cumulative product elements numeric vector. ","code":"\nmy_text <- c('1', '2', '3')\nclass(my_text)R> [1] \"character\"\nmy_x <- as.numeric(my_text)\nprint(my_x)R> [1] 1 2 3\nclass(my_x)R> [1] \"numeric\"\nmy_x <- c(1, 1, 2, 3, 3, 5)\nprint(unique(my_x))R> [1] 1 2 3 5\nmy_x <- 1:50\nmy_sum <- sum(my_x)\nprint(my_sum)R> [1] 1275\nx <- c(10, 14, 9, 2)\nmax_x <- max(x)\nprint(max_x)R> [1] 14\nx <- c(12, 15, 9, 2)\nmin_x <- min(x)\nprint(min_x)R> [1] 2\nx <- c(100, 141, 9, 2)\nwhich_max_x <- which.max(x)\ncat(paste('The position of the max value of x is ', \n          which_max_x))R> The position of the max value of x is  2\ncat(' and its value is ', x[which_max_x])R>  and its value is  141\nx <- c(10, 14, 9, 2)\nwhich_min_x <- which.min(x)\ncat(paste('The position of the min value of x is ',\n          which_min_x, ' and its value is ', x[which_min_x]))R> The position of the min value of x is  4  and its value is  2\nx <- runif(5)\nprint(sort(x, decreasing = FALSE))R> [1] 0.1032680 0.3004002 0.4337767 0.5133841 0.7782837\nprint(sort(x, decreasing = TRUE))R> [1] 0.7782837 0.5133841 0.4337767 0.3004002 0.1032680\nmy_x <- 1:25\nmy_cumsum <- cumsum(my_x)\nprint(my_cumsum)R>  [1]   1   3   6  10  15  21  28  36  45  55  66  78  91 105\nR> [15] 120 136 153 171 190 210 231 253 276 300 325\nmy_x <- 1:10\nmy_prod <- prod(my_x)\nprint(my_prod)R> [1] 3628800\nmy_x <- 1:10\nmy_prod <- cumprod(my_x)\nprint(my_prod)R>  [1]       1       2       6      24     120     720    5040\nR>  [8]   40320  362880 3628800"},{"path":"basic-classes.html","id":"character-objects","chapter":"7 Basic Object Classes","heading":"7.2 Character Objects","text":"character class, simply text class, used store textual information. practical example finance extract sentiments Facebook Twitter posts use predict future market prices. worth knowing analyzing textual information upward trend research (Gentzkow, Kelly, Taddy 2017), many R packages developed last years.R several features facilitate creation manipulation text type objects. base functions shipped installation R comprehensive suited cases. However, package stringr (Wickham 2022b) provides many functions greatly expand basic functionality.positive aspect stringr functions start name str_ informative. , using auto-completion feature (tab key) described previous chapter, easy find names functions. Following preference packages tidyverse, focus functions stringr. base functions string manipulation presented limited way. ","code":""},{"path":"basic-classes.html","id":"creating-a-simple-character-object","chapter":"7 Basic Object Classes","heading":"7.2.1 Creating a Simple character Object","text":"R, every character object created encapsulating text double quotation marks (” “) single (’ ’). create array characters stock tickers, can following code: can confirm class created object function class: ","code":"\ntickers <- c('MMM', 'FB', 'ICE')\nprint(tickers)R> [1] \"MMM\" \"FB\"  \"ICE\"\nclass(tickers)R> [1] \"character\""},{"path":"basic-classes.html","id":"creating-structured-character-objects","chapter":"7 Basic Object Classes","heading":"7.2.2 Creating Structured character Objects","text":"can also use R create text vector sort structure. example, vector c('ticker 1', 'ticker 2', ..., 'ticker 19', 'ticker 20') clear logic. combines text ticker values vector starts 1 ends 20.create text vector junction text numbers, use stringr::str_c paste function. See following example, create previous structured text two ways, space characters numbers, without . can procedure text vectors:Another possibility building structured text repetition content another object. character objects, use function stringr!str_dup base::strrep purpose. Consider following example: ","code":"\nlibrary(stringr)\n\n# create sequence and tex\nmy_seq <- 1:20\nmy_text <- 'text'\n\n# paste objects together (without space)\nmy_char <- str_c(my_text, my_seq)\nprint(my_char)R>  [1] \"text1\"  \"text2\"  \"text3\"  \"text4\"  \"text5\"  \"text6\" \nR>  [7] \"text7\"  \"text8\"  \"text9\"  \"text10\" \"text11\" \"text12\"\nR> [13] \"text13\" \"text14\" \"text15\" \"text16\" \"text17\" \"text18\"\nR> [19] \"text19\" \"text20\"\n# paste objects together (with space)\nmy_char <- str_c(my_text, \n                 my_seq, \n                 sep = ' ')\nprint(my_char)R>  [1] \"text 1\"  \"text 2\"  \"text 3\"  \"text 4\"  \"text 5\" \nR>  [6] \"text 6\"  \"text 7\"  \"text 8\"  \"text 9\"  \"text 10\"\nR> [11] \"text 11\" \"text 12\" \"text 13\" \"text 14\" \"text 15\"\nR> [16] \"text 16\" \"text 17\" \"text 18\" \"text 19\" \"text 20\"\n# set character value\nmy_x <- 'My name is'\n\n# set character vector\nmy_names <- c('Marcelo', 'Ricardo', 'Tarcizio')\n\n# paste and print\nprint(str_c(my_x, my_names, sep = ' '))R> [1] \"My name is Marcelo\"  \"My name is Ricardo\" \nR> [3] \"My name is Tarcizio\"\n# repeat 'abc' five times\nmy_char <- str_dup(string = 'abc', times = 5)\n\n# print it\nprint(my_char)R> [1] \"abcabcabcabcabc\""},{"path":"basic-classes.html","id":"character-constants","chapter":"7 Basic Object Classes","heading":"7.2.3 character Constants","text":"R also allows direct access letters Roman alphabet. stored reserved (constant) objects, called letters LETTERS. See example next. Note , cases, letters LETTERS functions. character objects automatically embedded constants R. Even though appear environment, always available use. may overwrite object names, letters <- 'char', advised. never know used.constant character objects R month.abb, shows abbreviation months month.name. content presented next. ","code":"\n# print all letters in alphabet (no cap)\nprint(letters)R>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\"\nR> [15] \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n# print all letters in alphabet (WITH CAP)\nprint(LETTERS)R>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\"\nR> [15] \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n# print abbreviation and full names of months\nprint(month.abb)R>  [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\"\nR> [10] \"Oct\" \"Nov\" \"Dec\"\nprint(month.name)R>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \nR>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \nR>  [9] \"September\" \"October\"   \"November\"  \"December\""},{"path":"basic-classes.html","id":"selecting-pieces-of-a-text-object","chapter":"7 Basic Object Classes","heading":"7.2.4 Selecting Pieces of a Text Object","text":"common beginner’s mistake select characters text using brackets, done selecting elements vector. Consider following code:NA value indicates second element my_char exist. happens using square brackets reserved accessing elements atomic vector, characters within larger text. Watch happens use my_char[1]:result simply ABCDE text, first item my_char. select pieces text, need use function stringr::str_sub base::substr: functions also work atomic vectors. Let’s assume imported text data, raw dataset contains 3-letter identifier company, always location string. Let’s simulate situation R:, want information first three characters element my_char_vec. select , can use functions .\nVector operations character objects common \nR. Almost anything can single element can \nexpanded vectors. facilitates development research\nscripts can easily perform complicated tasks series \nelements single line code.\n","code":"\n# set char object\nmy_char <- 'ABCDE'\n\n# print its second element (WRONG - RESULT is NA)\nprint(my_char[2])R> [1] NA\nprint(my_char[1])R> [1] \"ABCDE\"\n# print third and fourth characters\nmy_substr <- str_sub(string = my_char,\n                     start = 2,\n                     end = 2)\nprint(my_substr)R> [1] \"B\"\n# build char vec\nmy_char_vec <- paste0(c('ABC','VBC','ZMN'),\n                      ' - other ignorable text')\nprint(my_char_vec)R> [1] \"ABC - other ignorable text\"\nR> [2] \"VBC - other ignorable text\"\nR> [3] \"ZMN - other ignorable text\"\n# get ids with stringr::str_sub\nids_vec <- str_sub(my_char_vec, 1, 3)\nprint(ids_vec)R> [1] \"ABC\" \"VBC\" \"ZMN\""},{"path":"basic-classes.html","id":"finding-and-replacing-characters-of-a-text","chapter":"7 Basic Object Classes","heading":"7.2.5 Finding and Replacing Characters of a Text","text":"useful operation handling texts locate specific patterns text within character object functions stringr::str_locate/base::regexpr stringr::str_locate_all/base::gregexpr. However, move examples, important point , default, functions use expressions type regex – regular expressions (Thompson 1968). specific format identification patterns text. regex used correctly, can make life lot easier. ’ll able find complex string patterns effortlessly.common case string search verify position existence smaller text within larger text. cases, however, using language regex unnecessary. Therefore, location replacement characters next example fixed type, .e., without using regex. information passed stringr function setting pattern input stringr::fixed, str_locate(str_in, pattern = fixed('pattern match'). following example shows find D character range characters.Note str_locate function returns first occurrence D. locate instances, use function str_locate_all.replace characters text, use functions str_replace str_replace_all stringr sub gsub base package. previous example, stringr::str_replace replaces first occurrence character, stringr::str_replace_all performs global substitution; applies matches. differences: now, globally substitute characters., worth pointing operations replacements strings also work vectors. look next example.","code":"\n# set character object\nmy_char <- 'ABCDEF-ABCDEF-ABC'\n\n# find position of 'D' using str_locate\npos <- str_locate(my_char, fixed('D'))\nprint(pos)R>      start end\nR> [1,]     4   4\n# set object\nmy_char <- 'ABCDEF-ABCDEF-ABC'\n\n# find position of ALL 'D' using str_locate_all\npos <- str_locate_all(my_char, fixed('D'))\nprint(pos)R> [[1]]\nR>      start end\nR> [1,]     4   4\nR> [2,]    11  11\n# set char object\nmy_char <- 'ABCDEF-ABCDEF-ABC'\n\n# substitute the FIRST 'ABC' for 'XXX' with str_replace\nmy_char <- str_replace(string = my_char,\n                       pattern = 'ABC',\n                       replacement = 'XXX')\nprint(my_char)R> [1] \"XXXDEF-ABCDEF-ABC\"\n# set char object\nmy_char <- 'ABCDEF-ABCDEF-ABC'\n\n# substitute ALL 'ABC' for 'XXX' with str_replace_all\nmy_char <- str_replace_all(string = my_char,\n                           pattern = 'ABC',\n                           replacement = 'XXX')\n\n# print result\nprint(my_char)R> [1] \"XXXDEF-XXXDEF-XXX\"\n# set char object\nmy_char <- c('ABCDEF','DBCFE','ABC')\n\n# create an example of vector\nmy_char_vec <- paste(sample(my_char, 5, replace = T),\n                     sample(my_char, 5, replace = T),\n                     sep = ' - ')\n\n# show it\nprint(my_char_vec)R> [1] \"ABC - DBCFE\"     \"ABCDEF - ABCDEF\" \"DBCFE - DBCFE\"  \nR> [4] \"ABCDEF - ABC\"    \"ABCDEF - ABCDEF\"\n# substitute all occurrences of 'ABC'\nmy_char_vec <- str_replace_all(string = my_char_vec,\n                               pattern = 'ABC',\n                               replacement = 'XXX')\n\n# print result\nprint(my_char_vec)R> [1] \"XXX - DBCFE\"     \"XXXDEF - XXXDEF\" \"DBCFE - DBCFE\"  \nR> [4] \"XXXDEF - XXX\"    \"XXXDEF - XXXDEF\""},{"path":"basic-classes.html","id":"splitting-text","chapter":"7 Basic Object Classes","heading":"7.2.6 Splitting Text","text":"Eventually, need break text different parts. time, want isolate piece particular information full string using delimiter text. example, text 'ABC;DEF;GHI' three sub-characters divided symbol ;. separate text several parts, use stringr::str_split base::strsplit. functions break original text several fractions, according chosen delimiter character: output function object type list. access text BCD object splitted_char, can use following code:example split character vectors, see next code.Notice , , object type list returned, element split text input vector.","code":"\n# set char\nmy_char <- 'ABC;ABC;BCD'\n\n# split it based on ';' and using stringr::str_split\nsplitted_char <- str_split(my_char, ';')\n\n# print result\nprint(splitted_char)R> [[1]]\nR> [1] \"ABC\" \"ABC\" \"BCD\"\nprint(splitted_char[[1]][3])R> [1] \"BCD\"\n# set char\nmy_char_vec <- c('ABCDEF','DBCFE','ABFC','ACD')\n\n# split it based on 'B' and using stringr::strsplit\nsplitted_char <- str_split(my_char_vec, 'B')\n\n# print result\nprint(splitted_char)R> [[1]]\nR> [1] \"A\"    \"CDEF\"\nR> \nR> [[2]]\nR> [1] \"D\"   \"CFE\"\nR> \nR> [[3]]\nR> [1] \"A\"  \"FC\"\nR> \nR> [[4]]\nR> [1] \"ACD\""},{"path":"basic-classes.html","id":"finding-the-number-of-characters-in-a-text","chapter":"7 Basic Object Classes","heading":"7.2.7 Finding the Number of Characters in a Text","text":"want discover number characters character object, can use functions stringr::str_length base::nchar. functions also work atomic vectors. See examples : now example vectors.","code":"\n# set char\nmy_char <- 'abcdef'\n\n# print number of characters using stringr::str_length\nprint(str_length(my_char))R> [1] 6\n#set char\nmy_char <- c('a', 'ab', 'abc')\n\n# print number of characters using stringr::str_length\nprint(str_length(my_char))R> [1] 1 2 3"},{"path":"basic-classes.html","id":"generating-combinations-of-text","chapter":"7 Basic Object Classes","heading":"7.2.8 Generating Combinations of Text","text":"One useful trick R use functions outer expand.grid create possible combinations elements different objects. useful want create character vector combining possible elements different vectors. example, wanted create vector combinations c('', 'b') 'c('','') c('-', '-B',...), write:output outer matrix type object. wanted change comb_mat atomic vector, can use function .character:Another way reach objective using function tidyr::expand_grid base::expand.grid. Look next example, create different phrases based combinations character vectors., used function expand.grid create dataframe containing possible combinations my_vec_1 my_vec_2. pasted contents columns using paste0.","code":"\n# set char vecs\nmy_vec_1 <- c('a','b')\nmy_vec_2 <- c('A','B')\n\n# combine in matrix\ncomb_mat <- outer(my_vec_1, my_vec_2, paste, sep='-')\n\n# print it!\nprint(comb_mat)R>      [,1]  [,2] \nR> [1,] \"a-A\" \"a-B\"\nR> [2,] \"b-A\" \"b-B\"\nprint(as.character(comb_mat))R> [1] \"a-A\" \"b-A\" \"a-B\" \"b-B\"\nlibrary(tidyverse)\n\n# set vectors\nmy_vec_1 <- c('John ', 'Claire ', 'Adam ')\nmy_vec_2 <- c('is fishing.', 'is working.')\n\n# create df with all combinations\nmy_df <- expand_grid(name = my_vec_1,\n                     verb = my_vec_2)\n\n# print df\nprint(my_df)R> # A tibble: 6 × 2\nR>   name      verb       \nR>   <chr>     <chr>      \nR> 1 \"John \"   is fishing.\nR> 2 \"John \"   is working.\nR> 3 \"Claire \" is fishing.\nR> 4 \"Claire \" is working.\nR> 5 \"Adam \"   is fishing.\nR> 6 \"Adam \"   is working.\n# paste columns together in tibble\nmy_df <- my_df %>%\n  mutate(phrase = paste0(name, verb) )\n\n# print result\nprint(my_df)R> # A tibble: 6 × 3\nR>   name      verb        phrase            \nR>   <chr>     <chr>       <chr>             \nR> 1 \"John \"   is fishing. John is fishing.  \nR> 2 \"John \"   is working. John is working.  \nR> 3 \"Claire \" is fishing. Claire is fishing.\nR> 4 \"Claire \" is working. Claire is working.\nR> 5 \"Adam \"   is fishing. Adam is fishing.  \nR> 6 \"Adam \"   is working. Adam is working."},{"path":"basic-classes.html","id":"encoding-of-character-objects","chapter":"7 Basic Object Classes","heading":"7.2.9 Encoding of character Objects","text":"R, text string just sequence bytes. translation bytes actual characters achieved using particular encoding structure. time, especially English speaking countries, character encoding issue. However, dealing text data different spoken languages, Portuguese, character encoding something must learn understand.Let’s explore example. , import data text file 'ISO-8859-9' encoding check result.original content file text Portuguese. can see, output readLines shows Latin characters ugly, unreadable symbols. happens encoding file manually changed 'ISO-8859-9', readLines function uses 'UTF-8' default.easiest solution modify input locale readr::read_lines function aware different encoding format:Latin characters now correct encoding read_lines file, 'Latin1'. good policy topic always check encoding imported text files combine R. import functions option . can, give preference 'UTF-8' encoding exporting importing data, popular text files.","code":"\nlibrary(readr)\n\n# read text file\nmy_f <- afedR::get_data_file('FileWithLatinChar_Latin1.txt')\n\nmy_char <- read_lines(my_f)\n\n# print it\nprint(my_char)R> [1] \"A casa \\xe9 bonita e tem muito espa\\xe7o\"\nmy_char <- read_lines(my_f, \n                      locale = locale(encoding='Latin1'))\n\n# print it\nprint(my_char)R> [1] \"A casa é bonita e tem muito espaço\""},{"path":"basic-classes.html","id":"other-useful-functions-3","chapter":"7 Basic Object Classes","heading":"7.2.10 Other Useful Functions","text":"stringr::str_to_lower/base::tolower - Converts string small caps.stringr::str_to_upper/base::toupper - Converts string upper caps.","code":"\nprint(stringr::str_to_lower('ABC'))R> [1] \"abc\"\nprint(stringr::str_to_upper('abc'))R> [1] \"ABC\""},{"path":"basic-classes.html","id":"factor-objects","chapter":"7 Basic Object Classes","heading":"7.3 Factor Objects","text":"Object class factor used represent groups (categories) database. Imagine dataset containing financial expenses different people whole year. database, find column defines gender individual – male female. information can imported R character object; however, best way represent mutating class factor.factor class integrates nicely statistical procedures packages, work dealing groups becomes easier. example, wanted create chart group within database, simply telling graph function grouping variable type factor. wanted check whether medians different groups statistically different , need pass numerical values grouping factor function performs statistical test. categories data appropriately represented R, working becomes easier efficient.","code":""},{"path":"basic-classes.html","id":"creating-factors","chapter":"7 Basic Object Classes","heading":"7.3.1 Creating factors","text":"creation factors accomplished function factor: Notice , previous example, presentation factors function print shows content extra item called Levels, identifies possible groups object, case, M F. larger number groups, item Levels increases. See next: , also ND (defined) group.important point creating factors Levels inferred data, may correspond reality. Consider following example:Accidentally, data my_status shows one category: Single. However, well-known another category, Married, expected. used my_status , might omit important information, may cause problems future parts code. correct procedure define Levels mannualy, follows:","code":"\n# create factor\nmy_factor <- factor(c('M', 'F', 'M',\n                      'M', 'F', 'F'))\n\n# print it\nprint(my_factor)R> [1] M F M M F F\nR> Levels: F M\n# create factor with 3 levels\nmy_factor <- factor(c('M', 'F', 'M', \n                      'M', 'F', 'F',\n                      'ND'))\n\n# print factor\nprint(my_factor)R> [1] M  F  M  M  F  F  ND\nR> Levels: F M ND\n# set factors with 1 level\nmy_status <- factor(c('Single', 'Single', 'Single'))\n\n# print it\nprint(my_status)R> [1] Single Single Single\nR> Levels: Single\nmy_status <- factor(c('Single', 'Single', 'Single'),\n                    levels = c('Single', 'Married'))\n\nprint(my_status)R> [1] Single Single Single\nR> Levels: Single Married"},{"path":"basic-classes.html","id":"modifying-factors","chapter":"7 Basic Object Classes","heading":"7.3.2 Modifying factors","text":"important point factor type objects Levels immutable update input new data. modify Levels creation factor. new groups current Levels transformed NA (available ) warning message appear screen. behavior may seem strange, first, avoids possible errors code. See following example:expected, first element my_factor becomes NA. , proper way add new factor first transform factor object character object, change content , finally, change class back character factor. Using steps, desired result vector my_factor, three Levels: , b c.tidyverse universe also package handling factors: forcats. current factor modification problem, can use forcats::fct_recode function. ’s example change values factors levels: Using forcats::fct_recode intuitive. need set new names equality symbol.","code":"\n# set factor\nmy_factor <- factor(c('a', 'b', 'a', 'b'))\n\n# change first element of a factor to 'c'\nmy_factor[1] <- 'c'R> Warning in `[<-.factor`(`*tmp*`, 1, value = \"c\"): invalid\nR> factor level, NA generated\n# print result\nprint(my_factor)R> [1] <NA> b    a    b   \nR> Levels: a b\n# set factor\nmy_factor <- factor(c('a', 'b', 'a', 'b'))\n\n# change factor to character\nmy_char <- as.character(my_factor)\n\n# change first element\nmy_char[1] <- 'c'\n\n# mutate it back to class factor\nmy_factor <- factor(my_char)\n\n# show result\nprint(my_factor)R> [1] c b a b\nR> Levels: a b c\nlibrary(forcats)\n\n# set factor\nmy_factor <- factor(c('A', 'B', 'C', \n                      'A', 'C', 'M', \n                      'N'))\n\n# modify factors\nmy_factor <- fct_recode(my_factor,\n                        'D' = 'A',\n                        'E' = 'B',\n                        'F' = 'C')\n\n# print result\nprint(my_factor)R> [1] D E F D F M N\nR> Levels: D E F M N"},{"path":"basic-classes.html","id":"converting-factors-to-other-classes","chapter":"7 Basic Object Classes","heading":"7.3.3 Converting factors to Other Classes","text":"Attention required converting factor another class. converting factor character class, result expected:However, procedure performed conversion factor numeric class, result far expected: can see, elements my_values converted c(1, 2, 3, 4, 5), obviously wrong. happens , internally, factors stored numerical counters, ranging 1 total number Levels. simple transformation minimizes use computer memory. asked R transform factor object numbers, returned values counters, actual numbers stored factors. Solving problem getting result want easy; just turn factor object character numeric, shown next:\nAlways careful transforming factors \nnumbers. bug hard catch may go unnoticed \nbreaks code jeopardizes analysis. Remember ,\ninternally, R converts numerical factor index level number, \nactual number.\n","code":"\n# create factor\nmy_char <-factor(c('a', 'b', 'c'))\n\n# convert and print\nprint(as.character(my_char))R> [1] \"a\" \"b\" \"c\"\n# set factor\nmy_values <- factor(5:10)\n\n# convert to numeric (WRONG)\nprint(as.numeric(my_values))R> [1] 1 2 3 4 5 6\n# converting factors to character and then to numeric\nprint(as.numeric(as.character(my_values)))R> [1]  5  6  7  8  9 10"},{"path":"basic-classes.html","id":"creating-contingency-tables","chapter":"7 Basic Object Classes","heading":"7.3.4 Creating Contingency Tables","text":"creating factor, can find number times group, combination groups, found function table. also called contingency table. simple case, one factor, function table counts number occurrences category: advanced usage function table consider one factor:table created previously demonstrates number occurrences combination groups. Therefore, worth knowing can also use two factors.","code":"\n# create factor\nmy_factor <- factor(sample(c('Pref', 'Ord'),\n                           size = 20,\n                           replace = TRUE))\n\n# print contingency table\nprint(table(my_factor))R> my_factor\nR>  Ord Pref \nR>   10   10\n# set factors\nmy_factor_1 <- factor(sample(c('Pref', 'Ord'),\n                             size = 20,\n                             replace = TRUE))\n\nmy_factor_2 <- factor(sample(paste('Group', 1:3),\n                             size = 20,\n                             replace = TRUE))\n\n# print contingency table with two factors\nprint(table(my_factor_1, \n            my_factor_2))R>            my_factor_2\nR> my_factor_1 Group 1 Group 2 Group 3\nR>        Ord        4       2       8\nR>        Pref       1       1       4"},{"path":"basic-classes.html","id":"other-useful-functions-4","chapter":"7 Basic Object Classes","heading":"7.3.5 Other Useful Functions","text":"levels - Returns Levels object class factor. .factor - Transforms object class factor. split - Based grouping variable another vector, creates list subsets groups target object. function best used separate different samples according groups. ","code":"\nmy_factor <- factor(c('A', 'A', 'B', 'C', 'B'))\nprint(levels(my_factor))R> [1] \"A\" \"B\" \"C\"\nmy_y <- c('a','b', 'c', 'c', 'a')\nmy_factor <- as.factor(my_y)\n\nprint(my_factor)R> [1] a b c c a\nR> Levels: a b c\nmy_factor <- factor(c('A','B','C','C','C','B'))\nmy_x <- 1:length(my_factor)\n\nmy_l <- split(x = my_x, f = my_factor)\n\nprint(my_l)R> $A\nR> [1] 1\nR> \nR> $B\nR> [1] 2 6\nR> \nR> $C\nR> [1] 3 4 5"},{"path":"basic-classes.html","id":"logical-objects","chapter":"7 Basic Object Classes","heading":"7.4 Logical Objects","text":"Logical tests heart R. one line code, can test condition large vector data. procedure commonly used find outliers dataset split sample according condition, particular period.","code":""},{"path":"basic-classes.html","id":"creating-logical-objects","chapter":"7 Basic Object Classes","heading":"7.4.1 Creating logical Objects","text":"Objects class logical created based use condition tests objects. example, sequence 1 10, can check elements higher five following code:previous example, function returned index (position) condition true (TRUE). perform equality tests, simply use equality symbol twice (==): inequality test, use symbol !=, shown next code: also possible test multiple logical conditions. simultaneous occurrences events, use operator &. example, wanted check values sequence 1 10 larger 4 smaller 7, write: non-simultaneous conditions, .e., occurrence one event , use operator |. instance, considering previous sequence, can find values greater 7 lower four writing: aware used parentheses encapsulate logical conditions cases. Although strictly necessary, good coding practice. used idx <- (my_x > 7 | my_x < 4) result , using parentheses makes code cleaner isolating logical tests.Another interesting use logical objects test whether item found another vector. , use operator %%. example, suppose names two countries, c('Country 1', 'Country 2'), want know can find countries another vector. operation similar using equality test vector notation. ’s example:resulting dataframe rows 'Country 1' 'Country 2'. operator %%, filtered table keeps desired rows.","code":"\n# set numerical\nmy_x <- 1:10\n\n# print a logical test\nprint(my_x > 5)R>  [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\nR> [10]  TRUE\n# print position of elements from logical test\nprint(which(my_x > 5))R> [1]  6  7  8  9 10\n# create char\nmy_char <- rep(c('abc', 'bcd'), \n               times = 5)\n\n# print its contents\nprint(my_char)R>  [1] \"abc\" \"bcd\" \"abc\" \"bcd\" \"abc\" \"bcd\" \"abc\" \"bcd\" \"abc\"\nR> [10] \"bcd\"\n# print logical test\nprint(my_char == 'abc')R>  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\nR> [10] FALSE\n# print inequality test\nprint(my_char != 'abc')R>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\nR> [10]  TRUE\nmy_x <- 1:10\n\n# print logical for values higher than 4 and lower than 7\nprint((my_x > 4)&(my_x < 7) )R>  [1] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE\nR> [10] FALSE\n# print the actual values\nidx <- which( (my_x > 4)&(my_x < 7) )\nprint(my_x[idx])R> [1] 5 6\n# location of elements higher than 7 or lower than 4\nidx <- which( (my_x > 7)|(my_x < 4) )\n\n# print elements from previous condition\nprint(my_x[idx])R> [1]  1  2  3  8  9 10\nlibrary(dplyr)\n# location of elements higher than 7 or lower than 4\nmy_contries <- c('Country 1', 'Country 2')\n\n# set df\nn_obs <- 100\ndf_temp <- tibble(country = str_c('Country ',\n                                  sample(1:10, \n                                         size = n_obs,\n                                         replace = TRUE)),\n                  inflation.rate = rnorm(n_obs, sd = 0.05) ) %>%\n  glimpse()R> Rows: 100\nR> Columns: 2\nR> $ country        <chr> \"Country 3\", \"Country 1\", \"Country …\nR> $ inflation.rate <dbl> -0.037301808, -0.060783522, -0.0062…\n# filter rows of df with selected tickers\ndf_temp <- df_temp %>%\n  filter(country %in% my_contries) %>%\n  glimpse()R> Rows: 18\nR> Columns: 2\nR> $ country        <chr> \"Country 1\", \"Country 2\", \"Country …\nR> $ inflation.rate <dbl> -0.060783522, -0.002706447, -0.0193…"},{"path":"basic-classes.html","id":"date-and-time","chapter":"7 Basic Object Classes","heading":"7.5 Date and Time","text":"representation manipulation dates important aspect research. dates dataset, must certain correctly represented R correct timezone. section, give priority package lubridate (Spinu, Grolemund, Wickham 2022), offers efficient diverse functions time manipulation. , however, many packages can also help user. reader must perform date operation covered , suggest looking packages chron (James Hornik 2022), timeDate (Wuertz, Setz, Chalabi 2022), bizdays (Freitas 2022). ","code":""},{"path":"basic-classes.html","id":"creating-simple-dates","chapter":"7 Basic Object Classes","heading":"7.5.1 Creating Simple Dates","text":"R, several classes can represent dates. choice one another depends required precision time representation. situations require knowledge day (time), others, clock time can important data collected day knowing time day data point can affect research.basic class, indicating day, month, year, Date. Using package lubridate, create date class object functions ymd (year-month-date), dmy (day-month-year) e mdy (month-day-year). order components, choice function, set according input character. look: Note functions return exact object. difference usage way input string structured position day, month, year.One benefit using lubridate package functions smart dealing different formats. note defined data elements using dash (-) separator numeric values, '2020-06-24' previous case. formats also automatically recognized:useful property lubridate, making easy import date information different formats.Now, using base package, can create date function .Date: symbols used input format, %d, %m, %Y, indicate character object converted day, month year text. Likewise, many symbols may used processing dates specific formats. overview main symbols given next.using previous table, ’ll able create represent dates vast number ways. Notice lubridate functions, regarding base, simpler easier use.","code":"\nlibrary(lubridate)\n\n# set Date object (YMD)\nprint(ymd('2020-06-24'))R> [1] \"2020-06-24\"\n# set Date object (DMY)\nprint(dmy('24-06-2020'))R> [1] \"2020-06-24\"\n# set Date object (MDY)\nprint(mdy('06-24-2020'))R> [1] \"2020-06-24\"\n# set Date object \nprint(ymd('2020/06/24'))R> [1] \"2020-06-24\"\n# set Date object \nprint(ymd('2020&06&24'))R> [1] \"2020-06-24\"\n# set Date object\nprint(ymd('2020 june 24'))R> [1] \"2020-06-24\"\n# set Date object\nprint(dmy('24 of june 2020'))R> [1] \"2020-06-24\"\n# set Date from dd/mm/yyyy with the definition of format\nmy_date <- as.Date('24/06/2021', format = '%d/%m/%Y')\n\n# print result\nprint(my_date)R> [1] \"2021-06-24\""},{"path":"basic-classes.html","id":"creating-a-sequence-of-dates","chapter":"7 Basic Object Classes","heading":"7.5.2 Creating a Sequence of Dates","text":"interesting aspect objects Date interact numeric objects can used logical tests. wanted add day particular date, need add value 1 object, shown next:property also works vectors, facilitating creation Date sequences. See example next.customizable way creating Date sequences using function seq. allows creation date sequences custom time intervals fixed vector size. example, wanted Date sequence every two days, use following code: Likewise, wanted sequence dates every two weeks, can simply change input '2 weeks':Another way use function seq setting desired length sequence dates. example, wanted array dates 10 elements, write:, interval dates automatically defined function.","code":"\n# create date\nmy_date <- ymd('2021-06-01')\n\n# find next day\nmy_date_2 <- my_date + 1\n\n# print result\nprint(my_date_2)R> [1] \"2021-06-02\"\n# create a sequence of Dates\nmy_date_vec <- my_date + 0:15\n\n# print it\nprint(my_date_vec)R>  [1] \"2021-06-01\" \"2021-06-02\" \"2021-06-03\" \"2021-06-04\"\nR>  [5] \"2021-06-05\" \"2021-06-06\" \"2021-06-07\" \"2021-06-08\"\nR>  [9] \"2021-06-09\" \"2021-06-10\" \"2021-06-11\" \"2021-06-12\"\nR> [13] \"2021-06-13\" \"2021-06-14\" \"2021-06-15\" \"2021-06-16\"\n# set first and last Date\nmy_date_1 <- ymd('2021-03-07')\nmy_date_2 <- ymd('2021-03-20')\n\n# set sequence\nmy_vec_date <- seq(from = my_date_1,\n                   to = my_date_2,\n                   by = '2 days')\n\n# print result\nprint(my_vec_date)R> [1] \"2021-03-07\" \"2021-03-09\" \"2021-03-11\" \"2021-03-13\"\nR> [5] \"2021-03-15\" \"2021-03-17\" \"2021-03-19\"\n# set first and last Date\nmy_date_1 <- ymd('2021-03-07')\nmy_date_2 <- ymd('2021-04-20')\n\n# set sequence\nmy_vec_date <- seq(from = my_date_1,\n                   to = my_date_2,\n                   by = '2 weeks')\n\n# print result\nprint(my_vec_date)R> [1] \"2021-03-07\" \"2021-03-21\" \"2021-04-04\" \"2021-04-18\"\n# set dates\nmy_date_1 <- as.Date('2021-06-27')\nmy_date_2 <- as.Date('2021-07-27')\n\n# set sequence with 10 elements\nmy_vec_date <- seq(from = my_date_1,\n                   to = my_date_2,\n                   length.out = 10)\n\n# print result\nprint(my_vec_date)R>  [1] \"2021-06-27\" \"2021-06-30\" \"2021-07-03\" \"2021-07-07\"\nR>  [5] \"2021-07-10\" \"2021-07-13\" \"2021-07-17\" \"2021-07-20\"\nR>  [9] \"2021-07-23\" \"2021-07-27\""},{"path":"basic-classes.html","id":"operations-with-dates","chapter":"7 Basic Object Classes","heading":"7.5.3 Operations with Dates","text":"can calculate difference days two dates simply subtracting one . look:output subtraction operation object class diffdate. Just like list, can access elements using double brackets. numerical value difference days contained first element diff_date: Going , can also use mathematical operators test whether date recent another:previous operation useful selecting certain period time dataset. common practice research. set first last dates period interested use logical test find dates :previous code, object my_temp_df_filtered contain rows time period 2021-06-01 2021-06-15.","code":"\n# set dates\nmy_date_1 <- ymd('2015-06-24')\nmy_date_2 <- ymd('2020-06-24')\n\n# calculate difference\ndiff_date <- my_date_2 - my_date_1\n\n# print result\nprint(diff_date)R> Time difference of 1827 days\n# print difference of days as numerical value\nprint(diff_date[[1]])R> [1] 1827\n# set date and vector\nmy_date_1 <- ymd('2021-06-20')\nmy_date_vec <- ymd('2021-06-20') + seq(-5,5)\n\n# test which elements of my_date_vec are older than my_date_1\nmy.test <- (my_date_vec > my_date_1)\n\n# print result\nprint(my.test)R>  [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\nR> [10]  TRUE  TRUE\nlibrary(dplyr)\nlibrary(lubridate)\n\n# set first and last dates\nfirst_date <- ymd('2021-06-01')\nlast_date <- ymd('2021-06-15')\n\n# create dataframe and glimpse it\nmy_temp_df <- tibble(date.vec = ymd('2020-05-25') + seq(0,30),\n                     prices=seq(1,10,\n                                length.out = length(date.vec)))\n\n# find dates that are between the first and last date\nmy_idx <- (my_temp_df$date.vec >= first_date) &\n  (my_temp_df$date.vec <= last_date)\n\n# use index to filter dataframe\nmy_temp_df_filtered <- my_temp_df %>%\n  filter(my_idx) %>%\n  glimpse()R> Rows: 0\nR> Columns: 2\nR> $ date.vec <date> \nR> $ prices   <dbl>"},{"path":"basic-classes.html","id":"dealing-with-time","chapter":"7 Basic Object Classes","heading":"7.5.4 Dealing with Time","text":"Using Date class sufficient dealing days, hours irrelevant. necessary consider time, use object type datetime. base package, one class used purpose POSIXlt, stores contents date list. Another class POSIXct, stores dates seconds counted 1970-01-01. Due storage format, POSIXct class takes less computer memory one used package lubridate. Given , prioritize sections. Worth knowing examples presented can also replicated POSIXlt class.R, time/date format also follows ISO 8601 standard58 represented “year-month-day hours:minutes:seconds timezone” (YYYY-MM-DD HH:mm:SS TMZ). See following example:lubridate package also offers intelligent functions creating date-time objects. follow structural intuition date creation functions.note class automatically adds time zone operating system. need represent different time zone, can tz argument:important note case POSIXlt POSIXct objects, operations sum subtraction refer seconds, days, objects Date class:","code":"\n# creating a POSIXct object\nmy_timedate <- as.POSIXct('2021-01-01 16:00:00')\n\n# print result\nprint(my_timedate)R> [1] \"2021-01-01 16:00:00 -03\"\nlibrary(lubridate)\n\n# creating a POSIXlt object\nmy_timedate <- ymd_hms('2020-01-01 16:00:00')\n\n# print it\nprint(my_timedate)R> [1] \"2020-01-01 16:00:00 UTC\"\n# creating a POSIXlt object with custom timezone\nmy_timedate_tz <- ymd_hms('2020-01-01 16:00:00',\n                          tz = 'GMT')\n\n# print it\nprint(my_timedate_tz)R> [1] \"2020-01-01 16:00:00 GMT\"\n# Adding values (seconds) to a POSIXlt object and printing it\nprint(my_timedate_tz + 30)R> [1] \"2020-01-01 16:00:30 GMT\""},{"path":"basic-classes.html","id":"customizing-the-format-of-dates-and-times","chapter":"7 Basic Object Classes","heading":"7.5.5 Customizing the Format of Dates and Times","text":"ISO format representing dates datetime object R may need. writing reports, using date-time format different local one can unnecessarily generate confusion audience.way objects class Date, specific symbols dealing components POSIXlt object. Next, table main symbols meanings.format date, use format function. Using symbols presented previous table, user can create desired customization. See following example, change date vector American format (MM/DD/YYYY): procedure can used POSIXlt objects:Likewise, can customize dates specific formats:","code":"\n# create vector of dates\nmy_dates <- seq(from = as.Date('2020-01-01'),\n                to = as.Date('2020-01-15'),\n                by = '1 day')\n\n# change format\nmy_dates_US_format <- format(my_dates, '%m/%d/%Y')\n\n# print result\nprint(my_dates_US_format)R>  [1] \"01/01/2020\" \"01/02/2020\" \"01/03/2020\" \"01/04/2020\"\nR>  [5] \"01/05/2020\" \"01/06/2020\" \"01/07/2020\" \"01/08/2020\"\nR>  [9] \"01/09/2020\" \"01/10/2020\" \"01/11/2020\" \"01/12/2020\"\nR> [13] \"01/13/2020\" \"01/14/2020\" \"01/15/2020\"\n# create vector of date-time\nmy_datetime <- as.POSIXlt('2020-02-01 12:00:00') + seq(0,560,60)\n\n# change to US format\nmy_dates_US_format <- format(my_datetime, '%m/%d/%Y %H:%M:%S')\n\n# print result\nprint(my_dates_US_format)R>  [1] \"02/01/2020 12:00:00\" \"02/01/2020 12:01:00\"\nR>  [3] \"02/01/2020 12:02:00\" \"02/01/2020 12:03:00\"\nR>  [5] \"02/01/2020 12:04:00\" \"02/01/2020 12:05:00\"\nR>  [7] \"02/01/2020 12:06:00\" \"02/01/2020 12:07:00\"\nR>  [9] \"02/01/2020 12:08:00\" \"02/01/2020 12:09:00\"\n# set custom format\nmy_dates_my_format <- format(my_dates,\n                             'Year=%Y | Month=%m | Day=%d')\n\n# print result\nprint(my_dates_my_format)R>  [1] \"Year=2020 | Month=01 | Day=01\"\nR>  [2] \"Year=2020 | Month=01 | Day=02\"\nR>  [3] \"Year=2020 | Month=01 | Day=03\"\nR>  [4] \"Year=2020 | Month=01 | Day=04\"\nR>  [5] \"Year=2020 | Month=01 | Day=05\"\nR>  [6] \"Year=2020 | Month=01 | Day=06\"\nR>  [7] \"Year=2020 | Month=01 | Day=07\"\nR>  [8] \"Year=2020 | Month=01 | Day=08\"\nR>  [9] \"Year=2020 | Month=01 | Day=09\"\nR> [10] \"Year=2020 | Month=01 | Day=10\"\nR> [11] \"Year=2020 | Month=01 | Day=11\"\nR> [12] \"Year=2020 | Month=01 | Day=12\"\nR> [13] \"Year=2020 | Month=01 | Day=13\"\nR> [14] \"Year=2020 | Month=01 | Day=14\"\nR> [15] \"Year=2020 | Month=01 | Day=15\""},{"path":"basic-classes.html","id":"extracting-elements-of-a-date","chapter":"7 Basic Object Classes","heading":"7.5.6 Extracting Elements of a Date","text":"can use function format extract data elements year, month, day, hour, minute second. Look next example, retrieve hours POSIXct object: Likewise, can use symbols %M %S extract hours, minutes seconds POSIXct object:Alternatively, can use lubridate functions hour minute: Functions extracting components date, lubridate::year lubridate::second, also available.","code":"\nlibrary(lubridate)\n\n# create vector of date-time\nmy_datetime <- seq(from = ymd_hms('2020-01-01 12:00:00'),\n                   to = ymd_hms('2020-01-01 18:00:00'),\n                   by = '1 hour')\n\n# get hours from POSIXlt\nmy_hours <- format(my_datetime, '%H')\n\n# print result\nprint(my_hours)R> [1] \"12\" \"13\" \"14\" \"15\" \"16\" \"17\" \"18\"\n# create vector of date-time\nn_dates <- 10\nmy_datetime <- seq(from = ymd_hms('2020-01-01 12:00:00'),\n                   to = ymd_hms('2020-01-01 18:00:00'),\n                   length.out = n_dates) + sample(1:59, \n                                                  size = n_dates)\n\n# get minutes from POSIXlt\nmy_minutes <- format(my_datetime, '%M')\n\n# print result\nprint(my_minutes)R>  [1] \"00\" \"40\" \"20\" \"00\" \"40\" \"20\" \"00\" \"40\" \"20\" \"00\"\n# get hours with lubridate\nprint(hour(my_datetime))R>  [1] 12 12 13 14 14 15 16 16 17 18\n# get minutes with lubridate\nprint(minute(my_datetime))R>  [1]  0 40 20  0 40 20  0 40 20  0"},{"path":"basic-classes.html","id":"find-the-current-date-and-time","chapter":"7 Basic Object Classes","heading":"7.5.7 Find the Current Date and Time","text":"R also allows user find current date time operating system. particularly useful important user know date time code executed.want find present day, use function base::Sys.Date lubridate::today want find current date time, use function base::Sys.time lubridate::now: Going , based functions, can write:exact time book compiled final version. Notice also got details regarding username computer function Sys.info.","code":"\n# get today from base\nprint(Sys.Date())R> [1] \"2022-11-23\"\n# get today from lubridate\nprint(lubridate::today())R> [1] \"2022-11-23\"\n# get time from base\nprint(Sys.time())R> [1] \"2022-11-23 16:13:59 -03\"\n# get time from lubridate\nprint(lubridate::now())R> [1] \"2022-11-23 16:13:59 -03\"\n# example of log message\nmy_sys_info <- Sys.info()\nmy_str <- str_c('Log of execution\\n',\n                'Time of execution: ', now(), '\\n',\n                'User: ', my_sys_info['user'], '\\n',\n                'Computer: ', my_sys_info['nodename'])\n\n# print it\ncat(my_str)R> Log of execution\nR> Time of execution: 2022-11-23 16:13:59\nR> User: msperlin\nR> Computer: msperlin-Inspiron-5675"},{"path":"basic-classes.html","id":"other-useful-functions-5","chapter":"7 Basic Object Classes","heading":"7.5.8 Other Useful Functions","text":"weekdays - Returns day week one dates. months - Returns month one dates. quarters - Returns location one dates within year quartiles. OlsonNames - Returns array time zones available R. total, 500 items. , present first five elements. Sys.timezone - Returns current timezone operating system. cut - Returns factor grouping dates time. ","code":"\n# set date vector\nmy_dates <- seq(from = ymd('2020-01-01'),\n                to = ymd('2020-01-5'),\n                by = '1 day')\n\n# find corresponding weekdays\nmy_weekdays <- weekdays(my_dates)\n\n# print it\nprint(my_weekdays)R> [1] \"Wednesday\" \"Thursday\"  \"Friday\"    \"Saturday\" \nR> [5] \"Sunday\"\n# create date vector\nmy_dates <- seq(from = ymd('2020-01-01'),\n                to = ymd('2020-12-31'),\n                by = '1 month')\n\n# find months\nmy_months <- months(my_dates)\n\n# print result\nprint(my_months)R>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \nR>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \nR>  [9] \"September\" \"October\"   \"November\"  \"December\"\n# get quartiles of the year\nmy_quarters <- quarters(my_dates)\n\n# print it\nprint(my_quarters)R>  [1] \"Q1\" \"Q1\" \"Q1\" \"Q2\" \"Q2\" \"Q2\" \"Q3\" \"Q3\" \"Q3\" \"Q4\" \"Q4\"\nR> [12] \"Q4\"\n# get possible timezones\npossible_tz <- OlsonNames()\n\n# print it\nprint(possible_tz[1:5])R> [1] \"Africa/Abidjan\"     \"Africa/Accra\"      \nR> [3] \"Africa/Addis_Ababa\" \"Africa/Algiers\"    \nR> [5] \"Africa/Asmara\"\nprint(Sys.timezone())R> [1] \"America/Sao_Paulo\"\n# set example date vector\nmy_dates <- seq(from = as.Date('2020-01-01'),\n                to = as.Date('2020-03-01'),\n                by = '5 days')\n\n# group vector based on monthly breaks\nmy_month_cut <- cut(x = my_dates,\n                    breaks = 'month',\n                    labels = c('Jan', 'Fev', 'Mar'))\n\n# print result\nprint(my_month_cut)R>  [1] Jan Jan Jan Jan Jan Jan Jan Fev Fev Fev Fev Fev Mar\nR> Levels: Jan Fev Mar\n# set example datetime vector\nmy_datetime <- as.POSIXlt('2020-01-01 12:00:00') + seq(0,250,15)\n\n# set groups for each 30 seconds\nmy_cut <- cut(x = my_datetime, breaks = '30 secs')\n\n# print result\nprint(my_cut)R>  [1] 2020-01-01 12:00:00 2020-01-01 12:00:00\nR>  [3] 2020-01-01 12:00:30 2020-01-01 12:00:30\nR>  [5] 2020-01-01 12:01:00 2020-01-01 12:01:00\nR>  [7] 2020-01-01 12:01:30 2020-01-01 12:01:30\nR>  [9] 2020-01-01 12:02:00 2020-01-01 12:02:00\nR> [11] 2020-01-01 12:02:30 2020-01-01 12:02:30\nR> [13] 2020-01-01 12:03:00 2020-01-01 12:03:00\nR> [15] 2020-01-01 12:03:30 2020-01-01 12:03:30\nR> [17] 2020-01-01 12:04:00\nR> 9 Levels: 2020-01-01 12:00:00 ... 2020-01-01 12:04:00"},{"path":"basic-classes.html","id":"missing-data---na-not-available","chapter":"7 Basic Object Classes","heading":"7.6 Missing Data - NA (Not available)","text":"One main innovations R representation missing data objects class NA (Available). lack data can many reasons, failure collect information simply absence . cases generally treated removing replacing missing information analyzing data. identification cases, therefore, imperative. ","code":""},{"path":"basic-classes.html","id":"defining-na-values","chapter":"7 Basic Object Classes","heading":"7.6.1 Defining NA Values","text":"define omissions dataset, use symbol NA without quotes:important information must remember previous chapters NA object contagious. object interacts NA turn class missing data:property demands special attention calculating value recursively, using functions cumsum cumprod. cases, value NA turn NA:Therefore, using functions cumsum cumprod, make sure NA value found input vector.\nEvery time use cumsum andcumprod\nfunctions, make sure NA value input\nvector. Remember every NA contagious recursive\ncalculations result vector full missing data.\n","code":"\n# a vector with NA\nmy_x <- c(1, 2, NA, 4, 5)\n\n# print it\nprint(my_x)R> [1]  1  2 NA  4  5\n# a vector \nmy_y <- c(2, 3, 5, 4, 1)\n\n# example of NA interacting with other objects\nprint(my_x + my_y)R> [1]  3  5 NA  8  6\n# set vector with NA\nmy_x <- c(1:5, NA, 5:10)\n\n# print cumsum (NA after sixth element)\nprint(cumsum(my_x))R>  [1]  1  3  6 10 15 NA NA NA NA NA NA NA\n# print cumprod (NA after sixth element)\nprint(cumprod(my_x))R>  [1]   1   2   6  24 120  NA  NA  NA  NA  NA  NA  NA"},{"path":"basic-classes.html","id":"finding-and-replacing-na","chapter":"7 Basic Object Classes","heading":"7.6.2 Finding and Replacing NA","text":"find NA values, use function .na: replace , use indexing output .na:Another way remove NA values use function na.omit. returns object, without NA values. Note, however, vector size change output object class omit. look: Although class object changed due use na.omit, basic properties initial vector remains. example, using function nchar resulting object still possible.objects, however, property may hold. caution advised using na.omit. needed, can return basic class .* functions, .numeric .tibble.","code":"\n# set vector with NA\nmy_x <- c(1:2, NA, 4:10)\n\n# Test and find location of NA\nprint(is.na(my_x))R>  [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\nR> [10] FALSE\nprint(which(is.na(my_x)))R> [1] 3\n# set vector\nmy_x <- c(1, NA, 3:4, NA)\n\n# replace NA for 2\nmy_x[is.na(my_x)] <- 2\n\n# print result\nprint(my_x)R> [1] 1 2 3 4 2\n# set vector\nmy_char <- c(letters[1:3], NA, letters[5:8])\n\n# print it\nprint(my_char)R> [1] \"a\" \"b\" \"c\" NA  \"e\" \"f\" \"g\" \"h\"\n# use na.omit to remove NA\nmy_char <- na.omit(my_char)\n\n# print result\nprint(my_char)R> [1] \"a\" \"b\" \"c\" \"e\" \"f\" \"g\" \"h\"\nR> attr(,\"na.action\")\nR> [1] 4\nR> attr(,\"class\")\nR> [1] \"omit\"\n# trying nchar on a na.omit object\nprint(nchar(my_char))R> [1] 1 1 1 1 1 1 1"},{"path":"basic-classes.html","id":"other-useful-functions-6","chapter":"7 Basic Object Classes","heading":"7.6.3 Other Useful Functions","text":"complete.cases - Returns logical vector indicating whether lines bi-dimensional object complete (without NA). function used exclusively dataframes matrices. ","code":"\n# create matrix\nmy_mat <- matrix(1:15, nrow = 5)\n\n# set an NA value\nmy_mat[2,2] <- NA\n\n# print index with rows without NA\nprint(complete.cases(my_mat))R> [1]  TRUE FALSE  TRUE  TRUE  TRUE"},{"path":"basic-classes.html","id":"exercises-4","chapter":"7 Basic Object Classes","heading":"7.7 Exercises","text":"","code":""},{"path":"basic-classes.html","id":"q.1-6","chapter":"7 Basic Object Classes","heading":"Q.1","text":"Consider following vectors x y:sum elements new vector resulting multiplication elements x andy?\n\nSolution\n\n","code":"set.seed(7)\nx <- sample (1:3, size = 5, replace = T)\ny <- sample (1:3, size = 5, replace = T)set.seed(7)\n\nx <- sample (1:3, size = 5, replace = T)\ny <- sample (1:3, size = 5, replace = T)\n\n# solution\nmy_sol <- sum(x*y)"},{"path":"basic-classes.html","id":"q.2-6","chapter":"7 Basic Object Classes","heading":"Q.2","text":"performed cumulative sum sequence 1 100, element sum go beyond value 50?\n\nSolution\n\n","code":"my_sum <- cumsum(1:100)\n\n# solution\nmy_sol <- (which(my_sum > 50)[1])"},{"path":"basic-classes.html","id":"q.3-5","chapter":"7 Basic Object Classes","heading":"Q.3","text":"Using R, create sequence called seq_1 -15 10, interval values always equal 2. sum elements seq_1?\n\nSolution\n\n","code":"# solution\nseq_1 <- seq(from = -15, to = 10, by = 2)\n\n# solution\nmy_sol <- sum(seq_1)"},{"path":"basic-classes.html","id":"q.4-5","chapter":"7 Basic Object Classes","heading":"Q.4","text":"Define another object called seq_2 containing sequence size 1000, values 0 100. standard deviation (functionsd) sequence?\n\nSolution\n\n","code":"seq_2 <- seq(from = 0, \n             to = 100, \n             length.out = 1000)\n\n# solution\nmy_sol <- sd(seq_2)"},{"path":"basic-classes.html","id":"q.5-5","chapter":"7 Basic Object Classes","heading":"Q.5","text":"Calculate sum seq_1 seq_2 vectors (see previous exercises). operation work despite different size vectors? Explain answer. works, highest value resulting vector?\n\nSolution\n\nYes, worked, warning: _ “length longest object multiple length shortest object”_. explanation whenever R encounters operations different vector sizes, uses recycling rule, shortest vector repeated many times necessary match size longest vector. book, see section numerical vectors details.","code":"seq_1 <- seq(from = -10, to = 10, by = 2)\nseq_2 <- seq(from = 0, \n             to = 100, \n             length.out = 1000)\n\n# solution\nmy_sol <- max(seq_1+seq_2)"},{"path":"basic-classes.html","id":"q.6-5","chapter":"7 Basic Object Classes","heading":"Q.6","text":"Let’s assume , certain date, bought 100 shares company, paying price_purchase per share. time, sold 30 shares 18 remaining 70 shares sold 22 later day. Using script R, structure financial problem creating numeric objects. total gross profit sequence transactions stock market?\n\nSolution\n\n","code":"total_shares <- 100\nprice_purchase <- 15\n\ntotal_purchase_value <- total_shares*price_purchase\n\nqtd_sell_1 <- 30\nprice_sell_1 <- 18\ntotal_sell_1 <- qtd_sell_1*18\n\nqtd_sell_2 <- total_shares-qtd_sell_1\nprice_sell_2 <- 22\ntotal_sell_2 <- qtd_sell_2*price_sell_2\n\ntotal_sell_value <- total_sell_1 + total_sell_2\n\n# solution\nmy_sol <- total_sell_value - total_purchase_value"},{"path":"basic-classes.html","id":"q.7-4","chapter":"7 Basic Object Classes","heading":"Q.7","text":"Create vector x according following formula, \\(= 1 ... 100\\). sum elements x?\\[\nx_i=\\frac{-1^{+1}}{2i-1}\n\\]\n\nSolution\n\n","code":"i <- 1:100\n\nx <- ( (-1)^(i+1) )/(2*i - 1)\n\n# solution\nmy_sol <- sum(x)"},{"path":"basic-classes.html","id":"q.8-3","chapter":"7 Basic Object Classes","heading":"Q.8","text":"Create \\(z_i\\) vector according following formula \\(x_i = 1 ... 50\\) \\(y_i = 50 ... 1\\). sum elements \\(z_i\\)? Tip: check dplyr::lag function works.\\[\nz_i=\\frac{y_i - x_{-1}}{y_{-2}}\n\\]\n\nSolution\n\n","code":"x <- 1:50\ny <- 50:1\n\n# solution using `base`\nz <- (y - c(NA, x[1:(length(x)-1)]))/c(NA, NA, y[1:(length(y)-2)])\n\n# solution with tidyverse (much prettier huh!)\nz <- (y - lag(x, n = 1))/lag(y, n = 2)\n\n# solution (be aware of the NA values)\nmy_sol <- sum(z, na.rm = TRUE)"},{"path":"basic-classes.html","id":"q.9-2","chapter":"7 Basic Object Classes","heading":"Q.9","text":"Using set.seed (10), create object called x random values Normal distribution mean 10 standard deviation 10. Using cut function, create another object defines two groups based values x greater 15 lower 15. many observations find first group?\n\nSolution\n\n","code":"set.seed(10)\nx <- rnorm(n = 1000, mean = 10, sd = 10)\n\nmy_group <- cut(x, \n                breaks = c(-Inf, 15, Inf))\n\n# solution\nmy_sol <- table(my_group)[1]"},{"path":"basic-classes.html","id":"q.10-2","chapter":"7 Basic Object Classes","heading":"Q.10","text":"Create following object following code:many times letter 'x' found resulting text object?\n\nSolution\n\n","code":"set.seed(15)\nmy_char <- paste(sample(letters, 5000, replace = T), \n                 collapse = '')set.seed(15)\nmy_char <- paste(sample(letters, 5000, replace = T), \n                 collapse = '')\n\n# solution\nmy_sol <- str_count(my_char, 'x')"},{"path":"basic-classes.html","id":"q.11-1","chapter":"7 Basic Object Classes","heading":"Q.11","text":"Based my_char object created earlier, divided several smaller pieces using letter \"b\", number characters largest piece found?\n\nSolution\n\n","code":"set.seed(15)\nmy_char <- paste(sample(letters, 5000, replace = T), \n                 collapse = '')\n\nmy_split <- str_split(my_char, pattern = 'b')[[1]]\n\n# find number of characters in each\nn_chars <- sapply(my_split, nchar)\n\n# solution\nmy_sol <- n_chars[which.max(n_chars)]"},{"path":"basic-classes.html","id":"q.12","chapter":"7 Basic Object Classes","heading":"Q.12","text":"address https://www.gutenberg.org/files/1342/1342-0.txt possible access file containing full text book Pride Prejudice Jane Austen. Use functions download.file readr::read_lines import entire book vector characters called my_book R. many lines resulting object ?\n\nSolution\n\n","code":"my_link <- 'https://www.gutenberg.org/ebooks/2264.txt.utf-8'\n\nmy_book <- readr::read_lines(my_link)\n\n# solution\nmy_sol <- length(my_book)"},{"path":"basic-classes.html","id":"q.13","chapter":"7 Basic Object Classes","heading":"Q.13","text":"Bind vector characters my_book single object called full_text using command paste0(my_book, collapse = '\\n'. Using stringr package, many times word 'King' repeated throughout text?\n\nSolution\n\n","code":"my_link <- 'https://www.gutenberg.org/ebooks/2264.txt.utf-8'\n\nmy_book <- readr::read_lines(my_link)\n\n# solution\nfull_text <- paste0(my_book, collapse = '\\n')\nmy_sol <- stringr::str_count(full_text, stringr::fixed('King'))"},{"path":"basic-classes.html","id":"q.14","chapter":"7 Basic Object Classes","heading":"Q.14","text":"full_text object created earlier, use stringr::str_split function split entire text using blanks. Based resulting vector, create frequency table. used word text? Tip: Remove cases empty characters.\n\nSolution\n\n","code":"my_link <- 'https://www.gutenberg.org/ebooks/2264.txt.utf-8'\n\nmy_book <- readr::read_lines(my_link)\n\n# solution\nfull_text <- paste0(my_book, collapse = '\\n')\nmy_split <- stringr::str_split(full_text, \n                               pattern = stringr::fixed(' '))[[1]]\n\n# remove empty\nmy_split <- my_split[my_split != '']\n\nmy_tab <- sort(table(my_split), decreasing = TRUE)\n\n# solution\nmy_sol <- names(my_tab[1])"},{"path":"basic-classes.html","id":"q.15","chapter":"7 Basic Object Classes","heading":"Q.15","text":"Assuming person born 2000-05-12 live 100 years, number birthday days fall weekend (Saturday Sunday)? Tip: use operator %% check multiple condition vector.\n\nSolution\n\n","code":"b_day <- as.Date('2000-05-12')\nn_years <- 100\n\nb_day_vec <- seq(b_day, b_day + n_years*365, by = '1 year')\n\nw_days <- weekdays(b_day_vec)\n\nn_weekend <- sum(w_days %in% c('Saturday', 'Sunday'))\n\n# solution\nmy_sol <- n_weekend"},{"path":"basic-classes.html","id":"q.16","chapter":"7 Basic Object Classes","heading":"Q.16","text":"date time found 10000 seconds 2021-02-02 11:50:02?\n\nSolution\n\n","code":"time_1 <- as.POSIXct('2021-02-02 11:50:02')\nmy_sec <- 10000\n\nmy_sol <- time_1 + my_sec"},{"path":"programming.html","id":"programming","chapter":"8 Programming and Data Analysis","heading":"8 Programming and Data Analysis","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"r-functions","chapter":"8 Programming and Data Analysis","heading":"8.1 R Functions","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-for-loops","chapter":"8 Programming and Data Analysis","heading":"8.2 Using for Loops","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"conditional-statements-if-else-switch","chapter":"8 Programming and Data Analysis","heading":"8.3 Conditional Statements (if, else, switch)","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-apply-functions","chapter":"8 Programming and Data Analysis","heading":"8.4 Using apply Functions","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-lapply","chapter":"8 Programming and Data Analysis","heading":"8.4.1 Using lapply","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-sapply","chapter":"8 Programming and Data Analysis","heading":"8.4.2 Using sapply","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-tapply","chapter":"8 Programming and Data Analysis","heading":"8.4.3 Using tapply","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-mapply","chapter":"8 Programming and Data Analysis","heading":"8.4.4 Using mapply","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-apply","chapter":"8 Programming and Data Analysis","heading":"8.4.5 Using apply","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-by","chapter":"8 Programming and Data Analysis","heading":"8.4.6 Using by","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"using-package-purrr","chapter":"8 Programming and Data Analysis","heading":"8.5 Using package purrr","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"function-map_","chapter":"8 Programming and Data Analysis","heading":"8.5.1 Function map_*","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"function-safely","chapter":"8 Programming and Data Analysis","heading":"8.5.2 Function safely","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"function-pmap","chapter":"8 Programming and Data Analysis","heading":"8.5.3 Function pmap","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"data-manipulation-with-package-dplyr","chapter":"8 Programming and Data Analysis","heading":"8.6 Data Manipulation with Package dplyr","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"group-operations-with-dplyr","chapter":"8 Programming and Data Analysis","heading":"8.6.1 Group Operations with dplyr","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"complex-group-operations-with-dplyr","chapter":"8 Programming and Data Analysis","heading":"8.6.2 Complex Group Operations with dplyr","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"exercises-5","chapter":"8 Programming and Data Analysis","heading":"8.7 Exercises","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"programming.html","id":"exercises-6","chapter":"8 Programming and Data Analysis","heading":"8.8 Exercises","text":"","code":""},{"path":"programming.html","id":"q.1-7","chapter":"8 Programming and Data Analysis","heading":"Q.1","text":"Create function called say_my_name takes person’s name input shows text name … screen. Within scope function, use comments describe purpose function, inputs outputs.\n\nSolution\n\n","code":"say_my_name <- function(name_in) {\n  # Print a single name in the prompt\n  #\n  # ARGS: name_in - Name to be printed\n  #\n  # RETURNS: TRUE, if sucessfull\n  \n  my_msg <- paste0('Your name is ', name_in)\n  \n  message(my_msg)\n  \n  # invisible will omit output if function is called without definition of output\n  return(invisible(TRUE))\n}\n\n# testing\nsay_my_name('Marcelo')"},{"path":"programming.html","id":"q.2-7","chapter":"8 Programming and Data Analysis","heading":"Q.2","text":"Implement test input objects, input name character class, error returned user. Test new function verify working expected.\n\nSolution\n\n","code":"say_my_name <- function(name_in) {\n  # Prints a single name in the prompt\n  #\n  # ARGS: name_in - Name to be printed\n  # RETURNS: TRUE, if sucessfull\n  \n  # check inputs\n  if (class(name_in) != 'character') {\n    stop('Class of input name_in is ', class(name_in), \n         ' and not character!')\n  }\n  \n  if (length(name_in) > 1) {\n    stop('Input name_in has length ', length(name_in), \n         ' and not 1 (this function only works for one name)!')\n  }\n  \n  \n  \n  my_msg <- paste0('Your name is ', name_in, '.')\n  \n  message(my_msg)\n  \n  # invisible makes sure the fct doesnt return anything if not output is set\n  return(invisible(TRUE))\n}\n\n# testing Ok\nsay_my_name('Marcelo')\n\n# testing vector\nsay_my_name(c('Richard', 'Michael'))\n\n# testing class\nsay_my_name(1)"},{"path":"programming.html","id":"q.3-6","chapter":"8 Programming and Data Analysis","heading":"Q.3","text":"Create vector five names, called my_names. Using loop, apply function say_my_name element my_names.\n\nSolution\n\n","code":"say_my_name <- function(name_in) {\n  # Prints a single name in the prompt\n  #\n  # ARGS: name_in - Name to be printed\n  # RETURNS: TRUE, if sucessfull\n  \n  # check inputs\n  if (class(name_in) != 'character') {\n    stop('Class of input name_in is ', class(name_in), \n         ' and not character!')\n  }\n  \n  if (length(name_in) > 1) {\n    stop('Input name_in has length ', length(name_in), \n         ' and not 1 (this function only works for one name)!')\n  }\n  \n  \n  \n  my_msg <- paste0('Your name is ', name_in, '\\n')\n  \n  message(my_msg)\n  \n  # invisible makes sure the fct doesnt return anything if not output is set\n  return(invisible(TRUE))\n}\n\nmy_names <- c('Marcelo', 'Ricardo', 'Tarcizio')\n\nfor (i_names in my_names) {\n  say_my_name(i_names)\n}"},{"path":"programming.html","id":"q.4-6","chapter":"8 Programming and Data Analysis","heading":"Q.4","text":"database Brasil.IO59 find table names genres. Import data file , using loop, apply function say_my_name 15 random names database. Tip: can read data directly link using readr::read_csv(LINK).\n\nSolution\n\n","code":"say_my_name <- function(name_in) {\n  # Prints a single name in the prompt\n  #\n  # ARGS: name_in - Name to be printed\n  # RETURNS: TRUE, if sucessfull\n  \n  # check inputs\n  if (class(name_in) != 'character') {\n    stop('Class of input name_in is ', class(name_in), \n         ' and not character!')\n  }\n  \n  if (length(name_in) > 1) {\n    stop('Input name_in has length ', length(name_in), \n         ' and not 1 (this function only works for one name)!')\n  }\n  \n  \n  \n  my_msg <- paste0('Your name is ', name_in, '.')\n  \n  message(my_msg)\n  \n  # invisible makes sure the fct doesnt return anything if not output is set\n  return(invisible(TRUE))\n}\n\nlibrary(tidyverse)\n\n# get CURRENT url from https://data.chhs.ca.gov/dataset/most-popular-baby-names-2005-current\nmy_url <- 'https://data.brasil.io/dataset/genero-nomes/grupos.csv.gz'\n\ndf_names <- read_csv(my_url, col_types = cols())\n\nmy_names <- sample(df_names$name, 15)\n\nfor (i_name in my_names) {\n  \n  say_my_name(i_name)\n}"},{"path":"programming.html","id":"q.5-6","chapter":"8 Programming and Data Analysis","heading":"Q.5","text":"Redo previous exercises using function sapply purrr::map.\n\nSolution\n\n","code":"say_my_name <- function(name_in) {\n  # Prints a single name in the prompt\n  #\n  # ARGS: name_in - Name to be printed\n  # RETURNS: TRUE, if sucessfull\n  \n  # check inputs\n  if (class(name_in) != 'character') {\n    stop('Class of input name_in is ', class(name_in), \n         ' and not character!')\n  }\n  \n  if (length(name_in) > 1) {\n    stop('Input name_in has length ', length(name_in), \n         ' and not 1 (this function only works for one name)!')\n  }\n    \n  my_msg <- paste0('Your name is ', name_in, '\\n')\n  \n  message(my_msg)\n  \n  # invisible makes sure the fct doesnt return anything if not output is set\n  return(invisible(TRUE))\n}\n\nlibrary(tidyverse)\nlibrary(purrr)\n\n# get CURRENT url from https://data.chhs.ca.gov/dataset/most-popular-baby-names-2005-current\nmy_url <- 'https://data.brasil.io/dataset/genero-nomes/grupos.csv.gz'\n\ndf_names <- read_csv(my_url, col_types = cols())\n\n# using sapply\nvec_out <- sapply(sample(df_names$name, 15),\n                  say_my_name)\nglimpse(vec_out)\n\n# using purrr\nl_out <- map(sample(df_names$name, 15),\n             say_my_name)\nglimpse(vec_out)"},{"path":"programming.html","id":"q.6-6","chapter":"8 Programming and Data Analysis","heading":"Q.6","text":"Use BatchGetSymbols package download data SP500 ('^GSPC'), Ibovespa ('^BVSP'), FTSE ('^ FSTE') Nikkei 225 ('^N225' index)) ‘2010-01-01’` current date. imported data, use loop calculate average, maximum minimum return index analyzed period. Save results single table show prompt R.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\nindexes <- c('^BVSP', '^GSPC', '^FTSE', '^N225')\n\ndf_indices <- BatchGetSymbols(tickers = indexes, \n                              first.date = '2010-01-01',\n                              last.date = Sys.Date())[[2]]\n\ntab <- tibble()\nfor (index in indexes) {\n  \n  temp_df <- df_indices %>%\n    filter(ticker == index)\n  \n  avg_ret <- mean(temp_df$ret.adjusted.prices, \n                  na.rm = TRUE)\n  max_ret <- max(temp_df$ret.adjusted.prices, \n                 na.rm = TRUE)\n  min_ret <- min(temp_df$ret.adjusted.prices, \n                 na.rm = TRUE)\n  \n  # save result\n  tab <- bind_rows(tab, tibble(index = index,\n                               mean_ret = avg_ret, \n                               max_ret = max_ret, \n                               min_ret = min_ret))\n  \n}\n\nprint(tab)"},{"path":"programming.html","id":"q.7-5","chapter":"8 Programming and Data Analysis","heading":"Q.7","text":"Redo previous exercise using functions group_by summarise, package dplyr.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\nindexes <- c('^BVSP', '^GSPC', '^FTSE', '^N225')\n\ndf_indices <- BatchGetSymbols(tickers = indexes, \n                              first.date = '2010-01-01',\n                              last.date = Sys.Date())[[2]]\n\ntab_tidy <- df_indices %>%\n  group_by(ticker) %>%\n  summarise(mean_ret = mean(ret.adjusted.prices, na.rm = TRUE),\n            max_ret = max(ret.adjusted.prices, na.rm = TRUE),\n            min_ret = min(ret.adjusted.prices, na.rm = TRUE))\n\nprint(tab_tidy)"},{"path":"programming.html","id":"q.8-4","chapter":"8 Programming and Data Analysis","heading":"Q.8","text":"Rstudio CRAN logs website60 find data download statistics base distribution R Daily R downloads section. Using programming skills, import available data 2020-01-01 2020-01-15 aggregate single table. country highest download count R?\n\nSolution\n\n","code":"# set function that will download the files\nread_cranlogs_files <- function(date_in) {\n  # Reads log files from http://cran-logs.rstudio.com/\n  #\n  # ARGS: date_in - date of log data\n  require(tidyverse)\n  require(lubridate)\n  \n  url_dl <- paste0('http://cran-logs.rstudio.com/', year(date_in), '/',\n                   date_in, '-r.csv.gz')\n  \n  cat('\\nReading ', url_dl)\n  \n  df <- read_csv(url_dl, col_types = cols())\n  \n  return(df)\n}\n\n# find out the availabe dates in url\nlibrary(rvest)\nlibrary(lubridate)\n\navailable_links <- read_html('http://cran-logs.rstudio.com/') %>%\n  html_nodes(css = 'a') %>%\n  html_attr('href')\n\n# only keep links for R download (those with -r.csv.gz pattern)\nidx <- str_detect(available_links, '-r.csv.gz')\nr_links <- available_links[idx]\n\n# find out dates \ndates_dls <- ymd(basename(r_links))\nmax_date <- max(dates_dls)\n\nfirst_date <- as.Date('2020-01-01')\nlast_date <- as.Date('2020-01-15')\n\nmy_dates <- seq(first_date, \n                last_date, \n                by = '1 day')\n\nlibrary(purrr) \nlibrary(tidyverse)\n\nl_out <- map(my_dates, \n             safely(read_cranlogs_files, \n                    otherwise = tibble())) # return empty tibble in case of error\n\ndf_cranlogs <- bind_rows(map(l_out, 'result'))\n\n# solution \nmy_sol <- names(sort(table(df_cranlogs$country), \n               decreasing = TRUE)[1])"},{"path":"cleaning.html","id":"cleaning","chapter":"9 Cleaning and Structuring Data","heading":"9 Cleaning and Structuring Data","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"the-format-of-a-dataframe","chapter":"9 Cleaning and Structuring Data","heading":"9.1 The Format of a dataframe","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"converting-a-dataframe-structure-long-and-wide","chapter":"9 Cleaning and Structuring Data","heading":"9.1.1 Converting a dataframe Structure (long and wide)","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"converting-lists-into-dataframes","chapter":"9 Cleaning and Structuring Data","heading":"9.2 Converting lists into dataframes","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"removing-outliers","chapter":"9 Cleaning and Structuring Data","heading":"9.3 Removing Outliers","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"outliers","chapter":"9 Cleaning and Structuring Data","heading":"9.3.1 Treating Outliers in dataframes","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"inflation-and-price-data","chapter":"9 Cleaning and Structuring Data","heading":"9.4 Inflation and Price Data","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"modifying-time-frequency-and-aggregating-data","chapter":"9 Cleaning and Structuring Data","heading":"9.5 Modifying Time Frequency and Aggregating Data","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"exercises-7","chapter":"9 Cleaning and Structuring Data","heading":"9.6 Exercises","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"cleaning.html","id":"exercises-8","chapter":"9 Cleaning and Structuring Data","heading":"9.7 Exercises","text":"","code":""},{"path":"cleaning.html","id":"q.1-8","chapter":"9 Cleaning and Structuring Data","heading":"Q.1","text":"Consider dataframe created following code:dataframe format long wide? Explain answer.\n\nSolution\n\nformat long: data stacked two different stocks. Note , addition new tickers, table grows new lines. New variables can easily added new columns.","code":"library(tidyverse)\n\nmy_N <- 100\n\ndf <- bind_rows(tibble(ticker = rep('STOCK 1', my_N),\n                       ref_date = Sys.Date() + 1:my_N,\n                       price = 100 + cumsum(rnorm(my_N))),\n                tibble(ticker = rep('STOCK 2', my_N),\n                       ref_date = Sys.Date() + 1:my_N,\n                       price = 100 + cumsum(rnorm(my_N))) )\n\nprint(df)"},{"path":"cleaning.html","id":"q.2-8","chapter":"9 Cleaning and Structuring Data","heading":"Q.2","text":"Change format previous dataframe, long wide vice versa.\n\nSolution\n\n","code":"library(tidyverse)\n\nmy_N <- 100\n\ndf <- bind_rows(tibble(ticker = rep('STOCK 1', my_N),\n                       ref_date = Sys.Date() + 1:my_N,\n                       price = 100 + cumsum(rnorm(my_N))),\n                tibble(ticker = rep('STOCK 2', my_N),\n                       ref_date = Sys.Date() + 1:my_N,\n                       price = 100 + cumsum(rnorm(my_N))) )\n\nprint(df)library(tidyverse)\n\nmy_N <- 100\n\ndf <- bind_rows(tibble(ticker = rep('STOCK 1', my_N),\n                       ref_date = Sys.Date() + 1:my_N,\n                       price = 100 + cumsum(rnorm(my_N))),\n                tibble(ticker = rep('STOCK 2', my_N),\n                       ref_date = Sys.Date() + 1:my_N,\n                       price = 100 + cumsum(rnorm(my_N))) )\n\nprint(df)\n\n# convert from long to wide\ndf_wide <- spread(data = df, \n                  key = 'ticker',\n                  value = 'price')\n\n# print result\nprint(df_wide)"},{"path":"cleaning.html","id":"q.3-7","chapter":"9 Cleaning and Structuring Data","heading":"Q.3","text":"Consider following list:Add dataframes my_l single object using .call dplyr::bind_rows functions. happened df1 data v z columns exist?\n\nSolution\n\nbind_rows find column junction different tables, missing data defined NAs. See :","code":"library(tidyverse)\n\nmy_l <- list(df1 = tibble(x = 1:100, y = runif(100)),\n             df2 = tibble(x = 1:100, y = runif(100), v = runif(100)),\n             df3 = tibble(x = 1:100, y = runif(100), z = runif(100)) )library(tidyverse)\n\nmy_l <- list(df1 = tibble(x = 1:100, \n                          y = runif(100)),\n             df2 = tibble(x = 1:100, \n                          y = runif(100), \n                          v = runif(100)),\n             df3 = tibble(x = 1:100, \n                          y = runif(100), \n                          z = runif(100)) )\n\n# solution with bind_rows\nbind_df1 <- bind_rows(my_l)\n\n# solution with do.cal\nbind_df2 <- do.call(bind_rows, my_l)\n\n# check solutions match\nidentical(bind_df1, bind_df2)\n\nprint(bind_df1)\n# the missing data points were set as NA values"},{"path":"cleaning.html","id":"q.4-7","chapter":"9 Cleaning and Structuring Data","heading":"Q.4","text":"Use BatchGetSymbols package download SP500 index data ('^GSPC') 1950-01-01 2021-01-01. sum 5 highest positive returns index?\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\nticker <- '^GSPC'\nfirst_date <- '1950-01-01'\nlast_date <- '2021-01-01'\ndf_SP500 <- BatchGetSymbols(tickers = '^GSPC', \n                            first.date = first_date,\n                            last.date = last_date)[[2]]\n\nselect_n <- 5\ntab <- dplyr::tibble(position = 1:select_n,\n              top5_positive = sort(df_SP500$ret.adjusted.prices, \n                                   decreasing = TRUE)[1:select_n],\n              top5_negative = sort(df_SP500$ret.adjusted.prices, \n                                   decreasing = FALSE)[1:select_n])\n\nprint(tab)\n\nmy_sol <- sum(tab$top5_positive)"},{"path":"cleaning.html","id":"q.5-7","chapter":"9 Cleaning and Structuring Data","heading":"Q.5","text":"Use replace_outliers function (see section 9.3.1) remove outliers numeric columns SP500 data previously imported my_prob = 0.025. many lines lost cleaning process?\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(purrr)\n\nticker <- '^GSPC'\nfirst_date <- '1950-01-01'\nlast_date <- '2021-01-01'\ndf_SP500 <- BatchGetSymbols(tickers = '^GSPC', \n                            first.date = first_date,\n                            last.date = last_date)[[2]]\n\nreplace_outliers <- function(col_in, my_prob = 0.05) {\n  # Replaces outliers from a vector\n  #\n  # INPUTS: col_in The vector\n  #         my_prob Probability of quantiles (p and 1-p)\n  #\n  # OUTPUT: A vector\n  \n  # return if class is other than numeric\n  if (!(class(col_in) %in% c('numeric', 'integer'))) return(col_in)\n  \n  my_outliers <- stats::quantile(x = col_in,\n                                 probs = c(my_prob, 1-my_prob),\n                                 na.rm = TRUE)\n  \n  idx <- (col_in <= my_outliers[1])|(col_in >= my_outliers[2])\n  col_in[idx] <- NA\n  \n  return(col_in)\n  \n}\n\n# remove outlivers from vectors\nl_out <- map(df_SP500, replace_outliers, my_prob = 0.025)\n\ndf_SP500_nooutlier <- na.omit(as_tibble(l_out))\n\nnrow_1 <- nrow(df_SP500)\nnrow_2 <- nrow(df_SP500_nooutlier)\n\nmy_sol <- nrow_1 - nrow_2"},{"path":"cleaning.html","id":"q.6-7","chapter":"9 Cleaning and Structuring Data","heading":"Q.6","text":"Use BatchGetSymbols::BatchGetSymbols function import prices FTSE index ('^ FTSE') 2010-01-01 2021-01-01. , reconstruct data annual frequency, defining year’s value last observation period. Tip: see dplyr::summary_all function functional way aggregate columns dataframe.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\nticker <- '^FTSE'\n\nfirst_date <- '2010-01-01'\nlast_date <- '2021-01-01'\n\ndf_FTSE_daily <- BatchGetSymbols(tickers = ticker, \n                            first.date = first_date,\n                            last.date = last_date)[[2]]\n\n# change from daily to annual\ndf_FTSE_yearly <- df_FTSE_daily %>%\n  mutate(ref_year = lubridate::year(ref.date)) %>%\n  group_by(ref_year) %>%\n  summarise_all(.funs = last)\n\nprint(df_FTSE_yearly)"},{"path":"cleaning.html","id":"q.7-6","chapter":"9 Cleaning and Structuring Data","heading":"Q.7","text":"Use daily data FTSE reconstruct data monthly frequency, using last observation period.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\nticker <- '^FTSE'\n\nfirst_date <- '2010-01-01'\nlast_date <- '2021-01-01'\n\ndf_FTSE_daily <- BatchGetSymbols(tickers = ticker, \n                            first.date = first_date,\n                            last.date = last_date)[[2]]\n\n# change from daily to monthly\ndf_FTSE_monthly <- df_FTSE_daily %>%\n  mutate(ref_month = format(ref.date, '%Y-%m-01')) %>%\n  group_by(ref_month) %>%\n  summarise_all(last)\n\nprint(df_FTSE_monthly)"},{"path":"cleaning.html","id":"q.8-5","chapter":"9 Cleaning and Structuring Data","heading":"Q.8","text":"daily FTSE data, check dates prices 20 biggest price drops. , cases, investor bought index price biggest drops kept 30 days, average nominal return per transaction?\n\nSolution\n\n","code":"library(tidyverse)\nlibrary(BatchGetSymbols)\n\nticker <- '^FTSE'\n\nfirst_date <- '2010-01-01'\nlast_date <- '2021-01-01'\n\ndf_FTSE_daily <- BatchGetSymbols(tickers = ticker, \n                            first.date = first_date,\n                            last.date = last_date)[[2]]\n\n# buy at t, sell at t+30\ntrade_window <- 30 \n\n# find largest drops\nlargest_drops <- df_FTSE_daily %>%\n  arrange(ret.adjusted.prices) %>%\n  slice(1:20)\n\n# There are many ways to solve the exercise. \n# Here we will use a loop which is the simplest way to looking at the problem.\n# You could also solve it with the functional approach of package purrrr,\n# that is, writing a function.\n\ntab <- tibble()\nfor (i_date in seq_along(largest_drops$ref.date)) {\n  \n  my_date <- largest_drops$ref.date[i_date]\n  # filter data to keep only datapoints in each horizon\n  temp_df <- df_FTSE_daily %>%\n    filter(ref.date >= my_date,\n           ref.date <= my_date + trade_window)\n  \n  \n  buy_price <- first(temp_df$price.adjusted)\n  sell_price <- last(temp_df$price.adjusted)\n  return <- sell_price/buy_price - 1\n  \n  tab <- bind_rows(tab, \n                   tibble(date = my_date, \n                          buy_price = buy_price, \n                          sell_price = sell_price, \n                          return = return))\n}\n\nprint(tab)\n\n# solution\nmy_sol <- mean(tab$return)"},{"path":"figures.html","id":"figures","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10 Creating and Saving Figures with ggplot2","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"the-ggplot2-package","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.1 The ggplot2 Package","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"using-graphics-windows","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.2 Using Graphics Windows","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"creating-figures-with-function-qplot","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.3 Creating Figures with Function qplot","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"ggplot","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.4 Creating Figures with Function ggplot","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"the-us-yield-curve","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.4.1 The US Yield Curve","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"using-themes","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.5 Using Themes","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"creating-panels-with-facet_wrap","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.6 Creating Panels with facet_wrap","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"using-the-pipeline","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.7 Using the Pipeline","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"creating-statistical-graphics","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.8 Creating Statistical Graphics","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"creating-histograms","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.8.1 Creating Histograms","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"creating-boxplot-figures","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.8.2 Creating boxplot Figures","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"creating-qq-plots","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.8.3 Creating QQ Plots","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"saving-graphics-to-a-file","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.9 Saving Graphics to a File","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"exercises-9","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.10 Exercises","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"figures.html","id":"exercises-10","chapter":"10 Creating and Saving Figures with ggplot2","heading":"10.11 Exercises","text":"","code":""},{"path":"figures.html","id":"q.1-9","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.1","text":"Download TESLA (TSLA) stock data BatchGetSymbols package last 500 days. Display price line chart adjusted time using ggplot2 :: ggplot function. Make sure :x y axes correctly named;chart title (“Prices TESLA”), subtitle (“Data YYYY-MM-DD YYYY-MM-DD”) caption (“Solution exercise 01, chapter 10 - afedR”).\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ntickers <- 'TLSA'\n\ndf_tlsa<- BatchGetSymbols(tickers = tickers, \n                         first.date = Sys.Date() - 500,\n                         last.date = Sys.Date())[[2]]\n\np <- ggplot(df_tlsa, aes(x = ref.date, y = price.adjusted)) + \n  geom_line() + \n  labs(title = paste0('Prices for ', tickers) ,\n       subtitle = paste0('Data from ', min(df_tlsa$ref.date), ' to ', \n                         max(df_tlsa$ref.date)),\n       caption = \"Solution for exercise 01, chapter 10 - afedR\")\n\nprint(p)"},{"path":"figures.html","id":"q.2-9","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.2","text":"Download stock data :APPLE INC. (AAPL)MICROSOFT CORPORATION (MSFT)AMAZON.COM, INC. (AMZN)ALPHABET INC. (GOOG)using BatchGetSymbols package last 1500 days. Display stock prices different line colors graph. Adapt aspects graph previous exercises title axis labels.\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(ggplot2)\n\ntickers <- c('AAPL', \n             'MSFT',\n             'AMZN',\n             'GOOG') \n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = Sys.Date() - 500,\n                             last.date = Sys.Date())[[2]]\n\np <- ggplot(df_stocks, aes(x = ref.date, \n                           y = price.adjusted,\n                           color = ticker)) + \n  geom_line() + \n  labs(title = paste0('Prices for ', tickers) ,\n       subtitle = paste0('Data from ', min(df_stocks$ref.date), ' to ', \n                         max(df_stocks$ref.date)),\n       caption = \"Solution for exercise 02, chapter 10 - afedR\")\n\nprint(p)"},{"path":"figures.html","id":"q.3-8","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.3","text":"previous plot, add dots lines.\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(ggplot2)\n\ntickers <- c('AAPL', \n             'MSFT',\n             'AMZN',\n             'GOOG') \n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = Sys.Date() - 500,\n                             last.date = Sys.Date())[[2]]\n\np <- ggplot(df_stocks, aes(x = ref.date, \n                           y = price.adjusted,\n                           color = ticker)) + \n  geom_line() + \n  labs(title = paste0('Prices for ', tickers) ,\n       subtitle = paste0('Data from ', min(df_stocks$ref.date), ' to ', \n                         max(df_stocks$ref.date)),\n       caption = \"Solution for exercise 03, chapter 10 - afedR\")\n\n\n# add points\np <- p + geom_point()\n\nprint(p)"},{"path":"figures.html","id":"q.4-8","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.4","text":"plot, separate stock prices different panels ggplot::facet_wrap function. Use scales = 'free' argument release x y axis panel.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\ntickers <- c('AAPL', \n             'MSFT',\n             'AMZN',\n             'GOOG') \n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = Sys.Date() - 500,\n                             last.date = Sys.Date())[[2]]\n\np <- ggplot(df_stocks, aes(x = ref.date, \n                           y = price.adjusted,\n                           color = ticker)) + \n  geom_line() + \n  labs(title = paste0('Prices for ', tickers) ,\n       subtitle = paste0('Data from ', min(df_stocks$ref.date), ' to ', \n                         max(df_stocks$ref.date)),\n       caption = \"Solution for exercise 04, chapter 10 - afedR\")\n\n# add points and facet wrap\np <- p + \n  geom_point() + \n  facet_wrap(~ticker, scales = 'free')\n\nprint(p)"},{"path":"figures.html","id":"q.5-8","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.5","text":"Change theme previous graph black white scale, graph area colors lines.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\ntickers <- c('AAPL', \n             'MSFT',\n             'AMZN',\n             'GOOG') \n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = Sys.Date() - 500,\n                             last.date = Sys.Date())[[2]]\n\np <- ggplot(df_stocks, aes(x = ref.date, \n                           y = price.adjusted,\n                           color = ticker)) + \n  geom_line() + \n  labs(title = paste0('Prices for ', tickers) ,\n       subtitle = paste0('Data from ', min(df_stocks$ref.date), ' to ', \n                         max(df_stocks$ref.date)),\n       caption = \"Solution for exercise 05, chapter 10 - afedR\")\n\n# add points and facet_wrap\np <- p + geom_point() + \n  facet_wrap(~ticker, scales = 'free') + \n  theme_bw() + \n  scale_color_grey()\n\n# \nprint(p)"},{"path":"figures.html","id":"q.6-8","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.6","text":"previous data, present histogram returns different stocks different panels save result file called 'histograms.png'.\n\nSolution\n\n","code":"library(BatchGetSymbols)\n\ntickers <- c('AAPL', \n             'MSFT',\n             'AMZN',\n             'GOOG') \n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = Sys.Date() - 500,\n                             last.date = Sys.Date())[[2]]\n\np <- ggplot(df_stocks, aes(x = ret.adjusted.prices)) + \n  geom_histogram() + \n  facet_wrap(~ticker)\n\nprint(p)\n\n# save in temp folder\nmy_file <- file.path(tempdir(), 'histograms.png')\nggsave(filename = my_file, plot = p)"},{"path":"figures.html","id":"q.7-7","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.7","text":"Use BatchGetSymbols::GetSP500Stocks function discover tickers currently belonging SP500 index. Using BatchGetSymbols, download annual return data stocks index, 2015-01-01 current day. , create average/variance map plotting average annual return y axis standard deviation x axis. Tip: Use parallel option BatchGetSymbols speed execution code. Also, find many outliers raw data. Make sure graph visible limiting x y axes (see ggplot2::xlim ggplot2::ylim functions).\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ndf_sp500 <- GetSP500Stocks()\n\nmy_tickers <- df_sp500$Tickers\n\nfuture::plan(future::multisession, \n             workers = floor(parallel::detectCores()/2))\n\nfirst_date <- '2015-01-01'\ndf_prices <- BatchGetSymbols(tickers = my_tickers, \n                             first.date = first_date, \n                             last.date = Sys.Date(),\n                             freq.data = 'yearly', \n                             do.parallel = TRUE)[[2]]\n\ntab <- df_prices %>%\n  na.omit() %>%\n  group_by(ticker) %>%\n  summarise(mean = mean(ret.adjusted.prices),\n            sd = sd(ret.adjusted.prices))\n\np <- ggplot(tab, aes(x = sd, y = mean)) + \n  geom_point() + \n  xlim(0, 0.5) + ylim(-0.5, 0.5)\n\nprint(p)"},{"path":"figures.html","id":"q.8-6","chapter":"10 Creating and Saving Figures with ggplot2","heading":"Q.8","text":"Head Kaggle data website61 choose particular dataset analysis. need related economics finance. Feel free make decision based interests. downloading data, create visual analysis data. Fell free try one plots interest.\n\nSolution\n\nHead https://www.kaggle.com/datasets:Choose datasetBuild visualization plot chosen data","code":""},{"path":"models.html","id":"models","chapter":"11 Financial Econometrics with R","heading":"11 Financial Econometrics with R","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"linear-models","chapter":"11 Financial Econometrics with R","heading":"11.1 Linear Models (OLS)","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"simulating-a-linear-model","chapter":"11 Financial Econometrics with R","heading":"11.1.1 Simulating a Linear Model","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"estimating-ols","chapter":"11 Financial Econometrics with R","heading":"11.1.2 Estimating a Linear Model","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"testing-ols","chapter":"11 Financial Econometrics with R","heading":"11.1.3 Statistical Inference in Linear Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"generalized-linear-models-glm","chapter":"11 Financial Econometrics with R","heading":"11.2 Generalized Linear Models (GLM)","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"simulating-a-glm-model","chapter":"11 Financial Econometrics with R","heading":"11.2.1 Simulating a GLM Model","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"estimating-a-glm-model","chapter":"11 Financial Econometrics with R","heading":"11.2.2 Estimating a GLM Model","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"panel-data-models","chapter":"11 Financial Econometrics with R","heading":"11.3 Panel Data Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"simulating-panel-data-models","chapter":"11 Financial Econometrics with R","heading":"11.3.1 Simulating Panel Data Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"estimating-panel-data-models","chapter":"11 Financial Econometrics with R","heading":"11.3.2 Estimating Panel Data Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"arima-models","chapter":"11 Financial Econometrics with R","heading":"11.4 Arima Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"simulating-arima-models","chapter":"11 Financial Econometrics with R","heading":"11.4.1 Simulating Arima Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"arima-estimating","chapter":"11 Financial Econometrics with R","heading":"11.4.2 Estimating Arima Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"forecasting-arima-models","chapter":"11 Financial Econometrics with R","heading":"11.4.3 Forecasting Arima Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"garch-models","chapter":"11 Financial Econometrics with R","heading":"11.5 GARCH Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"simulating-garch-models","chapter":"11 Financial Econometrics with R","heading":"11.5.1 Simulating Garch Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"estimating-garch","chapter":"11 Financial Econometrics with R","heading":"11.5.2 Estimating Garch Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"forecasting-garch-models","chapter":"11 Financial Econometrics with R","heading":"11.5.3 Forecasting Garch Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"regime-switching-models","chapter":"11 Financial Econometrics with R","heading":"11.6 Regime Switching Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"simulating-regime-switching-models","chapter":"11 Financial Econometrics with R","heading":"11.6.1 Simulating Regime Switching Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"estimating-markov","chapter":"11 Financial Econometrics with R","heading":"11.6.2 Estimating Regime Switching Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"forecasting-regime-switching-models","chapter":"11 Financial Econometrics with R","heading":"11.6.3 Forecasting Regime Switching Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"dealing-with-several-models","chapter":"11 Financial Econometrics with R","heading":"11.7 Dealing with Several Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"using-tapply-and-sapply","chapter":"11 Financial Econometrics with R","heading":"11.7.1 Using tapply and sapply","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"using-by-1","chapter":"11 Financial Econometrics with R","heading":"11.7.2 Using by","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"using-dplyrgroup_by","chapter":"11 Financial Econometrics with R","heading":"11.7.3 Using dplyr::group_by","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"exercises-11","chapter":"11 Financial Econometrics with R","heading":"11.8 Exercises","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"models.html","id":"exercises-12","chapter":"11 Financial Econometrics with R","heading":"11.9 Exercises","text":"","code":""},{"path":"models.html","id":"q.1-10","chapter":"11 Financial Econometrics with R","heading":"Q.1","text":"Simulate following linear process R:Now, estimate linear model x explanatory variable y explained variable. Use summary function estimation return object get details model. estimated beta value simulated data?\n\nSolution\n\n","code":"set.seed(5)\n\n# number of obs\nn_row <- 100\n\n# set x as Normal (0, 1)\nx <- rnorm(n_row)\n\n# set coefficients\nmy_alpha <- 1.5\nmy_beta <- 0.5\n\n# build y\ny <- my_alpha + my_beta*x + rnorm(n_row)set.seed(5)\n\n# number of obs\nn_row <- 100\n\n# set x as Normal (0, 1)\nx <- rnorm(n_row)\n\n# set coefficients\nmy_alpha <- 1.5\nmy_beta <- 0.5\n\n# build y\ny <- my_alpha + my_beta*x + rnorm(n_row)\n\nlibrary(tidyverse)\n\nmy_lm <- lm(formula = y ~ x, data = tibble(x, y))\n\nsummary(my_lm)\n\nmy_sol <- coef(my_lm)[2]"},{"path":"models.html","id":"q.2-10","chapter":"11 Financial Econometrics with R","heading":"Q.2","text":"Using car package, test joint hypothesis value alpha equal 1.5 value beta equal 0.5. value resulting F test?\n\nSolution\n\n","code":"set.seed(5)\n\n# number of obs\nn_row <- 100\n\n# set x as Normal (0, 1)\nx <- rnorm(n_row)\n\n# set coefficients\nmy_alpha <- 1.5\nmy_beta <- 0.5\n\n# build y\ny <- my_alpha + my_beta*x + rnorm(n_row)\n\nlibrary(tidyverse)\n\nmy_lm <- lm(formula = y ~ x, data = tibble(x, y))\n\nsummary(my_lm)\n\nlibrary(car)\n\n# set test matrix\ntest_matrix <- matrix(c(my_alpha,  # alpha test value\n                        my_beta))  # beta test value\n\n# hypothesis matrix \nhyp_mat <- matrix(c(1.5, 0,\n                    0  , 0.5),\n                  nrow = 2)\n\n# do test\nmy_waldtest <- linearHypothesis(my_lm, \n                                hypothesis.matrix = hyp_mat, \n                                rhs = test_matrix)\n\n# print result\nmy_sol <- my_waldtest$F[2]"},{"path":"models.html","id":"q.3-9","chapter":"11 Financial Econometrics with R","heading":"Q.3","text":"Use gvlma package test OLS assumptions model previously estimated. model pass tests? , increase value n_row 1000 try . increase number observations model impact assumptions test? way?\n\nSolution\n\nestimated model passed tests. fact, even increase number observations simulation resulted approval model aspects.","code":"set.seed(5)\n\n# number of obs\nn_row <- 1000\n\n# set x as Normal (0, 1)\nx <- rnorm(n_row)\n\n# set coefficients\nmy_alpha <- 1.5\nmy_beta <- 0.5\n\n# build y\ny <- my_alpha + my_beta*x + rnorm(n_row)\n\nlibrary(tidyverse)\n\nmy_lm <- lm(formula = y ~ x, data = tibble(x, y))\n\nsummary(my_lm)\n\nlibrary(gvlma)\n\n# global validation of model\ngvmodel <- gvlma(my_lm) \n\n# print result\nsummary(gvmodel)"},{"path":"models.html","id":"q.4-9","chapter":"11 Financial Econometrics with R","heading":"Q.4","text":"Use BatchGetSymbols::GetSP500Stocks function download data stocks part current SP500 index last three years. Using SP500 – ticker '^GSPC' – market index, calculate beta stocks. Display histogram estimated betas. Note SP500 returns available original database must downloaded added original database.\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ntickers <- GetSP500Stocks()$Tickers\nfirst_date <- Sys.Date() - 3*365\nlast_date  <- Sys.Date()\n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\ndf_sp500 <- BatchGetSymbols(tickers =  '^GSPC', \n                            first.date = first_date, \n                            last.date = last_date)[[2]]\n\nidx <- match(df_stocks$ref.date, df_sp500$ref.date)\ndf_stocks$ret_mkt <- df_sp500$ret.closing.prices[idx]\n\n# calculate beta for each stock\nestimate_beta <- function(df) {\n  # Function to estimate beta from dataframe of stocks returns\n  #\n  # Args:\n  #   df - Dataframe with columns ret and ret.sp500\n  #\n  # Returns:\n  #   The value of beta\n  \n  my_model <- lm(data = df, \n                 formula = ret.adjusted.prices ~ ret_mkt)\n  \n  return(coef(my_model)[2])\n}\n\nmy_betas <- by(data = df_stocks, \n               INDICES = df_stocks$ticker, \n               FUN = estimate_beta)\n\nglimpse(my_betas)\n\n# solution\np <- ggplot(tibble(betas = my_betas), aes(x = betas)) + \n  geom_histogram()\n\nprint(p)"},{"path":"models.html","id":"q.5-9","chapter":"11 Financial Econometrics with R","heading":"Q.5","text":"previously imported data, estimate panel data version market model (beta). version, stock different intercept, share beta. estimated beta significant 5%?\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ntickers <- GetSP500Stocks()$Tickers\nfirst_date <- Sys.Date() - 3*365\nlast_date  <- Sys.Date()\n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\ndf_sp500 <- BatchGetSymbols(tickers =  '^GSPC', \n                            first.date = first_date, \n                            last.date = last_date)[[2]]\n\nidx <- match(df_stocks$ref.date, df_sp500$ref.date)\ndf_stocks$ret_mkt <- df_sp500$ret.closing.prices[idx]\n\n# calculate PLM beta\nlibrary(plm)\n\n# estimate panel data model with fixed effects\nmy_pdm <- plm(data = df_stocks, \n              formula = ret.adjusted.prices ~ ret_mkt, \n              model = 'within',\n              index = c('ticker'))\n\n# print result\nprint(summary(my_pdm))"},{"path":"models.html","id":"q.6-9","chapter":"11 Financial Econometrics with R","heading":"Q.6","text":"Using tidyverse functions, dplyr::group_by dplyr::, estimate ARIMA model returns stock, available import process previous exercise. output dataframe, create new column forecast t + 1 model. stock highest expected return t + 1?\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ntickers <- GetSP500Stocks()$Tickers\nfirst_date <- Sys.Date() - 3*365\nlast_date  <- Sys.Date()\n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\ndf_sp500 <- BatchGetSymbols(tickers =  '^GSPC', \n                            first.date = first_date, \n                            last.date = last_date)[[2]]\n\nlibrary(dplyr)\n\nmy_tab <- df_stocks %>%\n  group_by(ticker) %>%\n  do(my_arima = arima(x = .$ret.adjusted.prices, \n                      order = c(1,0,0))) %>%\n  mutate(arima_forecast = predict(my_arima, n.ahead = 1 )$pred[1])\n\nglimpse(my_tab)\n\n# solution\nidx <- which.max(my_tab$arima_forecast )\nprint(my_tab$ticker[idx])"},{"path":"models.html","id":"q.7-8","chapter":"11 Financial Econometrics with R","heading":"Q.7","text":"code used previous question, add new column-list estimation ARMA (1, 0)-GARCH(1, 1) model returns stock. Add another column volatility forecast (standard deviation) t + 1.dividing expected return calculated previous item expected risk, market direction index, stocks highest index value highest ratio expected return risk. stock attractive highest value index?\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ntickers <- GetSP500Stocks()$Tickers\nfirst_date <- Sys.Date() - 3*365\nlast_date  <- Sys.Date()\n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\nlibrary(dplyr)\nlibrary(fGarch)\n\ntab_models <- df_stocks %>%\n  na.omit() %>%\n  group_by(ticker) %>%\n  do(my_garch = garchFit(formula = ~ arma(1,0) + garch(1,1), \n                         data = .$ret.adjusted.prices, \n                         trace = FALSE) ) \n\ntab_models <- tab_models %>%\n  mutate(forecast_mean = predict(my_garch, \n                                 n.ahead = 1)$meanForecast[1],\n         forecast_sd = predict(my_garch, \n                               n.ahead = 1)$standardDeviation[1],\n         sharpe_index = forecast_mean/forecast_sd)\n\nglimpse(tab_models)\n\n# solution\nidx <- which.max(tab_models$sharpe_index)\nprint(tab_models$ticker[idx])"},{"path":"models.html","id":"q.8-7","chapter":"11 Financial Econometrics with R","heading":"Q.8","text":"SP500 database, select 4 stocks random estimate Markov regime switching model configuration equivalent presented section 11.6.2. Use plot function display graph smoothed probabilities save figure folder called 'fig'.\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ntickers <- GetSP500Stocks()$Tickers\nfirst_date <- Sys.Date() - 3*365\nlast_date  <- Sys.Date()\n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\nlibrary(tidyverse)\nlibrary(fMarkovSwitching)\n\nset.seed(10)\n\nrandom_stocks <- sample(unique(df_stocks$ticker), 4)\n\ntemp_df <- df_stocks %>%\n  dplyr::filter(ticker %in% random_stocks)\n\n  tab_switching_model <- temp_df %>%\n  na.omit() %>%\n  group_by(ticker) %>%\n  do(ms_model = MS_Regress_Fit(dep = .$ret.adjusted.prices,\n                               indep = rep(1, nrow(.)),\n                               S = c(1), \n                               k = 2))  # fitting the model)\n\n\n# using temp folder for solution\n\nplot_and_save <- function(model_in, ticker_in) {\n  \n  if (!dir.exists('figs')) dir.create('figs')\n  \n  out_file <- file.path('figs', paste0('plot_', ticker_in, '.jpg'))\n  \n  jpeg(out_file)\n  plot(model_in)\n  dev.off()\n  \n  return(TRUE)\n  \n  \n}\n\nlibrary(purrr)\n\nl_out <- pmap(.l = list(model_in = tab_switching_model$ms_model,\n                        ticker_in = tab_switching_model$ticker), \n              .f =  plot_and_save)"},{"path":"reporting.html","id":"reporting","chapter":"12 Reporting Results","heading":"12 Reporting Results","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"reporting.html","id":"reporting-tables","chapter":"12 Reporting Results","heading":"12.1 Reporting Tables","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"reporting.html","id":"reporting-models","chapter":"12 Reporting Results","heading":"12.2 Reporting Models","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"reporting.html","id":"creating-rmarkdown","chapter":"12 Reporting Results","heading":"12.3 Creating Reports with RMarkdown","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"reporting.html","id":"exercises-13","chapter":"12 Reporting Results","heading":"12.4 Exercises","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"reporting.html","id":"exercises-14","chapter":"12 Reporting Results","heading":"12.5 Exercises","text":"","code":""},{"path":"reporting.html","id":"q.1-11","chapter":"12 Reporting Results","heading":"Q.1","text":"Observe data available grunfeld.csv file. Import data R using package afedR create descriptive table variables. table provide enough information reader understand data. Use xtable package report LaTeX Word/Writer format.\n\nSolution\n\n","code":"library(tidyverse)\n\nmy_f <-  afedR::get_data_file('grunfeld.csv')\n\ndf_grunfeld <- read_csv(my_f, col_types = cols())\n\nmy_tab <- tibble(nrows = nrow(df_grunfeld),\n                 ncol = ncol(df_grunfeld),\n                 n_companies = length(unique(df_grunfeld$firm)),\n                 n_years = length(unique(df_grunfeld$year)))\n\nmy_tab\n\nlibrary(xtable)\n\n# Save to lates\n# save to temp file\nmy_tex_file <- tempfile(pattern = 'table', fileext = '.tex')\nprint(xtable(my_tab), file = my_tex_file)\n\nreadr::read_lines(my_tex_file)"},{"path":"reporting.html","id":"q.2-11","chapter":"12 Reporting Results","heading":"Q.2","text":"Using BatchGetSymbols::GetSP500Stocks function, select 4 stocks random download adjusted price data last three years. Estimate ARIMA(1, 0, 1) model stock report result R screen texreg::screenreg function.\n\nSolution\n\n","code":"library(BatchGetSymbols)\nlibrary(tidyverse)\n\ntickers <- sample(GetSP500Stocks()$Tickers, 4)\nfirst_date <- Sys.Date() - 3*365\nlast_date  <- Sys.Date()\n\ndf_stocks <- BatchGetSymbols(tickers = tickers, \n                             first.date = first_date, \n                             last.date = last_date)[[2]]\n\nmy_tab <- df_stocks %>%\n  na.omit() %>%\n  group_by(ticker) %>%\n  do(my_arima = arima(x = .$ret.adjusted.prices, \n                      order = c(1, 0, 1))) \n\nglimpse(my_tab)\n\n# solution\nlibrary(texreg)\n\nscreenreg(my_tab$my_arima)"},{"path":"reporting.html","id":"q.3-10","chapter":"12 Reporting Results","heading":"Q.3","text":"Create new Rmarkdown report previous two exercises. Compile report html open browser.\n\nSolution\n\n","code":""},{"path":"optimizing.html","id":"optimizing","chapter":"13 Optimizing Code","heading":"13 Optimizing Code","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"optimizing-your-programming-time","chapter":"13 Optimizing Code","heading":"13.1 Optimizing your Programming Time","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"optimizing-code-speed","chapter":"13 Optimizing Code","heading":"13.2 Optimizing Code Speed","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"profiling-code","chapter":"13 Optimizing Code","heading":"13.2.1 Profiling Code","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"simple-strategies-to-improve-code-speed","chapter":"13 Optimizing Code","heading":"13.2.2 Simple Strategies to Improve Code Speed","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"use-vector-operations","chapter":"13 Optimizing Code","heading":"13.2.2.1 Use Vector Operations","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"repetitive-binding-of-dataframes","chapter":"13 Optimizing Code","heading":"13.2.2.2 Repetitive binding of dataframes","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"using-c-code-package-rcpp","chapter":"13 Optimizing Code","heading":"13.2.3 Using C++ code (package Rcpp)","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"using-cache-package-memoise","chapter":"13 Optimizing Code","heading":"13.2.4 Using cache (package memoise)","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"using-parallel-processing-package-furrr","chapter":"13 Optimizing Code","heading":"13.2.4.1 Using parallel processing (package furrr)","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"exercises-15","chapter":"13 Optimizing Code","heading":"13.3 Exercises","text":"\nreached end online version Analyzing Financial\nEconomic Data R. full content book can \nacquired Amazon\nless ten dollars. Purchasing book great way \nsupporting projects author. satisfied \ncontent, please leave feedback Amazon email\n(marceloperlin@gmail.com). book lifelong project ’ll keep\nimproving based received feedback.\n","code":""},{"path":"optimizing.html","id":"exercises-16","chapter":"13 Optimizing Code","heading":"13.4 Exercises","text":"","code":""},{"path":"optimizing.html","id":"q.1-12","chapter":"13 Optimizing Code","heading":"Q.1","text":"Consider following code:Use functions Rprof profvis identify bottleneck code. line number taking longest execution time?\n\nSolution\n\n","code":"library(tidyverse)\nlibrary(forecast)\nlibrary(BatchGetSymbols)\n\nticker <- '^GSPC'\ndf_prices <- BatchGetSymbols(tickers = ticker, \n                             first.date = '2010-01-01')[[2]]\n\nmy_arima <- auto.arima(df_prices$ret.adjusted.prices)\nsummary(my_arima)library(tidyverse)\nlibrary(BatchGetSymbols)\nlibrary(fGarch)\nlibrary(profvis)\n\n# set temporary file for results\nprofiling_file <-  tempfile(pattern = 'profiling_exercise', \n                            fileext = '.out')\n\n# initialize profiling\nRprof(filename = profiling_file)\n\n# run code\nprofiling <- profvis(expr = {\n  ticker <- '^GSPC'\n  df_prices <- BatchGetSymbols(tickers = ticker, \n                               first.date = '2000-01-01', do.cache = FALSE)[[2]]\n  \n  my_garch <- garchFit(formula = ret.adjusted.prices ~ arma(1,1) + garch(1,1), \n                       data =  na.omit(df_prices) )\n})\n\n# create visualization\ntemp_html <- tempfile(pattern = 'profile',\n                      fileext = '.html')\n\nhtmlwidgets::saveWidget(profiling, temp_html)\n\n# open in browser from R\nbrowseURL(temp_html)"},{"path":"optimizing.html","id":"q.2-12","chapter":"13 Optimizing Code","heading":"Q.2","text":"Use Rcpp package write C++ language function add elements two numerical vectors. output must another vector size elements equivalent x + y operation. Use identical function test elements vectors equal.\n\nSolution\n\n","code":"library(Rcpp)\n\ncppFunction('Rcpp::NumericVector sum_vectors_C(NumericVector x, NumericVector y) {\n  int n = x.size();\n  \n  Rcpp::NumericVector total(x.size());\n  \n  for(int i = 0; i < n; ++i) {\n    total[i] = x[i] + y[i];\n  }\n  return total;\n}')\n\nx <- runif(100)\ny <- runif(100)\n\nsol_C <- sum_vectors_C(x, y)\nsol_R <- x + y\n\nidentical(sol_C, sol_R)"},{"path":"optimizing.html","id":"q.3-11","chapter":"13 Optimizing Code","heading":"Q.3","text":"Use tictoc package compare performance previous function native operator +, loop-based version pre-allocation result vector. alternative shortest execution time ? Rcpp version beat loop version?\n\nSolution\n\nbest way add vectors native operator +, already optimized fast executions.","code":"library(Rcpp)\n\ncppFunction('Rcpp::NumericVector sum_vectors_C(NumericVector x, NumericVector y) {\n  int n = x.size();\n  \n  Rcpp::NumericVector total(x.size());\n  \n  for(int i = 0; i < n; ++i) {\n    total[i] = x[i] + y[i];\n  }\n  return total;\n}')\n\nx <- runif(100)\ny <- runif(100)\n\nsol_C <- sum_vectors_C(x, y)\nsol_R <- x + y\n\nidentical(sol_C, sol_R)\n\nlibrary(tictoc)\n\ntic('Using Rcpp')\nsol_C <- sum_vectors_C(x, y)\ntoc()\n\ntic('Using base R')\nsol_R <- x + y\ntoc()\n\ntic('Using a loop and prealocation')\nsol_loop <- numeric(length = length(x))\nfor (i in 1:length(x)) {\n  sol_loop[i] <- x[i] + y[i]\n}\ntoc()"},{"path":"optimizing.html","id":"q.4-10","chapter":"13 Optimizing Code","heading":"Q.4","text":"Use memoise package create memorized version function Quandl::Quandl. Use new function import data United States Consumer Price Index (quandl code 'FRED/DDOE01USA086NWDB'). much percentage speed gain get second call memorized version?\n\nSolution\n\n","code":"library(Quandl)\nlibrary(memoise)\nlibrary(tictoc)\n\nmem_quandl <- memoise(f = Quandl, cache = cache_memory())\n\nid <- 'FRED/DDOE01USA086NWDB'\n\ntic('Using original Quandl')\ndf <- Quandl(code = id)\ntoc()\n\ntic('Using memoise version (first call)')\ndf <- mem_quandl(code = id)\ntoc()\n\ntic('Using memoise version (second call)')\ndf <- mem_quandl(code = id)\ntoc()"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
